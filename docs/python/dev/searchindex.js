Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 117, 133, 134, 239, 257, 271, 572, 643, 726, 752, 780, 1061], "refer": [0, 31, 100, 101, 102, 105, 106, 107, 108, 109, 111, 139, 257, 351, 354, 443, 477, 519, 539, 540, 541, 544, 643, 663, 697, 742, 839, 842, 950, 1017, 1018, 1019, 1022, 1061], "input": [0, 67, 73, 93, 101, 102, 105, 134, 135, 158, 186, 201, 202, 209, 223, 233, 234, 237, 257, 264, 271, 366, 386, 437, 443, 452, 468, 509, 567, 568, 569, 570, 571, 572, 574, 577, 580, 581, 582, 583, 589, 590, 597, 598, 605, 606, 607, 609, 610, 611, 614, 615, 623, 626, 627, 628, 634, 643, 654, 657, 675, 701, 702, 703, 709, 714, 720, 721, 724, 742, 752, 871, 928, 929, 931, 1061], "output": [0, 26, 28, 31, 32, 33, 34, 105, 134, 159, 160, 171, 181, 186, 188, 197, 201, 229, 233, 257, 271, 313, 441, 442, 451, 474, 488, 490, 492, 494, 564, 572, 584, 592, 593, 609, 631, 643, 654, 676, 677, 686, 690, 691, 701, 703, 720, 726, 742, 752, 796, 948, 1049, 1061], "seri": [0, 1, 2, 23, 59, 68, 69, 70, 71, 74, 90, 92, 95, 97, 121, 125, 142, 150, 153, 155, 156, 160, 161, 164, 165, 167, 169, 177, 178, 182, 193, 194, 211, 215, 218, 221, 222, 238, 257, 270, 271, 282, 289, 297, 298, 300, 347, 369, 375, 384, 388, 390, 391, 392, 394, 395, 396, 408, 413, 416, 428, 429, 432, 433, 434, 439, 441, 471, 477, 478, 479, 480, 481, 483, 485, 491, 497, 498, 501, 512, 533, 539, 540, 541, 544, 548, 554, 555, 563, 568, 570, 572, 573, 574, 578, 579, 585, 587, 588, 589, 592, 593, 598, 599, 601, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 619, 620, 623, 625, 626, 627, 629, 631, 632, 633, 635, 643, 654, 672, 677, 725, 742, 1053, 1055, 1057, 1060, 1062, 1065, 1066, 1067, 1069], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 115, 116, 120, 121, 122, 123, 131, 255, 256, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 596, 597, 598, 599, 600, 601, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 619, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 643, 654, 661, 664, 668, 669, 673, 676, 681, 682, 683, 684, 686, 690, 691, 695, 699, 708, 709, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 751, 752, 766, 767, 778, 796, 797, 835, 867, 895, 896, 903, 948, 1001, 1013, 1014, 1030, 1038, 1039, 1049, 1061, 1068, 1069], "lazyfram": [0, 1, 52, 53, 55, 57, 67, 68, 69, 70, 71, 73, 74, 112, 113, 114, 115, 116, 117, 120, 125, 175, 187, 202, 234, 257, 295, 372, 434, 643, 654, 741, 745, 1068, 1069], "express": [0, 47, 48, 73, 122, 125, 127, 134, 135, 146, 148, 150, 158, 184, 188, 196, 201, 202, 209, 223, 233, 234, 237, 239, 257, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 289, 291, 292, 293, 295, 301, 302, 303, 304, 305, 306, 312, 313, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 361, 362, 366, 368, 369, 371, 372, 376, 378, 379, 380, 384, 386, 388, 389, 390, 391, 393, 398, 401, 402, 406, 407, 409, 410, 412, 413, 417, 434, 439, 440, 441, 442, 443, 447, 448, 449, 450, 451, 452, 454, 456, 458, 460, 464, 465, 467, 468, 470, 471, 472, 473, 474, 476, 480, 481, 483, 496, 497, 498, 500, 502, 504, 505, 507, 509, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 528, 529, 530, 533, 534, 535, 536, 550, 551, 554, 556, 557, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 608, 609, 610, 611, 614, 615, 617, 619, 620, 621, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 642, 654, 657, 661, 667, 668, 669, 672, 675, 695, 701, 702, 706, 707, 709, 714, 720, 721, 722, 724, 726, 742, 745, 752, 785, 786, 787, 795, 805, 857, 871, 901, 903, 970, 977, 991, 992, 997, 998, 999, 1000, 1001, 1007, 1008, 1061], "selector": [0, 141, 143, 146, 186, 188, 217, 225, 227, 257, 366, 627, 643, 654, 664, 665, 668, 690, 715, 742], "extend": [0, 93, 231, 257, 369, 643, 654, 751, 857, 1061], "function": [0, 31, 67, 68, 69, 70, 71, 91, 97, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 123, 133, 134, 139, 145, 153, 180, 187, 188, 220, 224, 227, 228, 239, 257, 267, 271, 312, 348, 363, 364, 365, 434, 441, 442, 468, 470, 485, 486, 487, 488, 489, 490, 492, 493, 494, 506, 558, 568, 570, 572, 587, 588, 589, 598, 599, 601, 607, 609, 610, 614, 619, 627, 643, 654, 663, 686, 690, 694, 697, 717, 726, 742, 752, 795, 836, 850, 851, 852, 853, 867, 925, 948, 958, 972, 973, 979, 984, 1043, 1061, 1069], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 47, 48, 52, 58, 67, 68, 70, 74, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 120, 121, 123, 124, 125, 127, 133, 134, 137, 147, 157, 158, 159, 160, 171, 172, 173, 175, 186, 187, 191, 196, 197, 198, 207, 214, 219, 220, 224, 233, 236, 255, 257, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 281, 284, 285, 286, 287, 289, 291, 292, 293, 296, 297, 304, 305, 313, 314, 319, 320, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 355, 356, 357, 358, 359, 361, 362, 368, 379, 380, 385, 386, 388, 389, 390, 391, 392, 394, 401, 406, 407, 409, 413, 417, 435, 440, 464, 465, 467, 468, 474, 476, 477, 480, 481, 483, 495, 496, 504, 505, 506, 512, 514, 516, 518, 519, 520, 521, 523, 528, 533, 534, 535, 536, 539, 540, 541, 544, 554, 556, 557, 558, 560, 561, 564, 567, 572, 574, 581, 591, 592, 593, 594, 595, 605, 606, 608, 609, 617, 620, 630, 631, 632, 635, 643, 654, 659, 660, 669, 675, 676, 677, 694, 720, 742, 749, 750, 751, 752, 762, 766, 767, 768, 770, 774, 776, 784, 788, 796, 801, 803, 804, 807, 808, 809, 810, 811, 813, 814, 815, 816, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 843, 844, 845, 846, 847, 855, 856, 867, 873, 875, 876, 878, 879, 881, 882, 883, 884, 888, 897, 898, 900, 904, 908, 926, 948, 950, 954, 956, 968, 969, 979, 984, 990, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1022, 1041, 1042, 1043, 1044, 1046, 1051, 1060, 1061, 1068], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 80, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 108, 109, 112, 113, 119, 120, 121, 124, 125, 134, 153, 157, 159, 160, 161, 172, 173, 214, 220, 222, 225, 257, 267, 269, 271, 273, 274, 275, 276, 277, 278, 281, 289, 291, 292, 293, 296, 297, 298, 301, 302, 303, 304, 305, 313, 314, 319, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 357, 359, 366, 368, 381, 386, 388, 389, 390, 391, 406, 407, 409, 413, 417, 434, 443, 474, 476, 480, 481, 483, 504, 505, 512, 514, 516, 518, 519, 520, 521, 523, 528, 533, 534, 535, 536, 539, 554, 556, 557, 558, 564, 572, 574, 581, 591, 592, 593, 594, 595, 597, 598, 605, 606, 607, 608, 609, 617, 620, 630, 631, 632, 635, 643, 654, 661, 667, 669, 676, 677, 681, 695, 707, 715, 742, 749, 750, 762, 768, 770, 774, 776, 778, 785, 786, 787, 796, 803, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 843, 844, 845, 847, 855, 865, 873, 875, 876, 878, 879, 881, 882, 883, 884, 888, 897, 898, 900, 904, 908, 925, 948, 954, 956, 979, 990, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1011, 1012, 1013, 1014, 1017, 1041, 1042, 1044, 1052, 1061, 1068], "config": [0, 67, 201, 233, 257, 595, 654, 701, 720, 742], "except": [0, 162, 174, 176, 212, 257, 597, 654, 682, 742, 745, 866, 893, 1032, 1042, 1051, 1061], "test": [0, 103, 105, 654, 678, 685, 742], "util": [0, 97, 601, 654, 669, 742], "sql": [0, 29, 52, 56, 103, 173, 257, 624, 654], "These": [1, 31, 131, 224, 257, 355, 642, 836, 843], "allow": [1, 30, 31, 47, 48, 58, 80, 91, 112, 114, 115, 116, 117, 125, 127, 133, 171, 174, 175, 196, 197, 199, 219, 220, 225, 236, 257, 271, 344, 351, 354, 441, 479, 496, 539, 540, 541, 643, 681, 682, 686, 690, 715, 722, 742, 745, 752, 832, 839, 842, 952, 969, 971, 1017, 1018, 1019, 1043, 1061, 1069], "you": [1, 13, 31, 35, 48, 57, 67, 74, 90, 92, 93, 94, 96, 101, 102, 103, 105, 106, 108, 109, 110, 112, 116, 120, 131, 134, 147, 159, 160, 171, 184, 196, 197, 198, 216, 219, 224, 239, 257, 271, 301, 302, 303, 340, 341, 347, 351, 354, 355, 366, 372, 386, 412, 434, 441, 443, 479, 484, 486, 487, 488, 489, 490, 492, 493, 494, 524, 527, 572, 587, 599, 617, 620, 635, 643, 661, 665, 676, 677, 678, 682, 685, 707, 726, 742, 745, 751, 752, 785, 786, 787, 828, 829, 835, 839, 842, 843, 856, 871, 903, 952, 957, 1002, 1005, 1019, 1042, 1051, 1061, 1069], "regist": [1, 52, 54, 55, 56, 57, 68, 69, 70, 71, 126, 128, 1068], "custom": [1, 30, 31, 68, 69, 70, 71, 126, 127, 128, 134, 239, 257, 271, 351, 354, 434, 441, 485, 572, 609, 643, 686, 726, 742, 752, 839, 842, 925, 958, 1061, 1069], "dedic": [1, 91, 171, 197, 257], "namespac": [1, 256, 642, 654, 741], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 108, 109, 110, 122, 125, 127, 146, 147, 171, 172, 197, 214, 257, 290, 320, 321, 325, 329, 331, 332, 333, 335, 337, 339, 342, 345, 346, 347, 349, 356, 357, 358, 359, 479, 495, 513, 515, 643, 668, 742, 745, 751, 769, 779, 804, 805, 809, 813, 815, 816, 820, 822, 825, 827, 830, 833, 834, 835, 837, 844, 845, 846, 847, 856, 952, 968, 979, 991, 993, 1037, 1042, 1061], "polar": [1, 257, 642, 643, 648, 654, 742, 745, 1061, 1068], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 122, 123, 198, 220, 257, 631, 643, 648, 654, 697, 742, 1041, 1042, 1061, 1068], "without": [1, 6, 97, 104, 107, 111, 113, 117, 227, 228, 257, 271, 312, 348, 486, 487, 488, 489, 490, 492, 493, 494, 623, 643, 717, 742, 777, 780, 795, 801, 836, 867, 948, 1042, 1061], "requir": [1, 30, 31, 35, 48, 67, 91, 95, 120, 121, 135, 139, 196, 220, 223, 257, 287, 363, 364, 365, 435, 501, 539, 540, 541, 561, 620, 643, 657, 709, 714, 742, 767, 851, 852, 853, 926, 978, 1017, 1018, 1019, 1042, 1043, 1046, 1061], "subclass": [1, 257], "mixin": 1, "expr": [1, 67, 68, 69, 70, 71, 146, 148, 150, 173, 174, 184, 188, 196, 201, 202, 233, 234, 257, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 639, 643, 644, 645, 648, 649, 650, 651, 668, 670, 681, 682, 696, 701, 702, 703, 706, 720, 721, 742, 795, 805, 858, 895, 896, 901, 903, 907, 920, 923, 977, 991, 995, 1015, 1033, 1061], "ar": [1, 6, 9, 11, 15, 18, 26, 28, 30, 31, 47, 48, 57, 58, 67, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 117, 120, 121, 123, 125, 131, 133, 134, 135, 139, 143, 145, 148, 152, 153, 158, 159, 160, 171, 173, 174, 175, 180, 181, 186, 188, 196, 197, 198, 201, 202, 203, 209, 215, 220, 223, 228, 229, 233, 234, 237, 257, 267, 269, 295, 308, 310, 311, 317, 318, 348, 355, 360, 362, 363, 364, 365, 386, 388, 390, 391, 392, 394, 395, 396, 399, 404, 434, 443, 465, 468, 474, 477, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 503, 506, 508, 509, 521, 522, 523, 524, 527, 528, 552, 568, 569, 570, 571, 577, 580, 582, 583, 584, 589, 590, 592, 593, 610, 611, 614, 615, 623, 626, 627, 628, 631, 632, 634, 636, 637, 639, 642, 643, 644, 645, 648, 649, 650, 651, 654, 657, 665, 670, 675, 676, 677, 678, 681, 682, 685, 686, 690, 691, 695, 698, 701, 702, 704, 709, 714, 717, 720, 721, 722, 724, 742, 745, 749, 751, 777, 793, 794, 836, 843, 849, 850, 851, 852, 853, 864, 871, 875, 878, 879, 881, 882, 883, 884, 891, 895, 925, 948, 950, 954, 958, 964, 981, 984, 999, 1000, 1002, 1005, 1006, 1019, 1031, 1042, 1043, 1051, 1053, 1055, 1057, 1061, 1062, 1065, 1066, 1067, 1069], "all": [1, 8, 15, 18, 23, 26, 28, 31, 36, 54, 67, 73, 90, 93, 95, 96, 101, 102, 104, 105, 106, 110, 112, 114, 115, 122, 123, 127, 140, 143, 149, 162, 167, 169, 171, 172, 175, 176, 180, 183, 184, 191, 196, 197, 198, 202, 208, 212, 217, 219, 225, 227, 229, 234, 257, 268, 269, 270, 288, 306, 312, 318, 319, 366, 371, 377, 381, 383, 385, 388, 391, 395, 396, 398, 402, 412, 417, 431, 434, 441, 442, 459, 466, 472, 477, 482, 501, 507, 509, 514, 520, 521, 522, 523, 526, 529, 530, 532, 538, 551, 564, 569, 581, 589, 590, 592, 597, 599, 604, 619, 626, 627, 628, 634, 643, 648, 654, 661, 665, 667, 669, 671, 686, 690, 695, 702, 707, 708, 715, 721, 722, 742, 745, 795, 797, 801, 803, 866, 873, 888, 893, 903, 908, 922, 925, 950, 985, 992, 998, 999, 1000, 1001, 1004, 1007, 1008, 1010, 1016, 1032, 1061, 1068, 1069], "support": [1, 30, 31, 35, 74, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 113, 122, 127, 131, 171, 172, 173, 197, 198, 208, 209, 216, 220, 257, 429, 468, 507, 509, 533, 581, 643, 648, 681, 708, 709, 742, 745, 920, 985, 1011, 1043, 1061, 1068], "target": [1, 29, 30, 31, 72, 257, 519, 539, 540, 541, 592, 745, 997, 1017, 1018, 1019], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 47, 48, 52, 53, 57, 58, 67, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 131, 133, 134, 135, 139, 143, 144, 145, 147, 152, 153, 158, 159, 160, 161, 165, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 191, 196, 197, 198, 199, 201, 202, 206, 208, 210, 211, 214, 216, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 239, 240, 256, 257, 267, 270, 271, 272, 281, 287, 294, 295, 297, 298, 306, 312, 313, 319, 320, 332, 340, 341, 344, 347, 348, 351, 354, 358, 362, 368, 384, 385, 386, 390, 398, 402, 412, 413, 417, 424, 425, 426, 427, 430, 434, 435, 438, 439, 441, 447, 448, 449, 450, 451, 452, 462, 463, 465, 468, 472, 474, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 498, 500, 501, 502, 507, 508, 509, 519, 525, 526, 531, 532, 538, 542, 547, 551, 559, 561, 562, 563, 564, 568, 570, 572, 573, 582, 585, 587, 589, 592, 593, 598, 599, 601, 607, 610, 614, 620, 623, 627, 631, 634, 643, 654, 655, 657, 658, 661, 665, 667, 669, 674, 675, 676, 677, 679, 681, 682, 686, 690, 691, 695, 697, 698, 701, 702, 703, 706, 707, 708, 709, 714, 715, 717, 720, 721, 722, 723, 726, 727, 741, 742, 745, 751, 752, 761, 767, 773, 776, 778, 779, 780, 795, 796, 801, 803, 804, 805, 816, 828, 829, 832, 835, 836, 839, 842, 846, 850, 855, 856, 863, 864, 867, 872, 877, 878, 880, 885, 887, 889, 890, 892, 903, 904, 908, 915, 916, 917, 918, 921, 926, 930, 932, 933, 934, 935, 937, 938, 940, 941, 943, 947, 948, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 962, 965, 966, 967, 969, 972, 973, 974, 977, 978, 979, 980, 985, 986, 988, 997, 1003, 1004, 1009, 1010, 1016, 1019, 1020, 1025, 1026, 1030, 1031, 1037, 1039, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1051, 1061, 1068, 1069], "featur": [1, 35, 39, 58, 72, 257], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 47, 48, 52, 57, 58, 67, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 134, 135, 143, 145, 147, 154, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 184, 186, 187, 188, 196, 197, 198, 199, 202, 208, 209, 210, 211, 212, 214, 219, 220, 223, 224, 225, 227, 228, 229, 230, 234, 236, 239, 240, 256, 257, 264, 267, 269, 270, 271, 272, 282, 295, 306, 312, 313, 319, 321, 331, 344, 348, 351, 355, 363, 364, 365, 368, 381, 384, 386, 399, 405, 412, 415, 429, 433, 434, 438, 441, 443, 447, 450, 452, 468, 474, 477, 479, 480, 481, 484, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 502, 503, 506, 507, 508, 509, 511, 513, 514, 519, 520, 521, 523, 525, 526, 528, 529, 531, 532, 533, 536, 538, 539, 540, 541, 544, 547, 564, 565, 568, 570, 572, 573, 578, 581, 582, 584, 585, 587, 588, 589, 592, 593, 599, 608, 610, 614, 620, 621, 622, 623, 625, 627, 631, 633, 634, 643, 657, 661, 665, 667, 669, 674, 675, 676, 677, 680, 681, 682, 684, 686, 690, 691, 695, 702, 703, 707, 708, 709, 710, 714, 715, 717, 718, 721, 726, 727, 742, 745, 750, 751, 752, 777, 780, 795, 796, 803, 805, 815, 832, 836, 839, 843, 850, 851, 852, 853, 855, 856, 864, 865, 866, 867, 872, 874, 880, 885, 886, 887, 889, 890, 891, 893, 896, 903, 906, 920, 924, 925, 948, 950, 952, 954, 957, 965, 967, 969, 970, 971, 972, 973, 974, 980, 981, 984, 985, 988, 991, 992, 997, 998, 999, 1001, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1014, 1016, 1017, 1018, 1019, 1022, 1025, 1032, 1037, 1042, 1043, 1049, 1050, 1051, 1061, 1068, 1069], "primarili": 1, "intend": [1, 592], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 38, 48, 52, 53, 54, 55, 57, 58, 67, 74, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 134, 141, 143, 148, 149, 153, 158, 159, 160, 167, 169, 171, 172, 174, 178, 180, 183, 184, 186, 187, 188, 196, 197, 198, 199, 201, 202, 209, 210, 211, 216, 217, 218, 219, 220, 224, 225, 227, 228, 229, 230, 233, 234, 237, 239, 257, 265, 271, 272, 282, 290, 291, 298, 312, 317, 318, 347, 351, 354, 355, 358, 360, 363, 364, 365, 366, 371, 372, 385, 386, 399, 412, 434, 441, 443, 446, 468, 474, 477, 479, 481, 484, 486, 487, 488, 489, 490, 492, 493, 494, 496, 498, 501, 506, 508, 509, 511, 513, 515, 516, 517, 519, 520, 522, 524, 525, 529, 531, 533, 535, 537, 539, 540, 541, 544, 565, 568, 569, 570, 571, 572, 573, 579, 581, 583, 584, 587, 589, 590, 592, 593, 594, 599, 601, 608, 610, 611, 614, 615, 617, 620, 621, 622, 623, 625, 626, 627, 628, 631, 633, 635, 642, 643, 653, 654, 661, 664, 665, 670, 671, 674, 675, 676, 677, 678, 682, 684, 685, 690, 701, 702, 709, 710, 715, 717, 718, 720, 721, 724, 726, 742, 745, 751, 752, 769, 770, 778, 780, 795, 796, 835, 839, 842, 843, 846, 849, 851, 852, 853, 858, 859, 864, 867, 870, 871, 891, 903, 925, 931, 948, 950, 952, 954, 957, 969, 972, 973, 974, 978, 980, 984, 988, 991, 993, 994, 997, 998, 1000, 1002, 1003, 1007, 1009, 1011, 1013, 1017, 1018, 1019, 1022, 1033, 1038, 1040, 1041, 1042, 1043, 1050, 1051, 1061, 1068, 1069], "librari": [1, 76, 83, 441, 643, 1069], "author": 1, "domain": [1, 520, 998], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 101, 103, 104, 108, 109, 113, 124, 125, 171, 257, 351, 354, 485, 539, 540, 541, 544, 643, 742, 745, 839, 842, 958, 1017, 1018, 1019, 1022, 1061, 1069], "capabl": [1, 31, 257], "which": [1, 9, 18, 27, 28, 30, 31, 32, 33, 34, 35, 47, 48, 67, 68, 69, 70, 71, 93, 101, 102, 103, 104, 105, 112, 113, 120, 126, 128, 135, 143, 147, 148, 158, 159, 160, 174, 219, 223, 225, 229, 257, 267, 295, 344, 348, 351, 355, 369, 386, 388, 391, 392, 394, 395, 396, 434, 452, 484, 486, 487, 488, 489, 490, 492, 493, 494, 528, 592, 593, 631, 632, 634, 643, 657, 665, 667, 676, 677, 682, 703, 714, 715, 742, 751, 832, 836, 839, 843, 856, 857, 871, 875, 879, 881, 882, 883, 884, 925, 957, 972, 1006, 1042, 1061, 1069], "mai": [1, 30, 39, 48, 74, 90, 92, 93, 94, 96, 101, 104, 106, 108, 109, 113, 114, 117, 134, 145, 147, 159, 160, 174, 205, 206, 220, 227, 228, 229, 257, 271, 312, 319, 320, 332, 344, 348, 355, 366, 428, 433, 434, 441, 451, 486, 487, 488, 489, 490, 492, 493, 494, 499, 500, 587, 588, 592, 599, 619, 643, 676, 677, 682, 686, 705, 706, 717, 723, 726, 742, 751, 752, 779, 780, 795, 803, 804, 816, 832, 836, 843, 850, 856, 867, 919, 924, 948, 976, 977, 1019, 1042, 1061, 1069], "exist": [1, 29, 30, 31, 67, 104, 113, 125, 224, 233, 234, 257, 266, 289, 292, 293, 321, 643, 720, 721, 742, 745, 805], "belong": [1, 159, 257, 676, 742], "core": [1, 220, 257, 1069], "cannot": [1, 101, 102, 105, 106, 120, 129, 134, 198, 199, 239, 257, 271, 290, 366, 443, 496, 515, 535, 549, 572, 643, 707, 726, 742, 752, 769, 969, 993, 1013, 1061], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 101, 108, 109, 122, 123, 127, 129, 257, 443, 643, 742, 931, 1061], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 47, 48, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 75, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123, 125, 126, 127, 128, 131, 135, 138, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 164, 167, 169, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 184, 186, 188, 190, 192, 193, 194, 195, 196, 197, 199, 203, 205, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 264, 265, 266, 271, 289, 291, 292, 293, 297, 313, 316, 322, 344, 347, 348, 351, 354, 355, 366, 368, 372, 374, 378, 384, 386, 393, 408, 409, 415, 416, 417, 429, 432, 434, 442, 443, 451, 453, 454, 456, 468, 470, 472, 474, 480, 482, 484, 486, 487, 488, 489, 490, 492, 493, 494, 500, 501, 508, 509, 548, 549, 551, 554, 566, 567, 569, 571, 572, 573, 575, 576, 579, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 607, 609, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 643, 649, 657, 661, 662, 663, 664, 665, 667, 668, 669, 672, 674, 675, 676, 677, 679, 681, 682, 690, 691, 695, 697, 698, 699, 703, 704, 706, 707, 708, 709, 714, 715, 716, 717, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 774, 776, 796, 797, 806, 832, 835, 836, 839, 842, 843, 855, 859, 900, 901, 908, 925, 931, 940, 941, 948, 953, 972, 973, 1026, 1028, 1038, 1039, 1040, 1061, 1065, 1068, 1069], "dt": [1, 67, 160, 257, 592, 595, 651, 677, 742, 745, 1067], "attempt": [1, 219, 257, 592, 593], "do": [1, 31, 47, 48, 67, 73, 74, 112, 120, 121, 147, 159, 160, 174, 188, 214, 224, 227, 257, 312, 412, 468, 526, 532, 538, 617, 620, 635, 643, 661, 667, 676, 677, 682, 686, 695, 707, 742, 745, 751, 795, 856, 903, 1004, 1010, 1016, 1042, 1051, 1061], "so": [1, 58, 103, 112, 129, 157, 159, 160, 188, 257, 282, 295, 386, 415, 434, 526, 532, 538, 643, 676, 677, 742, 906, 1004, 1010, 1016], "rais": [1, 14, 18, 30, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 105, 112, 120, 121, 133, 188, 196, 257, 290, 347, 355, 433, 451, 474, 513, 515, 528, 539, 540, 541, 544, 594, 608, 643, 769, 835, 843, 924, 948, 991, 993, 1006, 1017, 1018, 1019, 1022, 1042, 1051, 1061], "an": [1, 6, 26, 28, 29, 30, 31, 39, 68, 70, 71, 73, 76, 80, 81, 83, 90, 101, 102, 103, 104, 105, 107, 110, 112, 114, 123, 125, 127, 134, 136, 137, 145, 148, 150, 153, 159, 160, 171, 172, 174, 184, 188, 194, 196, 214, 219, 224, 227, 233, 239, 257, 266, 267, 271, 290, 296, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 321, 322, 347, 351, 358, 369, 371, 372, 378, 398, 410, 412, 415, 433, 434, 441, 442, 452, 473, 474, 481, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 513, 515, 520, 539, 540, 541, 544, 554, 560, 568, 570, 574, 578, 581, 589, 592, 593, 596, 601, 605, 606, 608, 610, 614, 617, 619, 620, 623, 626, 627, 631, 632, 634, 635, 643, 654, 659, 660, 661, 667, 669, 672, 676, 677, 682, 686, 695, 707, 720, 722, 726, 742, 745, 752, 769, 774, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 805, 839, 846, 850, 857, 880, 901, 903, 906, 924, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 972, 973, 991, 993, 998, 1017, 1018, 1019, 1022, 1042, 1051, 1061, 1068], "attributeerror": 1, "howev": [1, 93, 134, 145, 219, 257, 592, 850, 1061], "can": [1, 13, 30, 31, 35, 38, 57, 67, 81, 91, 93, 101, 102, 105, 106, 110, 112, 114, 116, 117, 123, 124, 125, 127, 129, 131, 134, 135, 136, 143, 144, 153, 158, 159, 160, 167, 169, 184, 188, 198, 201, 209, 219, 223, 224, 227, 233, 239, 257, 271, 308, 311, 312, 340, 341, 344, 347, 355, 369, 386, 398, 412, 434, 451, 459, 468, 472, 474, 479, 486, 487, 488, 489, 490, 492, 493, 494, 498, 501, 503, 506, 509, 523, 526, 532, 538, 539, 551, 564, 577, 581, 599, 601, 634, 642, 643, 653, 657, 661, 665, 667, 676, 677, 701, 703, 709, 714, 720, 723, 742, 745, 752, 780, 795, 796, 828, 829, 832, 835, 836, 843, 857, 871, 903, 925, 936, 948, 952, 972, 973, 974, 978, 981, 984, 999, 1001, 1004, 1010, 1016, 1017, 1019, 1042, 1061, 1068], "other": [1, 18, 30, 31, 35, 57, 101, 102, 105, 112, 120, 121, 143, 147, 154, 173, 174, 180, 181, 196, 198, 201, 202, 228, 231, 233, 234, 255, 257, 264, 268, 270, 282, 301, 302, 303, 316, 361, 362, 376, 379, 380, 386, 390, 401, 408, 424, 425, 426, 427, 440, 443, 447, 450, 458, 460, 464, 465, 467, 509, 550, 558, 560, 567, 568, 569, 570, 571, 580, 582, 583, 589, 590, 592, 610, 611, 614, 615, 623, 626, 627, 628, 643, 654, 665, 681, 682, 690, 691, 701, 702, 717, 720, 721, 722, 742, 745, 751, 785, 786, 787, 799, 856, 878, 899, 915, 916, 917, 918, 971, 1044, 1052, 1060, 1061], "onli": [1, 18, 26, 28, 31, 52, 54, 58, 67, 72, 74, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 125, 127, 131, 134, 143, 147, 159, 160, 171, 173, 174, 178, 197, 198, 211, 216, 218, 219, 229, 239, 257, 265, 271, 282, 295, 300, 301, 302, 303, 344, 352, 366, 375, 398, 468, 472, 479, 486, 487, 488, 489, 490, 492, 493, 494, 551, 562, 572, 592, 593, 643, 661, 665, 676, 677, 678, 681, 682, 685, 726, 742, 751, 752, 782, 785, 786, 787, 796, 832, 856, 862, 880, 948, 952, 1037, 1040, 1061, 1068, 1069], "gener": [1, 103, 118, 122, 123, 124, 125, 127, 133, 139, 188, 199, 217, 219, 224, 257, 496, 502, 574, 592, 605, 606, 620, 631, 632, 643, 742, 969, 980, 1038, 1061, 1069], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 127, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 643, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 853, 856, 857, 858, 859, 860, 862, 865, 866, 867, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 895, 896, 902, 903, 904, 907, 908, 910, 915, 916, 918, 919, 920, 921, 923, 925, 930, 931, 932, 933, 934, 935, 936, 937, 938, 944, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 980, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1061, 1068, 1069], "register_expr_namespac": [1, 68, 70, 71], "greet": 1, "def": [1, 68, 69, 70, 71, 123, 124, 125, 127, 131, 187, 224, 257, 264, 470, 520, 567, 609, 643, 694, 742, 745, 998, 1069], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 122, 1068], "self": [1, 53, 54, 55, 57, 68, 69, 70, 71, 73, 136, 137, 140, 147, 162, 164, 165, 176, 177, 178, 179, 180, 182, 185, 186, 188, 190, 191, 193, 194, 199, 205, 207, 208, 210, 211, 212, 217, 224, 226, 229, 230, 231, 235, 236, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 288, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 643, 657, 658, 660, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 742, 751, 752, 774, 788, 856, 860, 868, 930, 931, 942, 945, 946, 951, 972, 973, 974, 986, 1048, 1052, 1061], "_expr": [1, 69], "hello": [1, 18, 53, 56, 526, 532, 538, 908, 1004, 1010, 1016], "return": [1, 9, 26, 28, 31, 32, 33, 34, 47, 48, 52, 56, 67, 68, 69, 70, 71, 72, 73, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 124, 130, 134, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 157, 158, 159, 160, 162, 164, 170, 171, 172, 173, 175, 176, 183, 184, 186, 187, 188, 196, 197, 198, 199, 212, 213, 219, 220, 223, 224, 225, 229, 233, 234, 239, 242, 246, 251, 257, 267, 269, 273, 274, 275, 276, 277, 278, 281, 282, 289, 291, 292, 293, 294, 304, 305, 313, 314, 319, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 355, 356, 357, 359, 368, 382, 386, 388, 389, 390, 391, 392, 394, 395, 396, 403, 406, 407, 409, 413, 415, 416, 417, 432, 433, 439, 443, 452, 454, 459, 470, 474, 476, 480, 481, 483, 496, 497, 503, 504, 505, 512, 514, 516, 518, 519, 520, 521, 523, 524, 525, 527, 528, 531, 533, 534, 535, 536, 547, 553, 554, 555, 556, 557, 559, 560, 562, 563, 564, 567, 568, 572, 574, 575, 576, 577, 578, 581, 591, 592, 593, 594, 595, 601, 603, 605, 606, 608, 609, 617, 620, 623, 626, 629, 630, 631, 632, 634, 635, 643, 657, 659, 661, 665, 666, 667, 669, 676, 677, 678, 684, 685, 686, 694, 695, 703, 707, 712, 713, 714, 715, 720, 721, 729, 733, 738, 742, 749, 750, 751, 752, 759, 760, 762, 763, 768, 770, 773, 777, 780, 784, 796, 797, 803, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 843, 844, 845, 847, 850, 855, 856, 864, 866, 867, 873, 875, 876, 878, 879, 881, 882, 883, 884, 888, 890, 893, 897, 898, 900, 904, 906, 907, 908, 923, 924, 930, 931, 936, 948, 954, 955, 956, 957, 969, 970, 971, 973, 981, 990, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1025, 1032, 1034, 1045, 1047, 1048, 1052, 1061, 1068, 1069], "lit": [1, 266, 386, 398, 587, 599, 617, 620, 634, 635, 643, 859, 1061], "alia": [1, 12, 67, 69, 71, 159, 160, 176, 226, 233, 257, 264, 268, 271, 289, 291, 292, 293, 294, 301, 302, 303, 307, 308, 309, 310, 311, 313, 315, 319, 320, 321, 322, 325, 326, 327, 328, 330, 332, 333, 334, 336, 338, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 361, 362, 372, 374, 376, 379, 380, 384, 386, 389, 390, 398, 401, 402, 403, 410, 412, 424, 425, 426, 427, 440, 442, 443, 455, 458, 460, 464, 465, 467, 469, 471, 474, 477, 479, 497, 513, 514, 517, 519, 520, 524, 527, 533, 535, 536, 537, 548, 549, 550, 558, 559, 560, 566, 567, 568, 570, 572, 574, 575, 576, 579, 580, 582, 583, 587, 588, 589, 592, 595, 596, 599, 600, 609, 610, 614, 619, 620, 626, 627, 631, 634, 643, 676, 677, 679, 685, 716, 720, 742, 796, 804, 806, 812, 832, 835, 839, 841, 846, 893, 903, 931, 948, 953, 997, 998, 1013, 1014, 1061], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 53, 56, 526, 532, 538, 545, 908, 1004, 1010, 1016, 1023], "select": [1, 29, 52, 53, 54, 67, 68, 69, 70, 100, 101, 102, 103, 104, 106, 110, 112, 117, 124, 134, 170, 174, 184, 187, 196, 202, 208, 221, 226, 229, 257, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 297, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 353, 355, 356, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 373, 375, 377, 381, 383, 384, 385, 387, 388, 390, 391, 393, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 430, 431, 434, 435, 436, 437, 438, 439, 441, 444, 445, 446, 457, 459, 461, 462, 463, 466, 467, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 525, 526, 528, 531, 532, 534, 535, 536, 538, 539, 542, 543, 545, 546, 548, 549, 552, 555, 556, 557, 559, 561, 562, 563, 564, 565, 568, 570, 572, 573, 575, 576, 577, 578, 579, 581, 582, 584, 585, 586, 587, 588, 589, 592, 595, 597, 598, 599, 600, 601, 603, 607, 610, 612, 613, 614, 616, 619, 620, 624, 625, 626, 627, 629, 633, 643, 662, 679, 682, 694, 702, 703, 708, 716, 722, 742, 745, 766, 767, 835, 843, 895, 896, 903, 972, 973, 985, 1001, 1017, 1033, 1061, 1068], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 49, 52, 53, 54, 56, 58, 59, 67, 68, 69, 70, 71, 74, 75, 87, 90, 91, 92, 93, 94, 95, 96, 97, 112, 117, 125, 127, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 174, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 199, 201, 205, 206, 208, 209, 210, 211, 212, 213, 215, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 643, 657, 659, 661, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 773, 774, 776, 778, 779, 781, 782, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 852, 853, 856, 857, 858, 859, 860, 862, 865, 866, 867, 870, 871, 873, 875, 878, 879, 881, 882, 883, 884, 888, 890, 895, 896, 902, 903, 904, 907, 908, 910, 915, 916, 918, 919, 920, 921, 923, 925, 930, 931, 936, 944, 945, 946, 948, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 976, 980, 981, 982, 983, 985, 986, 987, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1061, 1068], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 103, 105, 112, 117, 119, 120, 121, 124, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 264, 265, 266, 267, 271, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 326, 328, 329, 331, 337, 339, 346, 347, 348, 349, 351, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 401, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 442, 443, 458, 459, 460, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 508, 509, 510, 513, 516, 517, 519, 520, 521, 522, 524, 527, 529, 533, 534, 535, 536, 537, 540, 544, 548, 549, 550, 551, 553, 554, 555, 559, 562, 563, 564, 566, 567, 572, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 596, 597, 598, 599, 600, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 643, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 751, 752, 753, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 773, 774, 776, 778, 779, 781, 782, 783, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 805, 806, 809, 810, 812, 813, 815, 817, 818, 819, 821, 823, 824, 825, 827, 831, 833, 835, 836, 837, 839, 841, 842, 843, 845, 846, 850, 852, 853, 856, 857, 858, 859, 860, 862, 865, 866, 867, 870, 871, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 891, 892, 902, 903, 904, 907, 910, 915, 916, 918, 919, 920, 921, 923, 925, 930, 931, 932, 933, 934, 935, 936, 937, 938, 944, 945, 946, 948, 949, 950, 953, 954, 955, 956, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 980, 982, 983, 984, 985, 986, 988, 994, 995, 997, 998, 999, 1000, 1002, 1005, 1007, 1011, 1015, 1018, 1022, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1061, 1068, 1069], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 112, 113, 117, 119, 120, 121, 122, 125, 127, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 574, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 634, 643, 657, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 773, 774, 778, 779, 781, 782, 783, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 856, 857, 858, 859, 860, 862, 865, 866, 867, 870, 871, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 890, 892, 895, 896, 902, 903, 904, 906, 907, 910, 915, 916, 918, 919, 920, 921, 923, 925, 930, 932, 933, 934, 935, 936, 937, 938, 944, 945, 946, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 997, 999, 1000, 1001, 1007, 1013, 1014, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1061, 1068, 1069], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 103, 112, 117, 118, 119, 120, 121, 124, 125, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 279, 281, 282, 283, 284, 285, 286, 287, 288, 294, 296, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 319, 321, 322, 325, 326, 327, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 507, 508, 509, 510, 512, 514, 517, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 619, 623, 624, 625, 626, 627, 629, 632, 633, 634, 643, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 751, 752, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 773, 778, 779, 781, 782, 783, 784, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 803, 805, 807, 808, 811, 813, 818, 819, 825, 827, 828, 829, 834, 835, 836, 837, 840, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 865, 866, 867, 870, 871, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 892, 902, 903, 904, 907, 908, 910, 915, 916, 918, 919, 920, 921, 923, 925, 927, 930, 931, 932, 933, 934, 935, 936, 937, 938, 944, 945, 946, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 980, 982, 984, 985, 986, 987, 988, 990, 992, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1061, 1068, 1069], "column_0": [1, 134, 224, 257], "register_dataframe_namespac": [1, 69, 70, 71], "split": [1, 31, 68, 172, 257, 535, 536, 1013, 1014], "splitfram": [1, 68], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 53, 68, 69, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 112, 123, 125, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 596, 597, 598, 599, 600, 601, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 619, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 643, 676, 677, 703, 716, 717, 726, 729, 738, 742, 745, 766, 767, 778, 835, 895, 896, 903, 1001, 1008, 1013, 1014, 1039, 1061, 1069], "_df": [1, 68], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 52, 56, 67, 68, 70, 73, 90, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 123, 124, 125, 127, 138, 141, 144, 145, 146, 150, 156, 158, 159, 164, 171, 183, 186, 196, 197, 198, 201, 209, 215, 216, 224, 225, 226, 227, 233, 237, 238, 257, 265, 287, 313, 368, 374, 383, 441, 452, 453, 468, 474, 480, 481, 485, 486, 487, 488, 489, 490, 492, 493, 494, 508, 509, 520, 534, 548, 549, 554, 558, 577, 581, 582, 593, 596, 604, 606, 608, 624, 626, 627, 632, 643, 662, 666, 668, 675, 676, 701, 709, 715, 716, 720, 722, 724, 725, 742, 745, 767, 783, 796, 850, 855, 860, 863, 867, 868, 878, 948, 954, 958, 959, 960, 961, 962, 963, 965, 966, 967, 970, 998, 1012, 1033, 1041, 1044, 1061, 1069], "with_row_count": [1, 257, 443, 486, 487, 489, 492, 493, 494, 643, 742, 973, 1061], "name": [1, 16, 20, 22, 28, 29, 31, 33, 53, 54, 55, 56, 57, 68, 69, 70, 71, 74, 79, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 121, 122, 123, 125, 126, 127, 128, 134, 135, 138, 141, 142, 143, 146, 151, 152, 155, 157, 158, 170, 171, 173, 174, 180, 181, 186, 188, 192, 196, 197, 198, 200, 201, 202, 209, 215, 217, 219, 222, 223, 224, 225, 226, 227, 228, 233, 234, 235, 236, 237, 257, 266, 271, 289, 291, 292, 293, 313, 366, 386, 398, 434, 442, 451, 453, 468, 472, 474, 509, 520, 521, 548, 549, 551, 568, 569, 570, 571, 573, 575, 576, 577, 580, 581, 582, 583, 584, 586, 589, 590, 592, 597, 603, 604, 610, 611, 614, 615, 618, 620, 621, 622, 623, 626, 627, 628, 629, 631, 634, 643, 657, 662, 664, 665, 668, 675, 681, 682, 690, 691, 698, 700, 701, 702, 703, 709, 714, 715, 716, 717, 720, 721, 723, 724, 742, 745, 748, 784, 796, 925, 948, 953, 997, 998, 999, 1007, 1026, 1028, 1038, 1039, 1043, 1061, 1068, 1069], "n": [1, 12, 15, 23, 28, 34, 38, 40, 54, 55, 68, 69, 70, 71, 99, 101, 102, 112, 134, 136, 147, 159, 162, 171, 172, 176, 197, 198, 199, 210, 212, 213, 216, 218, 230, 242, 251, 257, 294, 312, 315, 320, 321, 328, 353, 358, 369, 382, 403, 411, 416, 424, 432, 434, 469, 470, 480, 492, 494, 496, 506, 511, 529, 532, 535, 536, 538, 541, 553, 555, 559, 560, 565, 567, 584, 592, 593, 594, 601, 603, 617, 620, 621, 622, 625, 629, 633, 635, 643, 659, 661, 676, 678, 685, 710, 712, 713, 718, 729, 738, 742, 745, 751, 773, 784, 795, 798, 804, 805, 812, 841, 846, 856, 857, 866, 893, 902, 907, 915, 923, 925, 944, 965, 967, 969, 984, 988, 1007, 1013, 1014, 1019, 1032, 1034, 1040, 1045, 1050, 1061, 1068, 1069], "filter": [1, 68, 104, 112, 113, 117, 143, 167, 168, 169, 239, 257, 517, 537, 566, 599, 634, 643, 665, 669, 679, 726, 742, 745, 972, 1061], "col": [1, 12, 28, 31, 67, 68, 69, 70, 94, 96, 112, 123, 125, 134, 150, 158, 159, 160, 168, 170, 175, 184, 187, 196, 201, 209, 226, 227, 233, 237, 257, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 384, 385, 386, 387, 389, 390, 392, 393, 394, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 457, 458, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 578, 580, 582, 583, 587, 588, 589, 595, 598, 599, 600, 601, 602, 607, 610, 614, 618, 619, 627, 634, 643, 660, 672, 675, 676, 677, 679, 684, 694, 701, 709, 716, 720, 722, 724, 742, 745, 766, 767, 778, 832, 835, 895, 896, 903, 954, 972, 973, 1001, 1017, 1061, 1069], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 48, 49, 52, 57, 67, 68, 69, 71, 74, 91, 101, 102, 103, 105, 106, 110, 112, 114, 115, 116, 117, 119, 122, 123, 124, 125, 127, 133, 134, 136, 137, 139, 140, 141, 144, 148, 149, 153, 154, 156, 157, 158, 159, 161, 165, 170, 171, 172, 173, 175, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 194, 197, 198, 199, 200, 201, 206, 208, 209, 210, 211, 217, 218, 219, 220, 221, 224, 227, 229, 230, 233, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 263, 265, 266, 268, 273, 274, 275, 276, 277, 278, 281, 282, 283, 295, 296, 299, 300, 302, 303, 304, 305, 307, 312, 313, 314, 317, 318, 329, 333, 334, 336, 337, 343, 349, 350, 355, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 375, 376, 379, 380, 381, 385, 388, 391, 392, 394, 395, 396, 398, 399, 401, 406, 407, 410, 412, 415, 421, 434, 436, 437, 438, 440, 441, 443, 444, 445, 446, 457, 458, 460, 462, 463, 464, 465, 466, 467, 469, 470, 471, 474, 475, 476, 477, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 503, 504, 505, 506, 510, 511, 519, 520, 547, 550, 552, 556, 557, 558, 560, 565, 566, 568, 574, 575, 576, 577, 578, 579, 580, 582, 584, 586, 587, 592, 594, 596, 599, 605, 606, 612, 613, 617, 618, 619, 620, 624, 630, 631, 632, 633, 634, 635, 643, 659, 660, 664, 666, 670, 671, 674, 675, 676, 681, 684, 689, 693, 695, 696, 697, 700, 701, 706, 707, 709, 710, 718, 720, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 745, 751, 753, 754, 755, 756, 757, 758, 759, 761, 763, 774, 779, 781, 782, 784, 789, 790, 795, 796, 797, 799, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 830, 831, 837, 838, 843, 849, 851, 852, 853, 858, 862, 865, 867, 875, 877, 879, 881, 882, 883, 884, 890, 891, 903, 906, 925, 930, 933, 934, 944, 948, 949, 950, 957, 958, 960, 961, 963, 964, 965, 967, 968, 969, 981, 982, 983, 987, 988, 990, 997, 998, 1001, 1019, 1025, 1035, 1036, 1038, 1043, 1044, 1048, 1050, 1051, 1061, 1069], "drop": [1, 93, 134, 142, 143, 225, 233, 257, 315, 317, 318, 411, 474, 643, 665, 715, 720, 742, 798, 800, 801, 902, 948, 1061], "aaa": [1, 31, 257, 513, 548, 549, 991], "bbb": [1, 31, 257, 548, 549, 745], "ccc": [1, 31, 257, 548, 549], "ddd": [1, 31, 257, 548, 549], "eee": [1, 31, 257, 745], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 30, 31, 33, 38, 58, 67, 68, 74, 77, 79, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 125, 134, 135, 139, 141, 142, 143, 144, 146, 151, 152, 155, 157, 158, 159, 160, 164, 165, 170, 171, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 209, 210, 211, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 257, 266, 267, 269, 271, 281, 313, 321, 323, 324, 325, 329, 331, 332, 333, 335, 337, 339, 342, 345, 346, 349, 351, 352, 354, 356, 357, 359, 366, 368, 372, 374, 386, 398, 408, 413, 430, 433, 434, 443, 449, 451, 453, 468, 472, 474, 478, 480, 481, 486, 487, 488, 489, 490, 492, 493, 494, 501, 508, 509, 518, 535, 536, 539, 540, 541, 542, 544, 551, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 643, 657, 664, 665, 666, 668, 675, 676, 677, 681, 682, 686, 687, 688, 689, 690, 692, 693, 694, 696, 698, 700, 701, 702, 703, 704, 709, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 742, 745, 749, 750, 777, 779, 796, 807, 808, 809, 813, 815, 816, 820, 822, 825, 827, 830, 833, 834, 837, 839, 840, 842, 844, 845, 847, 855, 899, 904, 921, 924, 948, 954, 978, 996, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1030, 1038, 1039, 1061, 1069], "txt": [1, 12, 112], "utf8": [1, 10, 18, 30, 58, 75, 93, 97, 101, 102, 112, 122, 124, 127, 144, 145, 146, 153, 200, 219, 257, 291, 351, 354, 417, 443, 512, 516, 518, 519, 520, 521, 523, 524, 533, 534, 535, 536, 539, 540, 541, 542, 544, 581, 583, 643, 666, 668, 700, 742, 745, 839, 842, 889, 908, 990, 994, 996, 997, 998, 999, 1001, 1002, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1061], "register_lazyframe_namespac": [1, 68, 69, 71], "dtypeoper": [1, 70], "ldf": [1, 70, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737], "_ldf": [1, 70], "upcast_integer_typ": [1, 70], "with_column": [1, 12, 70, 160, 187, 227, 234, 257, 264, 266, 271, 282, 291, 296, 298, 301, 302, 303, 308, 311, 313, 315, 319, 325, 327, 345, 347, 351, 354, 357, 361, 362, 370, 371, 376, 379, 380, 381, 385, 386, 389, 392, 394, 395, 396, 398, 401, 412, 424, 425, 426, 427, 440, 442, 443, 458, 460, 464, 465, 468, 469, 470, 471, 472, 474, 477, 484, 486, 487, 488, 489, 490, 492, 493, 494, 513, 517, 520, 521, 524, 527, 529, 530, 533, 535, 536, 537, 547, 550, 551, 558, 560, 567, 569, 571, 572, 580, 583, 590, 593, 596, 606, 609, 611, 615, 624, 628, 632, 634, 643, 677, 694, 721, 742, 745, 778, 796, 835, 903, 948, 1061], "tp": [1, 70], "cast": [1, 30, 69, 70, 75, 90, 120, 121, 153, 159, 160, 187, 220, 233, 257, 270, 298, 310, 311, 320, 351, 354, 443, 467, 470, 479, 522, 523, 547, 552, 558, 583, 624, 643, 676, 677, 694, 720, 742, 745, 778, 780, 793, 794, 804, 839, 842, 952, 1000, 1001, 1031, 1039, 1044, 1061], "int64": [1, 2, 30, 31, 33, 69, 70, 97, 101, 144, 153, 159, 160, 175, 187, 200, 214, 220, 257, 284, 285, 286, 287, 310, 311, 326, 330, 334, 336, 338, 343, 350, 366, 470, 479, 522, 552, 558, 574, 581, 597, 605, 606, 608, 620, 626, 643, 660, 666, 676, 677, 679, 684, 694, 700, 703, 742, 764, 765, 766, 767, 793, 794, 810, 814, 821, 823, 826, 831, 838, 952, 971, 1031, 1042, 1043, 1044, 1061], "int8": [1, 70, 153, 257, 310, 311, 552, 617, 620, 635, 643, 793, 794, 798, 931, 955, 1031, 1048, 1061], "int16": [1, 70, 310, 311, 552, 643, 745, 793, 794, 931, 1031, 1040, 1061], "int32": [1, 70, 90, 93, 97, 124, 125, 159, 160, 172, 257, 296, 332, 359, 528, 558, 620, 643, 676, 677, 742, 745, 816, 847, 930, 1006, 1044, 1061], "b": [1, 27, 28, 30, 32, 35, 54, 55, 57, 58, 59, 70, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 105, 119, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 264, 266, 270, 271, 283, 288, 289, 291, 292, 293, 296, 298, 306, 313, 316, 317, 318, 366, 368, 370, 371, 372, 374, 377, 381, 383, 385, 386, 388, 391, 392, 393, 394, 395, 396, 398, 402, 408, 412, 417, 419, 424, 425, 426, 427, 442, 459, 466, 468, 470, 472, 474, 477, 482, 484, 501, 507, 509, 518, 522, 529, 551, 562, 564, 566, 568, 569, 570, 571, 572, 573, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 598, 599, 600, 603, 607, 609, 610, 611, 612, 613, 614, 615, 616, 619, 621, 622, 625, 626, 627, 628, 629, 633, 643, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 748, 751, 777, 778, 779, 780, 796, 797, 799, 849, 850, 856, 859, 871, 878, 889, 903, 915, 916, 918, 948, 953, 971, 996, 1000, 1007, 1030, 1043, 1047, 1061, 1068], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 112, 119, 120, 121, 127, 133, 134, 135, 136, 137, 140, 143, 146, 147, 148, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 181, 183, 184, 186, 187, 188, 189, 193, 197, 198, 204, 209, 212, 213, 214, 215, 216, 217, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 268, 270, 271, 283, 284, 285, 286, 288, 294, 296, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 321, 325, 330, 337, 338, 339, 345, 346, 348, 349, 350, 351, 354, 355, 356, 357, 359, 361, 362, 367, 368, 370, 371, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 395, 396, 398, 401, 402, 403, 410, 411, 412, 413, 416, 424, 425, 426, 427, 428, 429, 432, 437, 440, 442, 443, 458, 460, 464, 465, 467, 468, 470, 471, 472, 475, 477, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 503, 507, 508, 509, 510, 513, 524, 525, 527, 528, 529, 531, 533, 535, 536, 539, 548, 549, 550, 551, 553, 554, 555, 558, 559, 560, 567, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 596, 598, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 624, 625, 626, 627, 628, 629, 631, 633, 634, 643, 657, 659, 660, 661, 665, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 751, 754, 761, 764, 765, 766, 773, 782, 783, 785, 795, 797, 799, 813, 814, 820, 822, 825, 826, 827, 828, 829, 830, 834, 836, 837, 838, 839, 842, 843, 844, 845, 856, 858, 859, 866, 867, 870, 871, 873, 878, 881, 882, 883, 884, 888, 902, 903, 904, 907, 915, 916, 918, 919, 920, 923, 931, 937, 944, 945, 946, 950, 954, 957, 961, 963, 964, 965, 966, 967, 969, 971, 981, 985, 986, 991, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1017, 1030, 1032, 1033, 1034, 1040, 1043, 1044, 1045, 1052, 1061, 1069], "c": [1, 27, 28, 30, 32, 35, 54, 55, 57, 58, 59, 68, 70, 74, 75, 91, 93, 95, 97, 105, 112, 123, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 150, 151, 153, 154, 156, 157, 158, 159, 162, 164, 165, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 214, 217, 218, 219, 220, 221, 223, 224, 227, 228, 230, 231, 233, 237, 240, 241, 242, 243, 244, 245, 247, 250, 251, 257, 264, 266, 271, 288, 313, 386, 398, 408, 417, 419, 442, 468, 470, 474, 501, 535, 539, 562, 564, 569, 571, 573, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 598, 599, 600, 603, 607, 609, 610, 611, 612, 613, 614, 615, 616, 625, 627, 628, 629, 633, 643, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 672, 675, 676, 681, 684, 690, 693, 695, 698, 699, 700, 701, 707, 708, 709, 714, 717, 720, 722, 724, 727, 728, 729, 730, 731, 732, 734, 737, 738, 742, 745, 779, 796, 797, 871, 889, 948, 1013, 1017, 1047, 1061], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 55, 57, 59, 67, 68, 70, 71, 74, 90, 93, 94, 95, 96, 97, 99, 102, 119, 125, 134, 136, 137, 140, 146, 147, 148, 149, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 174, 175, 176, 178, 180, 183, 184, 186, 188, 189, 190, 193, 198, 204, 209, 212, 213, 214, 215, 216, 217, 219, 222, 227, 229, 232, 233, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 264, 265, 268, 289, 292, 293, 294, 296, 298, 300, 301, 302, 303, 312, 313, 314, 315, 316, 321, 322, 326, 347, 349, 350, 351, 354, 356, 362, 365, 366, 369, 371, 375, 376, 379, 380, 382, 383, 386, 389, 392, 394, 395, 396, 398, 401, 403, 410, 412, 413, 416, 421, 424, 425, 426, 427, 431, 432, 458, 460, 465, 467, 468, 469, 470, 474, 475, 477, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 503, 509, 514, 523, 524, 527, 528, 547, 550, 553, 555, 559, 560, 572, 573, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 592, 595, 596, 597, 598, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 625, 627, 628, 629, 633, 643, 659, 660, 661, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 680, 682, 683, 684, 685, 688, 689, 690, 695, 705, 706, 707, 708, 709, 710, 711, 712, 713, 719, 720, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 751, 754, 758, 761, 773, 778, 783, 785, 791, 795, 796, 797, 798, 799, 805, 806, 807, 808, 809, 810, 835, 837, 838, 839, 840, 842, 844, 845, 853, 856, 857, 866, 867, 870, 871, 903, 904, 907, 910, 915, 916, 918, 923, 930, 931, 937, 944, 945, 946, 948, 949, 950, 954, 957, 958, 959, 960, 962, 963, 966, 969, 971, 981, 987, 992, 1001, 1002, 1006, 1032, 1045, 1048, 1052, 1061, 1069], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 57, 59, 68, 70, 74, 90, 93, 94, 95, 96, 134, 138, 141, 142, 143, 144, 146, 147, 150, 151, 154, 155, 156, 157, 159, 160, 162, 164, 165, 166, 168, 170, 171, 173, 177, 178, 179, 180, 182, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 233, 235, 242, 250, 251, 257, 264, 268, 271, 288, 296, 310, 311, 316, 321, 325, 344, 345, 346, 349, 357, 360, 362, 370, 371, 377, 382, 383, 385, 403, 404, 405, 413, 424, 425, 426, 427, 465, 467, 473, 476, 477, 478, 481, 483, 486, 487, 488, 489, 490, 492, 493, 494, 497, 509, 514, 518, 524, 527, 528, 550, 553, 555, 567, 572, 587, 588, 589, 596, 599, 609, 627, 643, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 676, 677, 678, 680, 681, 683, 685, 686, 690, 693, 695, 698, 700, 701, 703, 705, 706, 707, 708, 709, 712, 713, 716, 717, 719, 720, 723, 729, 737, 738, 742, 745, 783, 789, 793, 794, 799, 832, 845, 867, 895, 896, 904, 915, 916, 918, 937, 950, 954, 956, 961, 963, 965, 967, 971, 992, 996, 1002, 1006, 1031, 1061, 1068, 1069], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 57, 68, 70, 74, 119, 138, 139, 140, 141, 142, 144, 146, 150, 151, 154, 159, 160, 162, 164, 166, 173, 177, 178, 179, 181, 182, 185, 188, 190, 192, 194, 196, 198, 199, 200, 201, 205, 206, 208, 210, 211, 212, 213, 218, 219, 220, 221, 227, 228, 229, 230, 231, 257, 264, 268, 286, 311, 321, 325, 345, 347, 348, 355, 357, 359, 367, 382, 385, 403, 424, 425, 426, 427, 443, 467, 477, 481, 493, 509, 542, 553, 555, 572, 587, 588, 592, 599, 609, 627, 643, 662, 664, 666, 668, 672, 676, 677, 678, 680, 681, 685, 691, 693, 696, 698, 700, 701, 712, 713, 717, 742, 745, 758, 766, 805, 809, 816, 835, 836, 843, 845, 890, 915, 916, 918, 931, 954, 966, 1020, 1061, 1069], "float32": [1, 28, 70, 153, 218, 219, 257, 608, 742, 745, 874, 930, 1061], "lazi": [1, 52, 53, 54, 55, 57, 70, 74, 112, 125, 174, 187, 257, 271, 601, 617, 620, 635, 643, 681, 682, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 745, 1068, 1069], "i16": [1, 70, 501, 643, 745, 931, 1040, 1061, 1069], "i32": [1, 70, 90, 93, 97, 124, 125, 201, 257, 296, 332, 359, 483, 501, 528, 634, 643, 701, 742, 816, 847, 930, 956, 1006, 1061, 1069], "f32": [1, 70, 143, 218, 257, 412, 477, 501, 584, 596, 643, 665, 742, 745, 903, 930, 950, 1061], "i64": [1, 2, 15, 19, 49, 52, 54, 68, 69, 70, 71, 74, 90, 91, 92, 93, 94, 95, 96, 97, 112, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 149, 150, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 169, 173, 174, 177, 180, 181, 182, 186, 187, 188, 189, 192, 193, 194, 195, 199, 201, 205, 206, 208, 209, 211, 212, 213, 215, 221, 223, 224, 225, 226, 227, 228, 229, 231, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 247, 250, 251, 257, 264, 266, 270, 271, 284, 285, 286, 287, 288, 294, 298, 301, 302, 303, 308, 309, 310, 311, 313, 315, 316, 326, 328, 330, 334, 336, 338, 343, 350, 353, 366, 368, 369, 371, 372, 373, 374, 376, 377, 382, 383, 384, 385, 386, 389, 392, 394, 395, 396, 398, 400, 403, 411, 412, 413, 414, 415, 416, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 439, 441, 442, 458, 459, 460, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 484, 496, 498, 499, 501, 502, 503, 507, 508, 509, 529, 530, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 563, 566, 572, 574, 580, 581, 583, 587, 588, 589, 590, 595, 596, 597, 598, 599, 603, 605, 606, 607, 608, 609, 610, 611, 614, 615, 619, 623, 624, 627, 628, 629, 634, 643, 657, 659, 661, 663, 664, 665, 668, 669, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 694, 695, 698, 699, 701, 703, 705, 706, 708, 709, 711, 712, 713, 714, 715, 716, 717, 720, 723, 724, 725, 726, 728, 729, 730, 731, 734, 737, 738, 742, 745, 748, 751, 752, 764, 765, 766, 767, 773, 778, 785, 788, 791, 792, 793, 794, 796, 797, 810, 812, 814, 821, 823, 826, 831, 838, 841, 856, 857, 859, 860, 866, 870, 878, 902, 903, 904, 907, 915, 916, 918, 919, 920, 921, 923, 925, 936, 948, 953, 954, 956, 959, 962, 966, 969, 972, 973, 976, 980, 981, 985, 986, 1030, 1032, 1033, 1034, 1039, 1045, 1046, 1049, 1052, 1061, 1068, 1069], "register_series_namespac": [1, 68, 69, 70], "math": [1, 71, 314, 575, 576, 643, 789, 982, 1035, 1061], "mathshortcut": [1, 71], "": [1, 2, 28, 31, 35, 52, 55, 59, 71, 90, 91, 97, 101, 102, 103, 113, 117, 127, 135, 143, 145, 158, 159, 165, 173, 174, 186, 188, 193, 194, 198, 201, 202, 209, 213, 217, 223, 225, 226, 227, 233, 234, 257, 271, 328, 351, 354, 366, 399, 416, 417, 428, 429, 432, 441, 452, 459, 462, 463, 468, 469, 479, 483, 485, 509, 513, 519, 520, 521, 524, 525, 527, 529, 531, 533, 534, 536, 539, 540, 541, 544, 545, 547, 548, 549, 568, 569, 570, 571, 577, 581, 584, 589, 590, 597, 600, 601, 610, 611, 614, 615, 623, 624, 626, 627, 628, 643, 657, 664, 665, 675, 676, 682, 690, 701, 702, 709, 714, 715, 716, 720, 721, 726, 742, 745, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 773, 774, 776, 777, 779, 780, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 805, 812, 828, 829, 836, 839, 842, 843, 850, 852, 853, 857, 858, 859, 860, 862, 865, 866, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 902, 904, 907, 908, 910, 919, 920, 921, 923, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 944, 945, 946, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 980, 981, 982, 983, 985, 986, 988, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1061], "_": [1, 67, 71, 188, 217, 257, 520, 535, 779, 998, 1013, 1038, 1061], "squar": [1, 71, 239, 399, 510, 643, 726, 891, 987, 1061], "cube": [1, 71, 299, 471, 643, 781, 1061], "s2": [1, 121, 153, 257, 783, 799, 878, 890, 925, 937, 971, 1043, 1052, 1061], "renam": [1, 93, 101, 102, 201, 202, 233, 234, 237, 257, 266, 442, 455, 472, 549, 551, 623, 626, 643, 697, 701, 702, 720, 721, 724, 742, 748, 796, 803, 811, 948, 1028, 1039, 1061], "n2": [1, 434], "in_plac": [1, 164, 207, 231, 257, 951, 979, 986, 1061], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 47, 48, 52, 54, 56, 73, 74, 75, 90, 91, 95, 97, 99, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 126, 127, 131, 133, 135, 136, 137, 140, 149, 153, 154, 156, 157, 158, 159, 160, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 199, 201, 209, 215, 217, 219, 220, 223, 224, 225, 226, 227, 229, 233, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 265, 266, 267, 268, 269, 270, 271, 282, 289, 290, 292, 293, 296, 307, 308, 309, 310, 311, 313, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 379, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 404, 405, 409, 430, 433, 434, 440, 454, 464, 465, 467, 474, 479, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 501, 506, 508, 509, 513, 515, 517, 522, 523, 528, 534, 535, 537, 539, 540, 541, 544, 548, 549, 554, 561, 564, 567, 568, 569, 570, 571, 572, 574, 577, 578, 584, 585, 592, 593, 594, 599, 605, 606, 617, 620, 626, 631, 632, 634, 635, 643, 657, 659, 660, 661, 667, 669, 671, 675, 676, 677, 681, 682, 684, 686, 690, 695, 701, 707, 709, 714, 715, 716, 720, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 745, 749, 750, 751, 752, 762, 769, 774, 777, 780, 783, 784, 796, 803, 804, 806, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 843, 844, 845, 846, 847, 849, 851, 852, 853, 860, 864, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 891, 895, 896, 921, 924, 937, 945, 946, 948, 952, 964, 971, 984, 986, 991, 993, 995, 1000, 1001, 1006, 1012, 1013, 1015, 1017, 1018, 1019, 1022, 1042, 1043, 1051, 1052, 1061, 1068, 1069], "s3": [1, 30, 104, 113, 117, 257, 925, 1061], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 52, 57, 64, 66, 67, 68, 70, 71, 74, 119, 123, 134, 138, 139, 140, 141, 142, 143, 144, 146, 150, 151, 154, 157, 162, 164, 173, 177, 178, 179, 182, 190, 192, 194, 196, 198, 199, 200, 201, 205, 206, 208, 210, 211, 212, 213, 218, 219, 220, 221, 227, 228, 230, 231, 233, 257, 268, 270, 283, 306, 308, 311, 312, 317, 318, 321, 385, 402, 411, 412, 424, 425, 426, 427, 460, 467, 471, 481, 482, 501, 507, 509, 525, 531, 539, 555, 567, 573, 579, 584, 585, 586, 588, 590, 596, 598, 603, 607, 609, 610, 611, 612, 613, 614, 615, 616, 625, 628, 629, 633, 643, 662, 664, 665, 666, 668, 672, 678, 681, 685, 686, 695, 698, 700, 701, 712, 713, 717, 720, 742, 745, 751, 795, 816, 867, 890, 902, 903, 915, 916, 918, 944, 954, 957, 958, 961, 963, 965, 967, 1003, 1009, 1017, 1061, 1069], "9": [1, 27, 28, 30, 31, 32, 35, 52, 57, 67, 74, 134, 139, 140, 153, 160, 162, 166, 197, 198, 201, 212, 227, 228, 231, 233, 250, 257, 264, 268, 270, 283, 295, 306, 308, 311, 314, 317, 318, 321, 356, 385, 390, 398, 402, 411, 423, 430, 467, 476, 481, 485, 491, 493, 503, 507, 520, 542, 555, 572, 582, 587, 588, 632, 643, 677, 678, 680, 685, 701, 712, 717, 720, 737, 742, 797, 809, 820, 822, 830, 836, 837, 843, 844, 878, 890, 902, 921, 954, 958, 964, 966, 968, 981, 998, 1020, 1061], "27": [1, 71, 250, 311, 332, 346, 359, 643, 737, 1061, 1069], "16": [1, 31, 43, 61, 69, 159, 160, 233, 257, 308, 311, 385, 460, 471, 528, 572, 587, 595, 596, 599, 643, 676, 677, 707, 720, 742, 745, 836, 843, 944, 982, 1006, 1035, 1061], "64": [1, 42, 45, 48, 63, 69, 71, 118, 133, 460, 471, 643, 742, 944, 1061], "25": [1, 31, 71, 97, 125, 140, 159, 160, 174, 229, 233, 257, 315, 325, 327, 332, 345, 348, 355, 357, 359, 474, 486, 487, 488, 489, 490, 492, 493, 494, 560, 601, 643, 676, 677, 682, 688, 718, 720, 742, 745, 797, 798, 811, 836, 843, 849, 867, 944, 948, 1061], "125": [1, 31, 71, 257, 264, 643, 944, 1061], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 187, 220, 257, 470, 577, 600, 643, 694, 742, 752, 1042, 1043, 1061], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 72, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 122, 124, 125, 127, 131, 134, 139, 143, 147, 149, 150, 153, 170, 171, 172, 186, 187, 196, 197, 198, 215, 216, 219, 220, 225, 227, 257, 264, 267, 268, 271, 296, 349, 361, 362, 371, 376, 379, 380, 390, 401, 408, 412, 440, 441, 443, 455, 458, 460, 464, 465, 467, 468, 470, 472, 481, 485, 497, 528, 539, 540, 541, 544, 550, 551, 554, 560, 567, 568, 571, 572, 584, 598, 607, 608, 634, 643, 665, 671, 694, 715, 742, 745, 751, 752, 799, 837, 856, 859, 878, 890, 899, 903, 931, 954, 958, 970, 973, 1006, 1017, 1018, 1019, 1022, 1033, 1041, 1042, 1043, 1061, 1068, 1069], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 139, 187, 220, 257, 470, 643, 694, 742, 1043, 1061, 1068], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 643, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1061, 1068], "nest": [2, 49, 58, 97, 110, 116, 145, 257, 654, 850, 1061, 1068, 1069], "fix": [2, 105, 123, 125, 358, 486, 487, 488, 489, 490, 492, 493, 494, 643, 846], "length": [2, 12, 49, 74, 112, 123, 159, 160, 208, 257, 312, 348, 355, 429, 434, 452, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 507, 525, 527, 531, 533, 547, 617, 620, 621, 622, 635, 643, 676, 677, 695, 708, 742, 783, 795, 805, 836, 843, 892, 920, 925, 942, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 985, 1003, 1005, 1009, 1011, 1025, 1061], "inner": [2, 49, 58, 75, 124, 173, 228, 257, 284, 285, 286, 287, 316, 417, 480, 558, 643, 681, 703, 717, 742, 764, 765, 766, 767, 799, 908, 1044, 1061], "width": [2, 24, 31, 101, 102, 257, 284, 285, 286, 287, 525, 531, 547, 742, 764, 765, 766, 767, 1003, 1009, 1025], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 48, 54, 57, 69, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 145, 148, 149, 151, 161, 162, 163, 165, 170, 171, 172, 174, 176, 177, 178, 182, 183, 184, 194, 196, 199, 204, 205, 206, 208, 210, 211, 212, 213, 218, 221, 223, 227, 230, 232, 235, 242, 251, 257, 264, 288, 294, 301, 302, 303, 312, 315, 363, 364, 365, 369, 370, 371, 377, 381, 382, 403, 409, 411, 415, 416, 428, 429, 432, 433, 434, 467, 469, 470, 471, 474, 477, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 507, 511, 519, 522, 525, 528, 529, 531, 533, 535, 536, 542, 547, 553, 554, 555, 559, 565, 567, 574, 584, 585, 591, 594, 595, 601, 603, 605, 606, 613, 616, 617, 620, 621, 622, 625, 626, 627, 629, 630, 633, 635, 643, 657, 659, 669, 670, 671, 678, 682, 685, 695, 705, 706, 708, 710, 712, 713, 714, 718, 719, 723, 729, 738, 742, 759, 760, 773, 774, 783, 784, 785, 786, 787, 795, 798, 850, 851, 852, 853, 857, 858, 859, 865, 866, 867, 890, 892, 893, 900, 901, 902, 906, 907, 919, 920, 923, 924, 925, 933, 937, 938, 940, 941, 942, 943, 944, 947, 948, 950, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 980, 985, 988, 997, 1000, 1003, 1006, 1007, 1009, 1011, 1013, 1014, 1020, 1025, 1031, 1032, 1033, 1034, 1040, 1045, 1050, 1061, 1068, 1069], "polarsdatatyp": [2, 49, 101, 102, 107, 111, 112, 122, 123, 124, 125, 127, 134, 144, 257, 271, 296, 366, 441, 443, 522, 572, 581, 597, 608, 609, 617, 620, 635, 643, 666, 742, 745, 752, 774, 931, 1000, 1061], "pythondatatyp": [2, 49], "null": [2, 28, 30, 54, 67, 74, 93, 101, 102, 109, 112, 117, 133, 135, 136, 140, 143, 149, 153, 154, 166, 173, 178, 179, 185, 188, 190, 205, 206, 209, 210, 211, 215, 220, 223, 226, 228, 230, 233, 240, 257, 267, 269, 270, 271, 281, 288, 290, 301, 302, 303, 306, 308, 311, 315, 317, 318, 326, 330, 334, 336, 338, 343, 350, 362, 363, 364, 365, 366, 369, 370, 371, 377, 385, 392, 393, 394, 395, 396, 402, 404, 405, 411, 414, 415, 418, 424, 425, 426, 427, 428, 433, 434, 443, 465, 466, 469, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 499, 500, 501, 503, 508, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 531, 533, 535, 536, 537, 547, 548, 549, 558, 569, 571, 580, 582, 583, 585, 590, 597, 608, 611, 615, 621, 622, 626, 628, 634, 643, 657, 659, 665, 671, 680, 681, 693, 703, 705, 706, 709, 714, 716, 717, 720, 722, 727, 742, 752, 761, 769, 784, 785, 798, 801, 810, 814, 821, 823, 826, 831, 838, 851, 852, 853, 857, 859, 864, 870, 883, 884, 895, 896, 902, 916, 918, 919, 924, 925, 943, 944, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 971, 976, 977, 981, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1015, 1040, 1042, 1043, 1044, 1051, 1061, 1068, 1069], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 48, 49, 52, 53, 54, 55, 57, 59, 67, 68, 69, 70, 71, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 170, 171, 172, 173, 174, 176, 178, 180, 181, 183, 184, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 239, 242, 249, 251, 257, 264, 266, 267, 268, 269, 270, 271, 281, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 315, 316, 320, 321, 322, 328, 344, 347, 348, 349, 351, 353, 354, 355, 358, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 376, 377, 378, 379, 380, 381, 382, 385, 386, 390, 399, 401, 403, 408, 409, 410, 411, 412, 415, 416, 417, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 440, 441, 442, 443, 454, 458, 460, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 553, 554, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 643, 657, 659, 661, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 681, 682, 685, 686, 690, 691, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 729, 736, 738, 742, 745, 748, 751, 752, 761, 767, 768, 769, 770, 771, 772, 773, 774, 778, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 805, 806, 812, 832, 835, 836, 837, 839, 841, 842, 843, 846, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 865, 866, 867, 870, 871, 880, 886, 887, 891, 893, 899, 900, 901, 902, 903, 906, 907, 908, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 931, 944, 948, 949, 950, 951, 952, 953, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 980, 984, 985, 986, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1025, 1026, 1028, 1032, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1052, 1061, 1068], "The": [2, 18, 29, 30, 31, 35, 48, 49, 52, 56, 59, 67, 72, 73, 90, 92, 93, 94, 96, 99, 101, 103, 108, 109, 110, 112, 117, 129, 134, 142, 143, 144, 146, 147, 157, 158, 159, 160, 161, 166, 171, 174, 181, 186, 196, 197, 198, 201, 202, 219, 226, 229, 233, 234, 237, 239, 257, 266, 288, 289, 290, 291, 313, 325, 339, 344, 345, 348, 351, 355, 356, 366, 369, 377, 381, 433, 441, 468, 474, 477, 480, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 503, 506, 512, 515, 516, 522, 524, 525, 526, 531, 532, 538, 539, 547, 581, 597, 601, 621, 622, 623, 626, 634, 636, 637, 639, 643, 644, 645, 649, 650, 651, 665, 668, 676, 677, 678, 680, 682, 685, 686, 691, 695, 701, 702, 703, 716, 720, 721, 724, 726, 742, 748, 751, 752, 768, 769, 770, 784, 796, 809, 827, 832, 833, 836, 839, 843, 844, 856, 857, 865, 924, 948, 950, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 973, 981, 984, 990, 993, 994, 1000, 1002, 1003, 1004, 1009, 1010, 1016, 1017, 1025, 1053, 1055, 1057, 1061, 1062, 1065, 1066, 1067, 1069], "size": [2, 13, 35, 48, 101, 102, 123, 124, 125, 127, 129, 145, 159, 227, 257, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 574, 605, 606, 621, 622, 643, 676, 742, 850, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1061, 1069], "datatyp": [2, 28, 33, 49, 65, 90, 92, 93, 94, 96, 98, 105, 107, 108, 109, 111, 127, 144, 146, 153, 200, 257, 296, 366, 501, 558, 581, 597, 608, 643, 654, 668, 700, 703, 742, 752, 774, 797, 880, 885, 887, 889, 978, 1044, 1061], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 49, 50, 52, 56, 58, 65, 67, 74, 75, 93, 95, 101, 102, 103, 112, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 140, 143, 147, 148, 149, 154, 157, 159, 160, 161, 162, 166, 170, 171, 174, 176, 177, 178, 179, 180, 182, 184, 186, 188, 189, 190, 192, 196, 197, 198, 199, 205, 206, 209, 210, 211, 212, 215, 216, 220, 223, 224, 227, 228, 229, 230, 240, 241, 243, 244, 245, 247, 248, 257, 263, 264, 265, 267, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 315, 317, 318, 321, 325, 339, 345, 356, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 392, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 410, 411, 414, 415, 416, 418, 420, 421, 422, 428, 431, 432, 435, 437, 439, 440, 441, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 477, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 529, 530, 533, 535, 536, 537, 547, 550, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 573, 580, 583, 585, 587, 588, 589, 590, 598, 599, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 627, 628, 634, 643, 657, 665, 670, 671, 676, 677, 679, 680, 682, 687, 688, 689, 690, 692, 693, 696, 698, 703, 705, 706, 709, 710, 711, 714, 717, 718, 727, 728, 730, 731, 732, 734, 735, 742, 745, 747, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 771, 772, 778, 782, 785, 786, 787, 789, 790, 795, 796, 797, 798, 800, 801, 805, 809, 827, 833, 844, 850, 851, 852, 853, 856, 857, 858, 859, 862, 864, 865, 866, 867, 868, 870, 871, 873, 875, 876, 878, 879, 881, 882, 883, 884, 888, 893, 895, 896, 897, 898, 901, 902, 905, 906, 907, 909, 911, 912, 913, 919, 923, 926, 931, 932, 933, 935, 936, 938, 940, 941, 942, 943, 944, 947, 948, 949, 950, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 976, 977, 981, 982, 983, 984, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1011, 1013, 1014, 1015, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1042, 1043, 1044, 1047, 1049, 1051, 1052, 1061, 1069], "within": [2, 49, 120, 121, 158, 159, 160, 174, 229, 257, 477, 509, 643, 676, 677, 682, 742, 1068], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 112, 113, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 643, 654, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 773, 774, 776, 777, 778, 779, 780, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 862, 865, 866, 867, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 892, 895, 896, 902, 903, 904, 907, 908, 910, 915, 916, 918, 919, 920, 921, 923, 925, 930, 931, 932, 933, 934, 935, 936, 937, 938, 944, 945, 946, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 976, 980, 981, 982, 983, 985, 986, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1061, 1068], "dtype": [2, 31, 38, 70, 74, 75, 90, 92, 94, 96, 97, 101, 102, 108, 109, 112, 122, 123, 124, 125, 127, 133, 159, 160, 174, 218, 219, 220, 227, 257, 271, 296, 297, 301, 302, 303, 310, 311, 358, 366, 408, 433, 439, 441, 443, 479, 480, 486, 487, 488, 489, 490, 492, 493, 494, 501, 522, 539, 552, 554, 558, 563, 572, 574, 585, 597, 601, 605, 606, 608, 609, 617, 620, 626, 635, 643, 676, 677, 682, 742, 745, 764, 765, 774, 776, 777, 779, 784, 785, 786, 787, 793, 794, 797, 798, 846, 850, 874, 880, 887, 899, 924, 930, 931, 955, 971, 978, 1000, 1017, 1031, 1040, 1042, 1043, 1044, 1048, 1061, 1069], "method": [2, 3, 4, 5, 8, 27, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 91, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 116, 122, 131, 134, 143, 147, 158, 166, 171, 184, 190, 196, 197, 198, 225, 233, 239, 249, 257, 264, 267, 268, 271, 295, 351, 354, 361, 362, 369, 376, 379, 380, 385, 398, 401, 440, 458, 460, 464, 465, 467, 471, 472, 475, 477, 486, 487, 488, 489, 490, 492, 493, 494, 542, 550, 551, 560, 562, 567, 572, 584, 592, 618, 620, 631, 636, 637, 639, 643, 644, 645, 648, 649, 650, 651, 654, 663, 665, 674, 680, 696, 697, 715, 720, 726, 736, 742, 751, 752, 839, 842, 856, 857, 870, 949, 950, 963, 1020, 1044, 1053, 1055, 1057, 1061, 1062, 1065, 1066, 1067], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 122, 257, 636, 637, 639, 644, 645, 649, 650, 651, 742, 1053, 1055, 1057, 1062, 1065, 1066, 1067], "A": [5, 28, 31, 52, 55, 73, 97, 101, 102, 103, 112, 118, 129, 153, 159, 174, 188, 215, 227, 228, 229, 233, 234, 257, 263, 321, 361, 362, 369, 379, 380, 388, 391, 392, 394, 401, 434, 440, 441, 452, 464, 465, 482, 485, 486, 487, 488, 489, 490, 492, 493, 494, 513, 514, 519, 520, 521, 523, 529, 530, 547, 582, 596, 600, 643, 676, 682, 698, 717, 720, 721, 742, 745, 805, 857, 958, 959, 960, 962, 965, 966, 967, 991, 992, 997, 998, 999, 1001, 1007, 1008, 1025, 1061, 1068], "encod": [5, 66, 101, 102, 112, 217, 257, 289, 290, 292, 293, 378, 515, 643, 769, 993], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 47, 48, 67, 68, 91, 93, 96, 101, 102, 105, 106, 110, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 138, 143, 152, 158, 159, 160, 161, 171, 174, 180, 199, 201, 208, 217, 219, 224, 225, 227, 233, 257, 271, 295, 313, 358, 381, 390, 424, 425, 426, 427, 429, 433, 434, 443, 470, 474, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 502, 506, 507, 526, 532, 533, 538, 539, 540, 541, 544, 574, 578, 592, 593, 605, 606, 617, 620, 621, 622, 626, 631, 632, 634, 635, 643, 654, 665, 667, 675, 676, 677, 681, 682, 686, 690, 701, 703, 708, 715, 720, 726, 742, 751, 752, 780, 796, 846, 865, 878, 915, 916, 917, 918, 920, 924, 925, 931, 948, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 973, 980, 984, 985, 1004, 1010, 1011, 1016, 1017, 1018, 1019, 1022, 1042, 1061, 1069], "string": [5, 7, 9, 12, 13, 14, 18, 28, 29, 31, 33, 34, 38, 52, 58, 66, 75, 97, 101, 102, 103, 112, 120, 121, 122, 123, 124, 127, 130, 135, 153, 157, 158, 159, 160, 174, 186, 188, 198, 201, 202, 209, 218, 223, 224, 227, 229, 233, 234, 237, 257, 264, 292, 298, 344, 348, 351, 354, 355, 366, 368, 374, 378, 386, 417, 443, 454, 468, 470, 486, 487, 488, 489, 490, 492, 493, 494, 509, 512, 513, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 547, 568, 569, 570, 571, 577, 580, 582, 583, 589, 590, 592, 593, 600, 610, 611, 614, 615, 623, 626, 627, 628, 631, 632, 634, 643, 657, 667, 674, 675, 676, 677, 682, 701, 702, 703, 709, 714, 720, 721, 724, 742, 745, 771, 777, 778, 832, 836, 839, 842, 843, 855, 871, 908, 989, 990, 991, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025, 1040, 1061, 1069], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 378, 643, 663, 674, 697, 742], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 412, 520, 903, 998], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 47, 48, 67, 73, 74, 75, 90, 91, 95, 97, 101, 102, 105, 106, 109, 110, 112, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 135, 136, 137, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 164, 165, 167, 168, 169, 174, 186, 188, 198, 199, 203, 207, 209, 215, 217, 219, 220, 223, 224, 225, 226, 229, 231, 233, 241, 243, 244, 247, 257, 266, 267, 268, 269, 270, 271, 281, 287, 289, 290, 292, 293, 296, 307, 308, 309, 310, 311, 312, 313, 331, 347, 349, 355, 360, 361, 362, 363, 364, 365, 379, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 404, 405, 409, 412, 430, 433, 435, 440, 441, 447, 448, 449, 450, 454, 464, 465, 467, 474, 477, 479, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 501, 506, 508, 509, 513, 515, 517, 528, 529, 530, 534, 535, 537, 539, 540, 541, 544, 549, 561, 564, 567, 568, 569, 570, 571, 572, 574, 577, 578, 584, 587, 592, 593, 594, 605, 606, 608, 617, 620, 626, 631, 632, 635, 643, 657, 659, 661, 667, 669, 671, 675, 676, 677, 681, 682, 686, 690, 695, 704, 707, 709, 714, 715, 716, 720, 728, 730, 731, 734, 742, 745, 749, 750, 751, 752, 761, 767, 769, 774, 777, 780, 784, 791, 792, 793, 794, 795, 796, 815, 835, 837, 843, 849, 851, 852, 853, 860, 864, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 895, 896, 900, 901, 903, 921, 924, 926, 945, 946, 948, 950, 951, 952, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 973, 974, 979, 984, 986, 991, 993, 995, 1006, 1007, 1008, 1012, 1013, 1015, 1017, 1018, 1019, 1022, 1041, 1042, 1043, 1046, 1049, 1051, 1061, 1068], "decim": [6, 28, 31, 257, 495, 542, 643, 968, 1020, 1061], "temporari": 6, "remov": [6, 8, 133, 141, 217, 228, 257, 271, 366, 442, 526, 532, 538, 597, 643, 664, 717, 742, 751, 796, 948, 1004, 1010, 1016, 1019, 1061], "later": [6, 592, 703, 742], "onc": [6, 55, 101, 102, 105, 129, 134, 197, 199, 237, 257, 271, 295, 496, 643, 658, 724, 742, 752, 969, 1061], "stabil": 6, "happen": [6, 474, 643, 948, 1061], "being": [6, 101, 102, 112, 117, 146, 217, 227, 228, 257, 271, 312, 348, 486, 487, 488, 489, 490, 492, 493, 494, 596, 643, 668, 717, 742, 780, 795, 836, 867, 948, 1061, 1069], "consid": [6, 101, 102, 112, 117, 134, 143, 154, 180, 197, 225, 227, 228, 257, 271, 301, 302, 303, 312, 348, 441, 486, 487, 488, 489, 490, 492, 493, 494, 587, 599, 643, 665, 678, 685, 690, 715, 717, 726, 742, 752, 777, 780, 785, 786, 787, 795, 836, 867, 880, 948, 971, 972, 973, 1061], "break": [6, 117, 227, 228, 257, 271, 312, 313, 348, 486, 487, 488, 489, 490, 492, 493, 494, 643, 717, 742, 780, 795, 796, 836, 867, 948, 1061], "chang": [6, 26, 67, 101, 102, 117, 227, 228, 229, 257, 271, 312, 313, 315, 348, 469, 474, 486, 487, 488, 489, 490, 492, 493, 494, 643, 717, 742, 751, 779, 780, 795, 796, 836, 867, 944, 948, 979, 1061], "current": [6, 9, 26, 54, 91, 97, 103, 130, 136, 137, 173, 257, 327, 348, 434, 469, 643, 654, 659, 660, 681, 742, 745, 784, 788, 803, 811, 836, 944, 1061, 1068], "alpha": [6, 73, 271, 363, 364, 365, 643, 661, 667, 669, 695, 707, 742, 851, 852, 853, 1061], "state": [6, 8, 73, 83, 130, 587, 654, 661, 667, 669, 695, 707, 742], "cfg": [7, 8, 9, 15, 131], "path": [7, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 257, 456, 498, 523, 643, 663, 697, 703, 707, 742, 974, 1001, 1061], "previous": 7, "save": [7, 159, 160, 174, 229, 257, 319, 327, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 654, 676, 677, 682, 742, 811, 832, 836, 843], "share": [7, 58, 120, 121, 145, 257, 850, 1061], "option": [7, 8, 9, 26, 30, 31, 39, 67, 101, 104, 105, 106, 110, 113, 114, 116, 117, 119, 122, 123, 124, 125, 126, 127, 128, 170, 174, 180, 215, 219, 224, 257, 399, 485, 486, 487, 488, 489, 490, 492, 493, 494, 506, 533, 608, 626, 634, 643, 654, 681, 682, 690, 742, 745, 887, 891, 958, 959, 960, 961, 962, 963, 965, 966, 967, 984, 1011, 1039, 1061], "from": [7, 8, 28, 31, 52, 53, 54, 67, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 145, 147, 152, 157, 159, 160, 171, 172, 174, 175, 180, 188, 192, 196, 198, 199, 201, 202, 217, 224, 225, 227, 229, 257, 307, 313, 314, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 362, 366, 378, 385, 399, 434, 462, 463, 465, 469, 470, 474, 476, 486, 487, 489, 492, 493, 494, 496, 509, 519, 520, 522, 528, 539, 540, 541, 544, 562, 564, 575, 576, 580, 591, 592, 593, 594, 595, 620, 625, 630, 631, 632, 642, 643, 663, 664, 669, 674, 676, 677, 682, 690, 697, 698, 701, 702, 715, 722, 742, 745, 751, 796, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 856, 887, 891, 925, 940, 941, 942, 944, 948, 969, 997, 998, 1000, 1006, 1017, 1018, 1019, 1022, 1049, 1052, 1061, 1068, 1069], "json": [7, 9, 33, 34, 108, 109, 115, 257, 378, 456, 522, 523, 643, 654, 663, 674, 697, 703, 742, 1000, 1001], "file": [7, 9, 27, 28, 32, 33, 34, 35, 47, 48, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 147, 257, 456, 663, 669, 697, 703, 742, 751, 856, 1061], "produc": [7, 124, 125, 127, 410, 451, 592, 593, 609, 686, 742, 901], "filepath": 7, "same": [7, 18, 30, 31, 56, 58, 67, 73, 74, 75, 106, 112, 120, 121, 123, 131, 134, 158, 198, 209, 225, 233, 234, 237, 239, 257, 263, 270, 447, 450, 468, 485, 486, 487, 488, 489, 490, 492, 493, 494, 509, 549, 554, 581, 592, 643, 675, 686, 709, 715, 720, 721, 724, 742, 747, 751, 752, 796, 805, 948, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1052, 1061], "reset": [8, 131], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 48, 67, 74, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 105, 108, 109, 110, 112, 122, 123, 124, 125, 126, 127, 143, 145, 158, 160, 161, 171, 173, 174, 180, 186, 188, 196, 197, 198, 199, 210, 217, 225, 227, 230, 235, 257, 266, 298, 313, 347, 355, 360, 362, 363, 364, 365, 381, 429, 433, 434, 436, 443, 462, 463, 465, 469, 474, 477, 486, 487, 488, 489, 490, 492, 493, 494, 496, 502, 511, 519, 526, 528, 532, 533, 538, 539, 540, 541, 544, 565, 574, 578, 584, 592, 593, 594, 601, 605, 606, 608, 617, 620, 625, 626, 631, 632, 633, 635, 643, 665, 667, 675, 677, 681, 682, 690, 703, 710, 715, 718, 742, 751, 778, 796, 835, 843, 849, 850, 851, 852, 853, 865, 920, 924, 925, 931, 940, 941, 944, 948, 950, 969, 980, 988, 991, 997, 1004, 1006, 1010, 1011, 1016, 1017, 1018, 1019, 1022, 1050, 1061, 1069], "note": [8, 18, 30, 31, 39, 52, 56, 57, 67, 90, 91, 92, 94, 96, 97, 101, 103, 104, 108, 109, 110, 112, 113, 116, 117, 123, 125, 127, 129, 131, 133, 134, 135, 139, 148, 159, 160, 170, 171, 173, 174, 184, 187, 196, 197, 198, 216, 219, 223, 224, 228, 229, 233, 257, 271, 310, 311, 317, 318, 340, 341, 344, 348, 355, 386, 392, 394, 398, 412, 433, 472, 486, 487, 488, 489, 490, 491, 492, 493, 494, 506, 513, 519, 520, 521, 524, 526, 527, 529, 532, 538, 539, 551, 552, 560, 587, 592, 593, 599, 608, 617, 619, 620, 634, 635, 643, 653, 657, 661, 669, 670, 676, 677, 678, 682, 685, 698, 707, 709, 714, 717, 720, 742, 752, 793, 794, 828, 829, 832, 843, 903, 924, 964, 972, 973, 979, 984, 991, 997, 998, 999, 1002, 1004, 1005, 1007, 1010, 1016, 1017, 1031, 1042, 1061, 1068], "oper": [8, 31, 58, 74, 80, 81, 90, 92, 93, 94, 95, 96, 101, 110, 134, 147, 153, 158, 165, 175, 181, 184, 186, 187, 191, 198, 214, 219, 220, 224, 227, 236, 237, 257, 264, 265, 268, 307, 308, 309, 310, 311, 312, 361, 362, 376, 379, 380, 398, 401, 424, 425, 426, 427, 434, 440, 455, 458, 460, 464, 465, 467, 471, 472, 479, 496, 550, 551, 560, 567, 568, 570, 582, 583, 596, 643, 654, 669, 675, 678, 681, 685, 690, 691, 724, 742, 751, 791, 792, 793, 794, 795, 856, 915, 916, 917, 918, 952, 1037, 1041, 1042, 1043, 1051, 1061], "environ": [8, 26, 126, 129], "local": [8, 30, 104, 113, 127, 257, 355, 777, 779, 807, 808, 840, 843, 945, 946, 1061], "non": [8, 28, 30, 31, 39, 67, 95, 118, 160, 172, 180, 201, 202, 224, 228, 233, 234, 257, 386, 434, 443, 469, 485, 486, 487, 488, 489, 490, 492, 493, 494, 514, 520, 568, 569, 570, 571, 580, 582, 583, 589, 590, 592, 610, 611, 614, 615, 621, 622, 623, 626, 627, 628, 643, 677, 690, 701, 702, 717, 720, 721, 742, 871, 925, 944, 958, 959, 960, 961, 962, 963, 965, 966, 967, 992, 998, 1042, 1061], "env": [8, 128], "back": [8, 67, 147, 220, 257, 468, 545, 643, 703, 742, 751, 856, 1023, 1043, 1061], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 47, 48, 50, 52, 54, 55, 57, 67, 75, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 134, 136, 140, 143, 148, 149, 157, 159, 160, 161, 166, 170, 173, 174, 175, 178, 180, 184, 185, 188, 196, 199, 206, 208, 209, 215, 217, 220, 224, 225, 226, 227, 228, 229, 257, 267, 269, 270, 271, 283, 288, 301, 302, 303, 306, 308, 311, 313, 317, 318, 347, 348, 355, 362, 363, 364, 365, 366, 369, 370, 371, 377, 381, 385, 386, 392, 393, 394, 395, 396, 402, 404, 405, 415, 424, 425, 426, 427, 429, 434, 441, 443, 454, 456, 465, 466, 469, 471, 474, 477, 478, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 500, 501, 502, 503, 507, 508, 512, 513, 516, 517, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 544, 547, 548, 549, 558, 568, 569, 571, 572, 580, 583, 585, 590, 592, 593, 594, 595, 597, 598, 607, 608, 609, 610, 611, 614, 615, 620, 621, 622, 625, 626, 628, 630, 631, 632, 633, 634, 643, 659, 660, 665, 670, 671, 676, 677, 680, 681, 682, 684, 686, 690, 693, 703, 706, 707, 708, 709, 715, 716, 717, 722, 726, 742, 745, 749, 750, 751, 752, 759, 760, 784, 785, 796, 797, 799, 817, 818, 819, 824, 835, 836, 843, 848, 849, 851, 852, 853, 857, 858, 859, 861, 864, 865, 867, 869, 870, 871, 880, 883, 884, 887, 890, 891, 895, 896, 906, 915, 916, 918, 920, 925, 931, 932, 933, 934, 935, 939, 948, 949, 950, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 969, 973, 975, 977, 980, 981, 984, 985, 988, 990, 991, 994, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1039, 1040, 1043, 1044, 1050, 1051, 1061, 1068], "written": [9, 27, 28, 31, 32, 33, 34, 35, 47, 48, 257, 703, 742], "contain": [9, 28, 29, 30, 31, 67, 72, 91, 92, 95, 97, 104, 113, 120, 124, 135, 143, 159, 172, 184, 188, 223, 257, 271, 292, 293, 390, 443, 514, 517, 519, 520, 521, 523, 536, 537, 643, 657, 665, 676, 695, 714, 742, 745, 796, 931, 937, 948, 992, 995, 997, 998, 999, 1001, 1014, 1015, 1037, 1061], "where": [9, 31, 52, 67, 103, 124, 143, 147, 171, 180, 197, 210, 230, 257, 282, 357, 360, 362, 465, 480, 497, 506, 509, 511, 565, 578, 584, 621, 622, 625, 633, 634, 643, 665, 690, 710, 718, 742, 751, 762, 845, 849, 856, 970, 984, 988, 1050, 1052, 1061, 1068], "ascii": [10, 18, 525, 527, 531, 547, 1003, 1005, 1009, 1025], "charact": [10, 12, 18, 24, 28, 29, 101, 102, 112, 257, 344, 518, 520, 524, 525, 526, 531, 532, 534, 535, 538, 547, 695, 742, 745, 832, 996, 998, 1002, 1003, 1004, 1009, 1010, 1012, 1013, 1016, 1025], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 257], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 53, 54, 55, 57, 90, 97, 101, 102, 104, 112, 113, 188, 214, 220, 227, 228, 257, 717, 742, 1043, 1061, 1068], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 47, 48, 52, 67, 73, 91, 95, 97, 101, 102, 105, 106, 109, 110, 112, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 133, 135, 136, 137, 140, 153, 154, 156, 157, 158, 159, 160, 164, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 199, 203, 207, 209, 215, 217, 219, 220, 223, 224, 225, 229, 231, 233, 240, 241, 243, 244, 245, 247, 250, 257, 267, 268, 269, 271, 281, 287, 289, 292, 293, 307, 308, 309, 310, 311, 312, 313, 331, 347, 349, 355, 360, 361, 362, 363, 364, 365, 379, 380, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 404, 405, 409, 412, 430, 433, 435, 440, 441, 454, 464, 465, 467, 474, 477, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 501, 506, 508, 509, 513, 517, 522, 528, 529, 530, 534, 535, 537, 539, 540, 541, 561, 564, 567, 568, 569, 570, 571, 574, 577, 578, 584, 587, 592, 593, 594, 605, 606, 608, 617, 620, 626, 631, 632, 634, 635, 643, 657, 659, 660, 661, 667, 669, 675, 676, 677, 681, 682, 684, 686, 695, 704, 707, 709, 714, 715, 720, 727, 728, 730, 731, 732, 734, 737, 742, 745, 751, 761, 767, 774, 777, 780, 783, 784, 791, 792, 793, 794, 795, 796, 815, 835, 837, 843, 849, 851, 852, 853, 860, 871, 872, 873, 875, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 891, 895, 896, 903, 921, 924, 926, 937, 945, 946, 948, 950, 951, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 974, 979, 984, 986, 991, 995, 1000, 1006, 1007, 1008, 1012, 1013, 1015, 1017, 1018, 1019, 1041, 1042, 1043, 1046, 1049, 1051, 1052, 1061, 1068], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 264, 520, 529, 643, 745, 998, 1007], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 264, 514, 520, 643, 992, 998, 1039, 1061], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 49, 52, 67, 69, 71, 74, 91, 93, 117, 125, 136, 137, 139, 140, 141, 144, 148, 149, 153, 156, 157, 158, 165, 173, 174, 178, 179, 188, 189, 190, 208, 209, 210, 230, 233, 237, 241, 243, 244, 245, 246, 247, 249, 250, 257, 263, 266, 273, 274, 275, 276, 277, 278, 296, 299, 300, 304, 305, 312, 313, 314, 317, 318, 349, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 375, 376, 379, 380, 385, 392, 394, 395, 396, 398, 399, 401, 421, 436, 437, 438, 440, 444, 445, 446, 457, 460, 462, 463, 464, 465, 469, 471, 474, 475, 476, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 504, 505, 506, 510, 511, 556, 557, 560, 565, 575, 576, 579, 580, 582, 584, 586, 597, 612, 613, 624, 625, 633, 643, 659, 664, 670, 671, 675, 681, 682, 688, 689, 696, 709, 710, 718, 720, 722, 724, 728, 730, 731, 732, 733, 734, 736, 737, 742, 745, 753, 754, 755, 756, 757, 758, 781, 782, 789, 790, 795, 796, 797, 837, 852, 853, 858, 862, 867, 944, 948, 958, 960, 961, 963, 964, 965, 967, 968, 982, 983, 987, 1035, 1036, 1048, 1061, 1069], "fmt": [11, 384, 600, 643, 679, 742], "floatfmt": 11, "mix": [11, 797, 1019, 1061], "control": [11, 31, 57, 74, 123, 257, 667, 742], "how": [11, 30, 31, 58, 67, 74, 75, 93, 96, 103, 143, 173, 227, 228, 257, 298, 315, 347, 355, 385, 410, 411, 468, 480, 491, 522, 539, 541, 594, 634, 643, 665, 681, 717, 742, 778, 798, 835, 843, 901, 902, 964, 1000, 1017, 1019, 1061], "float": [11, 28, 31, 41, 42, 117, 120, 121, 122, 125, 127, 133, 140, 145, 148, 174, 190, 199, 206, 249, 257, 300, 301, 302, 303, 313, 317, 318, 349, 360, 361, 362, 363, 364, 365, 370, 375, 379, 380, 385, 388, 391, 392, 394, 395, 396, 401, 409, 436, 440, 444, 457, 462, 463, 464, 465, 471, 474, 475, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 560, 579, 612, 613, 618, 620, 625, 627, 633, 643, 670, 682, 696, 706, 707, 736, 742, 745, 774, 782, 785, 786, 787, 796, 797, 799, 837, 849, 850, 851, 852, 853, 858, 862, 867, 877, 891, 900, 901, 927, 933, 934, 940, 941, 947, 948, 949, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 984, 988, 1031, 1042, 1050, 1061, 1069], "point": [11, 31, 41, 42, 125, 127, 148, 159, 175, 257, 300, 313, 317, 318, 349, 370, 375, 392, 394, 495, 496, 592, 643, 670, 676, 686, 698, 742, 782, 796, 837, 858, 862, 877, 948, 968, 969, 1042, 1061], "full": [11, 38, 67, 72, 74, 101, 102, 104, 112, 113, 159, 160, 257, 539, 540, 541, 544, 676, 677, 686, 742, 745, 1017, 1018, 1019, 1022], "format": [11, 14, 18, 28, 31, 100, 101, 102, 112, 117, 146, 157, 171, 180, 197, 198, 216, 255, 257, 348, 351, 354, 454, 539, 540, 541, 544, 668, 674, 690, 703, 742, 839, 842, 1017, 1018, 1019, 1022, 1060], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 48, 67, 84, 90, 92, 94, 96, 99, 101, 102, 103, 105, 108, 109, 112, 115, 118, 123, 125, 126, 128, 129, 135, 136, 145, 146, 148, 149, 162, 171, 172, 175, 176, 183, 184, 199, 205, 206, 210, 212, 223, 227, 230, 240, 242, 251, 257, 282, 288, 294, 306, 312, 313, 315, 329, 332, 337, 339, 349, 356, 357, 359, 363, 364, 365, 369, 371, 377, 382, 392, 394, 402, 403, 411, 416, 428, 432, 434, 470, 474, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 499, 500, 502, 511, 524, 527, 529, 535, 536, 542, 553, 559, 565, 584, 585, 592, 603, 621, 622, 625, 629, 633, 643, 657, 659, 668, 669, 670, 671, 678, 685, 695, 705, 706, 710, 712, 714, 718, 727, 729, 738, 742, 773, 784, 795, 796, 798, 813, 816, 825, 827, 837, 844, 845, 847, 850, 851, 852, 853, 857, 859, 866, 877, 893, 902, 907, 919, 923, 925, 937, 938, 948, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 976, 977, 980, 988, 1002, 1005, 1007, 1013, 1014, 1020, 1032, 1045, 1050, 1061, 1069], "plai": [12, 583], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 105, 108, 109, 257, 742], "time": [12, 30, 38, 40, 52, 57, 72, 73, 110, 112, 147, 159, 160, 174, 229, 257, 294, 319, 320, 321, 322, 323, 327, 328, 344, 347, 348, 351, 353, 354, 355, 358, 408, 409, 434, 486, 487, 488, 489, 490, 492, 493, 494, 502, 539, 541, 544, 558, 559, 582, 583, 592, 593, 594, 595, 601, 631, 632, 643, 661, 676, 677, 682, 695, 742, 745, 751, 773, 803, 804, 805, 806, 811, 812, 832, 835, 836, 839, 841, 842, 843, 846, 856, 899, 901, 1017, 1019, 1022, 1044, 1045, 1061, 1069], "goe": 12, "By": [12, 13, 67, 101, 102, 112, 159, 160, 174, 210, 229, 230, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 511, 528, 565, 584, 608, 625, 633, 643, 676, 677, 682, 710, 718, 742, 832, 836, 843, 988, 1006, 1042, 1050, 1061], "begin": [12, 31, 257, 363, 364, 365, 519, 592, 643, 851, 852, 853, 997, 1061], "beauti": 12, "friendship": 12, "len": [12, 31, 123, 125, 172, 257, 307, 525, 531, 547, 643, 1003, 1009, 1025, 1061], "u32": [12, 52, 159, 185, 235, 240, 248, 250, 257, 265, 272, 279, 280, 281, 282, 283, 306, 307, 325, 329, 333, 337, 339, 345, 346, 349, 356, 357, 402, 406, 407, 410, 419, 443, 461, 466, 477, 484, 486, 487, 489, 492, 493, 494, 497, 514, 524, 527, 558, 562, 568, 573, 577, 578, 585, 616, 643, 676, 693, 723, 727, 735, 737, 742, 761, 762, 763, 774, 779, 809, 813, 820, 822, 825, 827, 830, 833, 834, 837, 844, 845, 867, 910, 950, 957, 992, 1002, 1005, 1044, 1047, 1049, 1061], "37": 12, "beaut": 12, "48": [12, 160, 257, 677, 742], "fmt_str_length": 12, "50": [12, 31, 140, 147, 257, 301, 302, 303, 348, 355, 643, 785, 797, 843, 1061], "print": [12, 15, 17, 18, 23, 102, 119, 144, 157, 158, 172, 175, 218, 236, 257, 384, 454, 595, 643, 679, 742, 878, 958, 1040, 1061, 1069], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 133, 257, 266, 643, 669, 742], "chunk": [13, 48, 99, 101, 102, 110, 112, 114, 115, 116, 125, 127, 147, 172, 183, 257, 270, 478, 643, 742, 751, 783, 856, 863, 937, 951, 1037, 1061], "stream": [13, 32, 47, 48, 73, 135, 158, 173, 223, 225, 257, 657, 661, 667, 669, 675, 681, 686, 690, 695, 707, 709, 714, 715, 742], "engin": [13, 29, 103, 129, 134, 158, 173, 225, 239, 257, 675, 681, 686, 690, 715, 726, 742, 752, 1061], "determin": [13, 28, 31, 65, 67, 74, 93, 96, 101, 102, 105, 110, 112, 116, 118, 134, 141, 153, 159, 160, 171, 172, 188, 224, 229, 257, 298, 331, 347, 355, 434, 443, 451, 474, 480, 486, 487, 488, 489, 490, 492, 493, 494, 506, 522, 539, 541, 542, 594, 617, 620, 635, 643, 676, 677, 742, 778, 815, 835, 843, 867, 925, 931, 948, 984, 1000, 1017, 1019, 1020, 1061], "schema": [13, 30, 52, 58, 68, 69, 70, 74, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 101, 102, 103, 107, 108, 109, 111, 112, 115, 123, 125, 134, 136, 137, 144, 145, 181, 184, 219, 257, 284, 285, 286, 434, 451, 522, 567, 626, 643, 659, 660, 666, 686, 691, 703, 726, 742, 745, 766, 788, 1000, 1061], "thread": [13, 28, 99, 101, 102, 103, 129, 257, 271, 412, 643, 903], "pool": [13, 129], "For": [13, 30, 31, 103, 104, 105, 113, 143, 147, 160, 173, 174, 239, 257, 296, 363, 364, 365, 434, 452, 479, 506, 513, 519, 520, 521, 529, 587, 592, 599, 600, 643, 665, 677, 682, 726, 742, 751, 851, 852, 853, 856, 952, 984, 991, 997, 998, 999, 1007, 1042, 1061], "some": [13, 26, 30, 31, 93, 101, 102, 112, 133, 143, 257, 665, 742, 878, 1061, 1069], "dataset": [13, 35, 101, 102, 110, 112, 116, 117, 173, 257, 399, 643, 654, 681, 686, 742, 891, 1061], "esp": 13, "when": [13, 15, 17, 21, 28, 31, 35, 38, 48, 57, 58, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 105, 106, 110, 112, 113, 114, 115, 117, 125, 127, 134, 135, 144, 145, 147, 149, 153, 159, 160, 173, 187, 196, 198, 201, 202, 209, 217, 219, 223, 225, 234, 257, 301, 302, 303, 347, 355, 363, 364, 365, 371, 434, 441, 443, 452, 470, 484, 508, 509, 526, 532, 538, 539, 577, 587, 592, 599, 643, 657, 671, 676, 677, 681, 686, 701, 702, 709, 714, 715, 721, 742, 751, 785, 786, 787, 835, 843, 850, 851, 852, 853, 856, 859, 931, 957, 972, 973, 1004, 1010, 1016, 1017, 1038, 1061], "have": [13, 26, 30, 31, 38, 67, 75, 91, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 116, 125, 127, 147, 160, 171, 191, 197, 198, 216, 257, 312, 363, 364, 365, 452, 477, 521, 592, 643, 663, 677, 690, 697, 707, 723, 742, 745, 751, 795, 851, 852, 853, 856, 864, 950, 1019, 1061, 1069], "larg": [13, 30, 67, 159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "element": [13, 23, 124, 127, 135, 170, 188, 196, 210, 223, 230, 257, 271, 273, 274, 275, 276, 277, 278, 294, 299, 304, 305, 307, 308, 309, 310, 311, 312, 367, 368, 381, 390, 410, 412, 413, 424, 425, 426, 427, 437, 438, 468, 469, 477, 480, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 503, 504, 505, 510, 511, 535, 536, 542, 556, 557, 559, 565, 584, 621, 622, 625, 633, 643, 657, 709, 710, 714, 718, 742, 752, 753, 754, 755, 756, 757, 758, 773, 781, 784, 789, 790, 791, 792, 793, 794, 795, 854, 855, 860, 866, 878, 890, 893, 901, 903, 904, 915, 916, 917, 918, 928, 929, 944, 950, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 981, 982, 983, 987, 988, 1013, 1014, 1020, 1032, 1035, 1036, 1040, 1045, 1046, 1050, 1061], "too": [13, 159, 160, 174, 229, 257, 344, 348, 355, 484, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "optimist": 13, "lead": [13, 35, 97, 117, 159, 160, 257, 271, 441, 498, 526, 538, 547, 554, 564, 584, 643, 676, 677, 686, 726, 742, 752, 974, 1004, 1016, 1025, 1061], "out": [13, 47, 48, 97, 119, 160, 198, 257, 290, 415, 433, 513, 515, 634, 677, 742, 769, 906, 924, 991, 993], "memori": [13, 48, 74, 90, 91, 94, 95, 96, 101, 102, 106, 110, 112, 114, 115, 116, 133, 134, 147, 198, 207, 239, 257, 468, 478, 501, 643, 742, 751, 752, 856, 951, 978, 979, 1061], "error": [13, 30, 76, 101, 102, 112, 159, 160, 174, 188, 196, 229, 257, 266, 290, 296, 344, 348, 355, 398, 417, 433, 486, 487, 488, 489, 490, 492, 493, 494, 513, 515, 519, 521, 522, 523, 539, 540, 541, 544, 643, 676, 677, 682, 726, 742, 769, 774, 832, 836, 843, 908, 924, 991, 993, 997, 999, 1000, 1001, 1017, 1018, 1019, 1022, 1061], "row": [13, 18, 23, 28, 31, 33, 35, 48, 67, 68, 70, 74, 82, 84, 89, 93, 94, 96, 97, 101, 102, 105, 106, 110, 112, 114, 115, 116, 117, 120, 123, 125, 134, 135, 136, 143, 147, 150, 153, 157, 158, 159, 161, 162, 167, 169, 170, 171, 172, 174, 175, 176, 180, 184, 198, 199, 208, 212, 213, 216, 218, 223, 225, 227, 228, 235, 239, 242, 251, 257, 271, 282, 368, 382, 403, 413, 434, 468, 469, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 507, 509, 518, 522, 553, 574, 577, 587, 588, 599, 603, 605, 606, 619, 621, 622, 629, 634, 643, 657, 659, 661, 665, 669, 672, 673, 676, 678, 682, 683, 685, 686, 690, 708, 712, 713, 714, 715, 717, 723, 726, 729, 738, 742, 751, 855, 856, 866, 890, 904, 944, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 985, 996, 1000, 1032, 1061, 1069], "per": [13, 28, 31, 123, 125, 135, 157, 184, 185, 202, 209, 223, 234, 246, 248, 249, 257, 271, 295, 412, 415, 433, 509, 577, 643, 657, 702, 709, 714, 721, 733, 735, 736, 742, 903, 906, 924], "everi": [13, 28, 101, 102, 112, 159, 213, 216, 229, 257, 307, 308, 309, 310, 311, 312, 348, 355, 368, 406, 407, 411, 413, 415, 416, 424, 429, 432, 518, 555, 587, 588, 643, 669, 676, 713, 742, 791, 792, 793, 794, 795, 836, 843, 855, 897, 898, 902, 904, 906, 907, 915, 920, 923, 996, 1034, 1061], "process": [13, 28, 47, 48, 129, 257, 742], "liter": [14, 18, 30, 52, 105, 125, 126, 127, 128, 157, 171, 177, 178, 182, 183, 186, 196, 197, 201, 202, 211, 215, 228, 233, 234, 257, 266, 289, 321, 361, 362, 369, 376, 379, 380, 386, 401, 440, 443, 458, 460, 464, 465, 471, 513, 529, 530, 550, 560, 568, 569, 570, 571, 574, 578, 580, 582, 583, 589, 590, 591, 592, 593, 594, 605, 606, 608, 610, 611, 614, 615, 617, 620, 623, 626, 627, 628, 630, 631, 632, 635, 643, 671, 701, 702, 717, 720, 721, 742, 745, 768, 796, 805, 857, 871, 948, 972, 973, 991, 1007, 1008, 1061, 1068], "left": [14, 31, 54, 67, 120, 121, 159, 160, 173, 174, 228, 257, 313, 363, 364, 365, 385, 386, 474, 486, 487, 488, 489, 490, 492, 493, 494, 497, 525, 547, 558, 580, 587, 588, 592, 593, 599, 619, 631, 632, 634, 643, 676, 677, 681, 682, 717, 742, 796, 851, 852, 853, 871, 948, 970, 1003, 1025, 1044, 1061], "center": [14, 31, 257, 363, 364, 365, 485, 486, 487, 488, 489, 490, 492, 493, 494, 643, 851, 852, 853, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1061], "right": [14, 16, 31, 101, 102, 120, 121, 159, 160, 173, 174, 257, 313, 363, 364, 365, 386, 424, 425, 426, 427, 474, 486, 487, 488, 489, 490, 492, 493, 494, 497, 506, 531, 580, 592, 593, 631, 632, 643, 676, 677, 681, 682, 742, 796, 851, 852, 853, 871, 915, 916, 917, 918, 948, 970, 984, 1009, 1061], "cell": [14, 31, 257], "align": [14, 31, 67, 74, 257, 547, 1025], "keyerror": [14, 18], "recognis": [14, 18, 122], "column_abc": 14, "column_xyz": 14, "visibl": [15, 145, 257, 850, 1061], "eg": [15, 23, 31, 103, 257, 348, 539, 541, 560, 643, 1017, 1019], "low": [15, 129, 474, 643, 948, 1061], "rang": [15, 31, 103, 140, 145, 159, 172, 257, 314, 325, 339, 345, 346, 348, 355, 356, 385, 574, 582, 591, 592, 593, 594, 605, 606, 630, 631, 632, 643, 676, 742, 797, 809, 827, 833, 834, 836, 843, 844, 850, 944, 1061], "100": [15, 31, 93, 96, 101, 102, 112, 115, 257, 522, 542, 547, 742, 959, 960, 962, 1000, 1020, 1061, 1069], "98": [15, 165, 257, 294, 508, 542, 554, 559, 643, 1020], "99": [15, 31, 148, 149, 165, 168, 257, 265, 294, 369, 371, 508, 554, 559, 643, 670, 671, 742, 849, 857, 1061], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 48, 52, 67, 74, 97, 103, 112, 125, 127, 137, 147, 156, 159, 160, 162, 164, 165, 166, 183, 187, 188, 189, 193, 194, 201, 212, 233, 237, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 266, 270, 279, 280, 281, 283, 301, 306, 308, 311, 315, 317, 318, 319, 321, 327, 340, 341, 347, 348, 355, 358, 381, 382, 385, 390, 398, 402, 403, 411, 416, 428, 429, 432, 437, 469, 470, 507, 547, 553, 567, 580, 587, 592, 596, 599, 601, 603, 608, 609, 629, 632, 643, 661, 676, 677, 678, 680, 685, 694, 695, 701, 711, 712, 720, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 745, 752, 785, 798, 803, 805, 811, 835, 843, 846, 849, 866, 878, 893, 902, 907, 919, 920, 923, 928, 944, 972, 973, 1032, 1061, 1069], "95": [15, 265, 643], "96": [15, 265, 643], "97": [15, 165, 257, 265, 643], "move": [16, 198, 257, 363, 364, 365, 486, 487, 489, 493, 643, 851, 852, 853, 959, 960, 962, 966, 1061], "inlin": [16, 198, 257, 513, 519, 520, 529, 991, 997, 998, 1007], "parenthes": 16, "below": [17, 30, 31, 104, 113, 143, 257, 371, 592, 593, 634, 643, 665, 742], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 67, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 295, 514, 519, 523, 643, 992, 997, 1001], "rounded_corn": 18, "style": [18, 31, 110, 116, 188, 257], "border": 18, "line": [18, 31, 101, 102, 105, 112, 157, 167, 169, 257, 519, 997], "includ": [18, 26, 28, 30, 31, 72, 104, 113, 125, 135, 140, 145, 159, 186, 198, 223, 224, 227, 257, 313, 349, 386, 474, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 532, 534, 535, 538, 587, 621, 622, 643, 657, 676, 714, 742, 796, 797, 837, 850, 871, 948, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1012, 1013, 1016, 1051, 1061], "divid": [18, 313, 348, 355, 363, 364, 365, 399, 474, 643, 796, 836, 843, 851, 852, 853, 891, 948, 1061], "dens": [18, 157, 257, 477, 643, 950, 1061], "space": [18, 159, 257, 676, 742], "horizont": [18, 74, 153, 164, 227, 257, 568, 569, 570, 571, 582, 583, 587, 588, 589, 590, 596, 599, 610, 611, 614, 615, 619, 627, 628], "markdown": 18, "compat": [18, 31, 35, 48, 257, 513, 514, 519, 520, 521, 529, 530, 742, 745, 991, 992, 997, 998, 999, 1007, 1008], "No": [18, 545, 1023], "appli": [18, 28, 31, 52, 74, 112, 122, 125, 127, 153, 187, 257, 323, 324, 325, 329, 331, 332, 333, 335, 337, 339, 342, 345, 346, 349, 352, 356, 357, 359, 364, 365, 441, 470, 485, 486, 487, 489, 493, 529, 539, 540, 541, 544, 567, 587, 588, 599, 609, 619, 634, 643, 678, 685, 686, 694, 742, 807, 808, 809, 813, 815, 816, 820, 822, 825, 827, 830, 833, 834, 837, 840, 844, 845, 847, 852, 853, 958, 959, 960, 962, 966, 1007, 1017, 1018, 1019, 1022, 1061], "round": [18, 31, 69, 97, 257, 300, 375, 556, 643, 782, 862, 1061], "corner": [18, 31, 97, 257], "op": [18, 127, 257, 480, 643, 742, 1019, 1061], "one": [18, 28, 29, 31, 57, 67, 82, 90, 92, 93, 94, 95, 96, 108, 109, 126, 127, 128, 131, 149, 150, 157, 158, 159, 160, 171, 180, 188, 196, 197, 203, 219, 222, 238, 257, 265, 313, 371, 434, 438, 485, 508, 520, 554, 592, 624, 627, 634, 643, 671, 672, 675, 676, 677, 690, 704, 722, 725, 742, 751, 796, 859, 887, 925, 929, 948, 958, 998, 1026, 1061], "more": [18, 31, 33, 35, 48, 57, 67, 74, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 108, 109, 110, 113, 125, 127, 131, 134, 139, 140, 171, 175, 180, 184, 196, 197, 199, 219, 225, 239, 257, 268, 271, 287, 301, 302, 303, 399, 435, 438, 441, 467, 496, 506, 520, 539, 540, 541, 561, 624, 627, 634, 643, 690, 715, 742, 745, 752, 767, 779, 785, 786, 787, 797, 887, 891, 926, 969, 984, 998, 1017, 1018, 1019, 1046, 1061, 1069], "semigraph": 18, "box": [18, 134, 257], "draw": [18, 23, 24, 124, 1069], "found": [18, 28, 31, 54, 77, 86, 88, 93, 97, 144, 228, 257, 497, 523, 539, 541, 643, 717, 742, 970, 1001, 1017, 1019, 1061, 1068], "unicod": 18, "block": [18, 158, 225, 257, 675, 698, 715, 723, 726, 742, 972, 973, 1061], "http": [18, 31, 91, 103, 133, 139, 257, 519, 521, 997, 999], "en": [18, 31, 257], "wikipedia": 18, "org": [18, 91, 103, 133, 139, 257], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 257], "etc": [19, 30, 31, 101, 104, 106, 110, 113, 114, 116, 257, 745, 972, 973, 1061], "inform": [21, 72, 104, 113, 139, 257, 301, 302, 303, 399, 506, 513, 519, 520, 529, 592, 593, 643, 695, 742, 779, 785, 786, 787, 891, 984, 991, 997, 998, 1007, 1061], "separ": [22, 28, 99, 101, 102, 112, 186, 188, 217, 224, 226, 257, 271, 413, 417, 518, 583, 587, 588, 643, 716, 742, 904, 908, 996, 1030, 1038, 1061], "between": [22, 74, 122, 123, 125, 127, 139, 190, 249, 257, 296, 316, 386, 417, 424, 425, 426, 427, 469, 474, 475, 490, 512, 575, 576, 584, 586, 618, 621, 622, 643, 696, 736, 742, 774, 779, 799, 871, 908, 915, 916, 917, 918, 944, 948, 949, 963, 990, 1061], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 48, 52, 129, 140, 149, 158, 159, 160, 188, 257, 301, 302, 308, 371, 434, 468, 477, 486, 498, 536, 611, 624, 643, 671, 675, 676, 677, 742, 785, 786, 791, 797, 859, 925, 950, 959, 974, 1014, 1061], "both": [23, 28, 58, 159, 160, 173, 174, 181, 196, 257, 270, 313, 366, 386, 474, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 631, 632, 643, 653, 676, 677, 681, 682, 691, 742, 871, 880, 1061], "tbl_row": 23, "char": [24, 58, 75, 520, 527, 998, 1005], "enabl": [25, 75, 120, 121, 130, 201, 233, 257, 498, 643, 701, 720, 742, 974, 1061], "addit": [25, 30, 31, 93, 104, 113, 123, 141, 143, 146, 158, 186, 201, 202, 203, 209, 226, 233, 234, 237, 257, 264, 327, 366, 369, 468, 509, 513, 519, 520, 529, 568, 570, 577, 580, 581, 582, 583, 589, 597, 610, 614, 623, 626, 627, 643, 664, 668, 675, 701, 702, 704, 709, 716, 720, 721, 724, 742, 803, 811, 857, 991, 997, 998, 1007, 1061], "verbos": [25, 131, 520, 998], "debug": [25, 661, 669, 686, 742, 1069], "log": [25, 69, 294, 360, 438, 460, 471, 559, 643, 773, 849, 1045, 1061], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 55, 68, 70, 72, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 125, 152, 171, 186, 192, 196, 197, 198, 200, 215, 216, 224, 257, 267, 269, 443, 484, 643, 698, 700, 742, 931, 1061], "show": [26, 31, 56, 143, 157, 175, 185, 257, 665, 695, 707, 742], "variabl": [26, 49, 54, 126, 129, 180, 217, 257, 690, 742, 1038, 1061, 1068], "restrict": [26, 536, 592, 593, 1014], "dictionari": [26, 31, 90, 92, 93, 94, 96, 101, 102, 107, 108, 109, 111, 112, 171, 186, 196, 197, 198, 215, 216, 257, 443, 643, 742, 931, 1061], "those": [26, 31, 101, 198, 257, 477, 519, 643, 745, 950, 997, 1061], "been": [26, 31, 133, 257, 295, 477, 486, 487, 488, 489, 490, 492, 493, 494, 643, 697, 742, 950, 1061], "set_fmt_float": 26, "directli": [26, 54, 125, 127, 131, 198, 257, 363, 364, 365, 620, 643, 742, 851, 852, 853, 1061, 1069], "via": [26, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 171, 197, 257, 271, 521, 643, 663, 697, 742, 999], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 100, 101, 105, 106, 107, 110, 111, 257], "bytesio": [27, 28, 31, 32, 35, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 257, 663, 697, 742], "compress": [27, 32, 35, 47, 48, 257, 742], "avrocompress": [27, 257], "uncompress": [27, 32, 35, 48, 106, 114, 257, 742], "write": [27, 28, 29, 30, 31, 32, 33, 35, 48, 102, 106, 131, 257, 301, 302, 303, 456, 643, 684, 707, 742, 785, 786, 787, 1061], "apach": [27, 35, 100, 103, 257], "avro": [27, 100, 257, 654], "should": [27, 28, 29, 31, 32, 33, 34, 35, 47, 48, 74, 90, 92, 94, 96, 104, 108, 109, 110, 112, 116, 122, 123, 127, 134, 135, 141, 159, 160, 171, 174, 196, 197, 198, 216, 217, 223, 226, 229, 239, 257, 265, 271, 298, 312, 344, 348, 355, 358, 366, 392, 394, 412, 485, 486, 487, 488, 489, 490, 492, 493, 494, 497, 506, 581, 597, 604, 608, 621, 622, 634, 643, 657, 664, 676, 677, 681, 682, 686, 703, 707, 709, 714, 716, 742, 745, 752, 778, 795, 832, 836, 843, 846, 903, 958, 959, 960, 961, 962, 963, 965, 966, 967, 970, 984, 1061], "snappi": [27, 35, 48, 257, 742], "deflat": [27, 257], "import": [27, 28, 30, 31, 32, 35, 38, 67, 90, 91, 94, 95, 112, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 140, 141, 143, 157, 159, 172, 174, 186, 188, 217, 219, 220, 227, 229, 257, 314, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 486, 487, 489, 492, 493, 494, 575, 576, 592, 593, 595, 631, 632, 643, 654, 663, 664, 665, 676, 682, 686, 690, 703, 742, 789, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 875, 879, 881, 882, 887, 958, 982, 1035, 1061, 1069], "pathlib": [27, 28, 32, 35, 112, 257], "foo": [27, 28, 30, 32, 33, 34, 35, 56, 134, 138, 139, 141, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 199, 200, 201, 204, 205, 206, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 230, 231, 232, 236, 257, 297, 301, 302, 303, 313, 344, 382, 384, 403, 409, 414, 415, 418, 419, 474, 481, 499, 500, 512, 514, 516, 518, 520, 521, 526, 532, 534, 536, 538, 543, 546, 553, 555, 573, 579, 581, 584, 585, 586, 598, 602, 603, 607, 610, 612, 613, 614, 616, 618, 623, 625, 629, 633, 634, 643, 662, 664, 665, 666, 672, 679, 680, 681, 693, 698, 700, 701, 715, 716, 719, 722, 742, 745, 776, 785, 796, 832, 908, 948, 954, 992, 994, 996, 998, 999, 1014, 1021, 1024, 1061], "bar": [27, 28, 30, 32, 33, 34, 35, 56, 134, 138, 139, 141, 142, 143, 144, 147, 150, 151, 153, 154, 155, 156, 162, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 199, 200, 201, 205, 206, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 225, 226, 230, 231, 236, 257, 297, 384, 419, 506, 516, 518, 521, 534, 536, 573, 579, 581, 584, 585, 586, 598, 603, 607, 610, 612, 613, 614, 616, 623, 625, 629, 633, 634, 643, 662, 664, 665, 666, 672, 679, 680, 681, 693, 698, 700, 701, 715, 716, 719, 742, 745, 776, 908, 984, 994, 996, 999, 1014, 1061], "ham": [27, 28, 30, 32, 35, 138, 139, 141, 142, 143, 144, 150, 151, 154, 161, 162, 164, 173, 177, 178, 179, 182, 185, 190, 192, 194, 196, 199, 200, 201, 205, 206, 208, 210, 211, 212, 217, 218, 219, 220, 221, 225, 230, 231, 257, 297, 581, 662, 664, 665, 666, 672, 681, 693, 698, 700, 701, 715, 722, 742, 776], "d": [27, 28, 30, 31, 32, 35, 58, 75, 93, 117, 140, 157, 159, 161, 162, 165, 173, 212, 214, 227, 231, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 264, 266, 328, 351, 354, 386, 470, 501, 514, 520, 535, 539, 540, 541, 580, 601, 643, 676, 681, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 779, 812, 839, 842, 871, 992, 998, 1013, 1017, 1018, 1019, 1061], "e": [27, 28, 30, 32, 35, 58, 75, 91, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 114, 116, 140, 157, 159, 160, 162, 174, 212, 214, 219, 227, 229, 257, 264, 271, 344, 348, 355, 360, 366, 386, 436, 443, 486, 487, 488, 489, 490, 492, 493, 494, 501, 506, 597, 634, 643, 663, 676, 677, 682, 684, 697, 698, 742, 745, 832, 836, 843, 849, 871, 971, 984, 1042, 1061], "dirpath": [27, 28, 32, 35, 112, 257], "new_fil": [27, 28, 32, 35, 257], "has_head": [28, 31, 101, 102, 105, 112, 257], "line_termin": [28, 257], "quot": [28, 29, 101, 102, 112, 257], "batch_siz": [28, 101, 102, 115, 117, 257], "1024": [28, 48, 101, 102, 115, 257, 742], "datetime_format": [28, 257], "date_format": [28, 257], "time_format": [28, 257], "float_precis": [28, 31, 257], "null_valu": [28, 101, 102, 112, 257], "quote_styl": [28, 257], "csvquotestyl": [28, 257], "textiowrapp": [28, 257], "comma": [28, 257], "csv": [28, 47, 48, 101, 102, 105, 112, 257, 654, 742], "result": [28, 33, 34, 47, 48, 67, 74, 94, 96, 103, 104, 112, 114, 116, 117, 127, 147, 159, 160, 173, 184, 198, 206, 220, 229, 237, 257, 271, 351, 354, 363, 364, 365, 369, 399, 434, 441, 468, 474, 481, 485, 486, 487, 488, 489, 490, 492, 493, 494, 498, 500, 534, 535, 541, 560, 587, 588, 592, 593, 594, 609, 617, 620, 621, 622, 635, 643, 658, 676, 677, 681, 686, 695, 703, 706, 724, 742, 751, 752, 796, 839, 842, 851, 852, 853, 856, 891, 948, 954, 958, 959, 960, 961, 962, 963, 965, 966, 967, 974, 977, 1012, 1013, 1019, 1042, 1061, 1068, 1069], "If": [28, 29, 30, 31, 32, 33, 34, 35, 48, 52, 58, 72, 74, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 126, 133, 134, 135, 143, 147, 157, 159, 160, 162, 170, 171, 174, 176, 180, 184, 197, 198, 199, 208, 212, 216, 217, 219, 223, 224, 225, 227, 228, 257, 267, 269, 271, 301, 302, 303, 321, 340, 341, 355, 372, 399, 429, 434, 441, 443, 454, 468, 474, 477, 479, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 502, 506, 507, 521, 522, 524, 526, 527, 532, 533, 534, 535, 536, 538, 539, 540, 541, 544, 568, 570, 572, 574, 578, 584, 585, 587, 589, 592, 593, 599, 605, 606, 608, 610, 614, 617, 620, 621, 622, 626, 627, 631, 632, 634, 635, 643, 657, 665, 667, 676, 677, 681, 682, 686, 690, 698, 703, 708, 714, 715, 717, 726, 742, 745, 751, 752, 785, 786, 787, 796, 805, 828, 829, 843, 856, 864, 866, 867, 890, 891, 893, 920, 925, 948, 950, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 974, 980, 984, 985, 999, 1000, 1002, 1004, 1005, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1032, 1037, 1042, 1051, 1061, 1068], "instead": [28, 33, 34, 52, 56, 67, 74, 101, 102, 105, 110, 112, 116, 125, 134, 159, 160, 171, 174, 184, 186, 196, 197, 198, 201, 202, 220, 229, 233, 234, 257, 281, 313, 344, 348, 355, 366, 474, 486, 487, 488, 489, 490, 492, 493, 494, 524, 526, 532, 538, 568, 570, 574, 578, 579, 589, 592, 593, 605, 606, 610, 614, 617, 620, 626, 627, 631, 632, 635, 643, 670, 676, 677, 682, 701, 702, 703, 720, 721, 742, 745, 761, 796, 832, 836, 843, 948, 972, 973, 1002, 1004, 1010, 1016, 1043, 1061, 1068], "whether": [28, 94, 96, 127, 135, 203, 223, 257, 331, 349, 404, 405, 448, 449, 498, 643, 657, 686, 704, 709, 714, 742, 745, 777, 780, 815, 837, 895, 896, 1068], "header": [28, 31, 35, 48, 97, 101, 102, 105, 112, 144, 188, 224, 257, 742], "field": [28, 30, 59, 86, 88, 93, 219, 226, 257, 434, 443, 483, 520, 521, 522, 535, 536, 549, 587, 588, 609, 626, 643, 716, 742, 796, 925, 948, 956, 999, 1011, 1013, 1014, 1028, 1030, 1061], "symbol": [28, 257], "end": [28, 31, 101, 102, 110, 112, 159, 257, 289, 292, 293, 319, 344, 348, 349, 366, 386, 429, 513, 517, 520, 533, 537, 574, 581, 592, 593, 597, 605, 606, 631, 632, 634, 643, 676, 678, 685, 695, 742, 745, 771, 803, 832, 836, 871, 920, 995, 998, 1011, 1015, 1061], "each": [28, 31, 67, 102, 115, 120, 121, 123, 134, 157, 158, 159, 160, 172, 174, 186, 220, 226, 229, 236, 237, 239, 240, 242, 251, 257, 271, 313, 344, 348, 355, 416, 432, 438, 474, 477, 484, 488, 490, 492, 494, 496, 502, 509, 520, 535, 536, 572, 574, 577, 583, 592, 605, 606, 626, 634, 643, 676, 677, 682, 695, 716, 724, 726, 727, 729, 738, 742, 783, 796, 832, 836, 843, 907, 923, 948, 950, 957, 998, 1013, 1014, 1030, 1061, 1069], "byte": [28, 48, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 145, 257, 289, 292, 293, 524, 527, 742, 768, 771, 772, 850, 1002, 1005, 1061], "specifi": [28, 31, 67, 77, 86, 88, 105, 125, 135, 141, 145, 146, 149, 158, 159, 160, 173, 186, 196, 198, 201, 202, 203, 209, 223, 226, 233, 234, 237, 257, 363, 364, 365, 366, 371, 443, 468, 480, 486, 487, 488, 489, 490, 492, 493, 494, 509, 525, 531, 568, 570, 577, 580, 581, 582, 583, 589, 592, 593, 597, 610, 614, 623, 626, 627, 631, 632, 643, 657, 664, 668, 671, 675, 676, 677, 681, 701, 702, 704, 709, 714, 716, 720, 721, 724, 742, 850, 851, 852, 853, 859, 1003, 1009, 1061], "defin": [28, 31, 38, 122, 123, 125, 134, 143, 146, 159, 160, 184, 187, 239, 257, 271, 386, 433, 470, 474, 484, 486, 487, 488, 489, 490, 492, 493, 494, 572, 592, 593, 608, 626, 631, 632, 643, 665, 668, 676, 677, 694, 726, 742, 745, 752, 871, 924, 948, 957, 1061], "chrono": [28, 257, 351, 354, 539, 540, 541, 544, 839, 842, 1017, 1018, 1019, 1022], "rust": [28, 35, 83, 106, 110, 134, 239, 257, 521, 752, 999, 1061], "crate": [28, 257, 513, 514, 519, 520, 521, 529, 530, 539, 540, 541, 544, 745, 991, 992, 997, 998, 999, 1007, 1008, 1017, 1018, 1019, 1022], "fraction": [28, 120, 121, 199, 257, 349, 469, 496, 539, 541, 643, 837, 944, 969, 1017, 1019, 1061], "second": [28, 124, 159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 539, 541, 594, 595, 630, 634, 643, 676, 677, 682, 742, 745, 832, 836, 843, 1017, 1019, 1069], "precis": [28, 30, 31, 38, 39, 171, 197, 198, 216, 257, 320, 542, 745, 804, 1020], "infer": [28, 90, 92, 93, 94, 95, 96, 101, 102, 105, 108, 109, 112, 115, 134, 257, 481, 522, 539, 540, 541, 542, 544, 620, 643, 742, 954, 1000, 1017, 1018, 1019, 1020, 1022, 1061], "maximum": [28, 101, 102, 112, 117, 123, 124, 125, 127, 177, 257, 406, 444, 462, 477, 610, 611, 643, 687, 742, 785, 817, 897, 932, 940, 945, 950, 1061], "timeunit": [28, 38, 40, 257, 320, 321, 353, 358, 541, 592, 593, 594, 745, 804, 805, 841, 846, 1019], "frame": [28, 29, 31, 52, 53, 54, 55, 56, 57, 67, 74, 93, 102, 105, 120, 125, 134, 136, 171, 172, 181, 184, 187, 196, 197, 198, 220, 227, 257, 659, 691, 694, 742, 745, 784, 1061, 1068, 1069], "datetim": [28, 30, 31, 67, 97, 125, 140, 157, 159, 160, 172, 174, 229, 257, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 409, 486, 487, 488, 489, 490, 492, 493, 494, 539, 541, 558, 592, 593, 595, 601, 608, 631, 632, 643, 676, 677, 682, 742, 745, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 887, 900, 901, 940, 941, 973, 1017, 1019, 1044, 1061], "place": [28, 135, 142, 147, 164, 165, 188, 193, 198, 205, 206, 209, 223, 231, 257, 281, 417, 428, 499, 500, 508, 643, 657, 705, 706, 709, 714, 742, 751, 761, 856, 908, 919, 951, 976, 977, 986, 1061], "float64": [28, 31, 93, 101, 125, 144, 145, 153, 200, 220, 233, 257, 273, 274, 275, 276, 277, 278, 296, 304, 305, 314, 349, 366, 392, 394, 476, 504, 505, 556, 557, 581, 597, 617, 620, 635, 643, 666, 700, 720, 742, 745, 837, 1043, 1048, 1061], "repres": [28, 50, 65, 90, 92, 94, 95, 96, 210, 230, 236, 257, 392, 394, 511, 565, 568, 581, 584, 597, 608, 621, 622, 625, 633, 643, 710, 718, 742, 973, 988, 1050, 1061], "empti": [28, 81, 93, 101, 102, 105, 112, 136, 137, 159, 168, 180, 257, 608, 623, 659, 660, 676, 690, 742, 745, 784, 788, 874, 1061], "necessari": [28, 257], "alwai": [28, 30, 52, 101, 124, 134, 158, 239, 257, 451, 539, 592, 634, 686, 742, 751, 752, 1017, 1061, 1068, 1069], "non_numer": [28, 257], "strategi": [28, 67, 74, 101, 122, 123, 124, 125, 127, 149, 159, 173, 174, 183, 257, 271, 371, 434, 643, 671, 676, 681, 682, 742, 859, 925, 1061], "put": [28, 257], "around": [28, 257], "thei": [28, 30, 31, 93, 112, 120, 131, 175, 198, 257, 485, 643, 745, 958, 1061], "delimit": [28, 34, 101, 102, 109, 112, 115, 188, 217, 257, 512, 990, 1038, 1061], "record": [28, 117, 174, 219, 257, 682, 742], "termin": [28, 257], "also": [28, 31, 57, 93, 112, 123, 124, 125, 126, 127, 131, 144, 158, 159, 160, 181, 184, 197, 201, 209, 233, 257, 308, 311, 347, 386, 477, 486, 487, 488, 489, 490, 492, 493, 494, 509, 532, 538, 587, 588, 592, 599, 601, 619, 634, 642, 643, 648, 675, 676, 677, 691, 701, 709, 720, 722, 742, 745, 835, 871, 950, 1016, 1061], "indistinguish": [28, 257], "numer": [28, 31, 141, 174, 188, 227, 257, 264, 301, 302, 303, 376, 386, 438, 458, 460, 471, 480, 501, 521, 550, 560, 643, 654, 664, 682, 690, 742, 745, 785, 786, 787, 797, 871, 885, 971, 978, 999, 1042, 1061, 1069], "doe": [28, 30, 67, 74, 84, 90, 92, 93, 94, 96, 97, 101, 102, 104, 105, 108, 109, 112, 113, 117, 120, 121, 147, 172, 173, 196, 197, 198, 225, 233, 257, 295, 358, 434, 443, 562, 592, 598, 607, 643, 669, 681, 686, 715, 720, 742, 751, 846, 856, 864, 931, 979, 1051, 1061], "pars": [28, 52, 101, 102, 105, 109, 112, 114, 115, 135, 158, 201, 202, 209, 223, 233, 234, 237, 257, 386, 443, 468, 509, 522, 528, 542, 568, 569, 570, 571, 577, 580, 582, 583, 589, 590, 601, 610, 611, 614, 615, 623, 624, 626, 627, 628, 634, 643, 657, 675, 701, 702, 709, 714, 720, 721, 724, 742, 871, 1000, 1006, 1019, 1020, 1061], "valid": [28, 31, 38, 52, 106, 110, 127, 131, 145, 173, 257, 312, 513, 514, 519, 520, 521, 523, 529, 530, 592, 593, 634, 643, 681, 742, 745, 795, 850, 864, 991, 992, 997, 998, 999, 1001, 1007, 1008, 1061], "integ": [28, 30, 31, 43, 44, 45, 46, 61, 62, 63, 64, 118, 123, 125, 126, 128, 143, 159, 160, 217, 257, 268, 300, 349, 375, 376, 467, 474, 479, 486, 487, 488, 489, 490, 491, 492, 493, 494, 528, 567, 574, 601, 605, 606, 620, 643, 665, 676, 677, 742, 745, 782, 837, 862, 880, 948, 952, 964, 973, 1006, 1061, 1068, 1069], "even": [28, 101, 257, 470, 474, 643, 948, 1061], "aren": [28, 257], "t": [28, 54, 55, 74, 105, 112, 134, 159, 187, 225, 227, 257, 271, 312, 319, 327, 347, 360, 363, 364, 365, 412, 468, 470, 519, 526, 539, 541, 572, 634, 643, 676, 694, 715, 742, 745, 752, 795, 835, 849, 851, 852, 853, 903, 971, 997, 1004, 1010, 1017, 1019, 1042, 1051, 1061], "strictli": [28, 257], "table_nam": [29, 31, 257], "connect": [29, 101, 103, 106, 110, 114, 116, 117, 257, 655], "if_exist": [29, 257], "dbwritemod": [29, 257], "fail": [29, 30, 91, 104, 106, 109, 113, 133, 225, 257, 282, 352, 434, 539, 540, 541, 544, 643, 715, 742, 752, 1017, 1018, 1019, 1022, 1061], "dbwriteengin": [29, 257], "sqlalchemi": [29, 257], "databas": [29, 103, 257, 654], "creat": [29, 31, 90, 94, 96, 113, 123, 124, 125, 126, 127, 128, 136, 137, 159, 160, 185, 188, 229, 233, 257, 321, 348, 355, 434, 478, 486, 487, 489, 492, 493, 494, 533, 564, 582, 591, 592, 593, 594, 595, 630, 631, 632, 643, 659, 660, 667, 676, 677, 720, 742, 784, 788, 796, 801, 805, 836, 843, 942, 948, 951, 1011, 1042, 1061, 1068, 1069], "append": [29, 30, 125, 147, 173, 174, 257, 478, 592, 593, 634, 643, 681, 682, 742, 856, 1061], "your": [29, 31, 67, 101, 102, 120, 121, 134, 171, 197, 198, 201, 216, 233, 237, 239, 257, 271, 521, 539, 540, 541, 572, 643, 661, 678, 685, 686, 701, 720, 724, 726, 742, 752, 999, 1017, 1018, 1019, 1061, 1069], "special": [29, 101, 102, 112, 257, 520, 752, 998, 1061], "uri": [29, 30, 103, 104, 113, 257], "postgresql": [29, 103, 257, 468, 643], "user": [29, 103, 134, 187, 239, 257, 271, 441, 470, 498, 572, 592, 643, 694, 726, 742, 752, 974, 1061], "pass": [29, 30, 31, 35, 55, 67, 92, 103, 105, 112, 117, 123, 125, 127, 135, 139, 141, 158, 159, 160, 162, 176, 186, 187, 201, 209, 212, 223, 229, 233, 237, 257, 271, 328, 347, 369, 384, 468, 470, 486, 487, 488, 489, 490, 492, 493, 494, 509, 526, 532, 538, 568, 570, 577, 581, 589, 592, 601, 610, 614, 626, 627, 634, 643, 657, 664, 675, 676, 677, 679, 686, 694, 701, 707, 709, 714, 720, 724, 726, 742, 752, 812, 835, 857, 866, 893, 1004, 1010, 1016, 1032, 1061], "server": [29, 103, 257], "port": [29, 101, 103, 106, 110, 114, 116, 257], "sqlite": [29, 257], "db": [29, 103, 257], "replac": [29, 30, 101, 102, 112, 148, 149, 194, 224, 233, 234, 257, 321, 347, 443, 530, 643, 670, 720, 721, 742, 805, 835, 931, 972, 973, 1008, 1061], "insert": [29, 101, 102, 106, 110, 112, 114, 115, 116, 165, 193, 224, 226, 257, 497, 512, 547, 643, 716, 742, 970, 990, 1025, 1061], "mode": [29, 30, 52, 257, 520, 617, 620, 635, 643, 742, 998, 1061, 1068], "new": [29, 30, 31, 112, 131, 134, 143, 164, 165, 184, 185, 192, 193, 213, 224, 226, 227, 233, 234, 257, 266, 321, 368, 385, 442, 529, 530, 535, 536, 548, 549, 555, 643, 654, 665, 698, 713, 716, 720, 721, 726, 742, 748, 801, 805, 855, 942, 953, 1007, 1008, 1013, 1014, 1026, 1028, 1034, 1039, 1061, 1068], "alreadi": [29, 30, 257, 312, 412, 643, 795, 903, 1061], "adbc": [29, 103, 257], "deltalak": [30, 104, 113, 119, 257], "deltat": [30, 257], "ignor": [30, 124, 125, 127, 178, 211, 257, 315, 347, 363, 364, 365, 411, 462, 463, 643, 798, 835, 851, 852, 853, 902, 940, 941, 1061], "overwrite_schema": [30, 257], "storage_opt": [30, 101, 104, 106, 110, 113, 114, 116, 257], "delta_write_opt": [30, 257], "delta": [30, 40, 104, 113, 210, 230, 257, 492, 494, 511, 565, 584, 621, 622, 625, 633, 643, 654, 710, 718, 742, 965, 967, 988, 1050, 1061], "object": [30, 31, 32, 57, 74, 91, 92, 97, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 123, 125, 127, 133, 158, 159, 160, 175, 198, 219, 220, 257, 592, 593, 608, 631, 632, 654, 663, 676, 677, 697, 742, 745, 775, 802, 894, 989, 1037, 1061], "handl": [30, 74, 97, 101, 102, 112, 117, 257, 315, 411, 547, 643, 798, 902, 1025, 1061], "throw": [30, 257, 296, 522, 523, 643, 774, 1000, 1001, 1061], "add": [30, 31, 102, 134, 147, 159, 233, 234, 235, 257, 313, 472, 474, 551, 595, 599, 634, 643, 676, 681, 720, 721, 722, 723, 742, 751, 856, 1061], "anyth": [30, 196, 257, 520, 998], "updat": [30, 257, 742], "extra": [30, 35, 48, 101, 104, 105, 106, 110, 113, 114, 116, 147, 159, 257, 676, 742, 751, 856, 1061], "storag": [30, 101, 104, 106, 110, 113, 114, 116, 257], "backend": [30, 103, 104, 113, 257], "cloud": [30, 104, 113, 117, 257], "configur": [30, 104, 113, 257], "authent": [30, 104, 113, 257], "see": [30, 31, 38, 103, 104, 105, 113, 120, 121, 125, 127, 139, 173, 187, 257, 301, 302, 303, 371, 399, 441, 506, 513, 519, 520, 529, 592, 593, 619, 643, 745, 779, 785, 786, 787, 891, 984, 991, 997, 998, 1007, 1061, 1069], "here": [30, 31, 35, 90, 92, 93, 94, 96, 103, 104, 108, 109, 113, 123, 125, 127, 257, 521, 523, 742, 1001], "gc": [30, 104, 113, 257], "azur": [30, 104, 113, 257], "keyword": [30, 55, 104, 110, 113, 139, 187, 196, 201, 202, 233, 234, 237, 257, 470, 623, 626, 643, 694, 701, 702, 720, 721, 724, 742, 1061], "argument": [30, 35, 101, 104, 110, 113, 139, 141, 146, 158, 159, 160, 178, 186, 187, 188, 201, 202, 203, 209, 211, 220, 226, 229, 233, 234, 237, 257, 348, 355, 366, 386, 468, 470, 486, 487, 488, 489, 490, 492, 493, 494, 509, 526, 532, 538, 568, 570, 575, 576, 577, 580, 581, 582, 583, 589, 592, 597, 610, 614, 620, 623, 626, 627, 631, 643, 664, 668, 675, 676, 677, 694, 701, 702, 704, 709, 716, 720, 721, 724, 742, 751, 836, 843, 871, 1004, 1010, 1016, 1043, 1061], "while": [30, 102, 104, 105, 113, 125, 127, 171, 180, 224, 257, 690, 742], "lake": [30, 104, 113, 257, 654], "typeerror": [30, 257], "unsupport": [30, 257], "arrowinvaliderror": [30, 257], "could": [30, 65, 78, 159, 257, 296, 587, 599, 643, 665, 676, 742, 774, 1061], "primit": [30, 257, 390, 643, 1042, 1061], "categor": [30, 58, 75, 91, 120, 121, 173, 217, 218, 257, 297, 298, 313, 443, 474, 558, 643, 745, 775, 776, 777, 778, 779, 780, 796, 948, 1044, 1061], "protocol": [30, 91, 103, 133, 257], "associ": [30, 31, 53, 55, 67, 103, 124, 198, 257], "affect": [30, 257], "follow": [30, 31, 35, 72, 101, 102, 104, 112, 113, 134, 159, 160, 174, 187, 229, 257, 271, 344, 348, 355, 470, 477, 486, 487, 488, 489, 490, 491, 492, 493, 494, 549, 560, 572, 592, 634, 636, 637, 639, 643, 644, 645, 649, 650, 651, 676, 677, 682, 694, 742, 832, 836, 843, 950, 972, 973, 1053, 1055, 1057, 1061, 1062, 1065, 1066, 1067, 1069], "unsign": [30, 61, 62, 63, 64, 257, 479, 643, 880, 952, 1061], "millisecond": [30, 159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 595, 643, 676, 677, 682, 742, 745, 832, 836, 843], "nanosecond": [30, 159, 160, 174, 229, 257, 344, 348, 349, 355, 486, 487, 488, 489, 490, 492, 493, 494, 595, 643, 676, 677, 682, 742, 832, 836, 837, 843], "binari": [30, 32, 257, 289, 291, 292, 293, 768, 771, 772], "nullabl": [30, 257], "To": [30, 148, 257, 317, 318, 344, 371, 513, 519, 520, 529, 545, 627, 643, 670, 742, 832, 991, 997, 998, 1007, 1023, 1042, 1061], "pyarrow": [30, 35, 90, 91, 95, 101, 103, 104, 106, 110, 113, 117, 119, 172, 214, 219, 220, 257, 655, 1037, 1041, 1042, 1043, 1061], "ha": [30, 31, 67, 112, 133, 159, 160, 229, 257, 271, 294, 295, 312, 452, 486, 487, 488, 489, 490, 492, 493, 494, 559, 572, 643, 676, 677, 697, 726, 742, 773, 784, 795, 797, 864, 877, 1045, 1061], "last": [30, 135, 162, 174, 176, 188, 198, 209, 212, 223, 225, 251, 257, 281, 312, 325, 340, 345, 356, 398, 415, 432, 472, 508, 536, 551, 553, 592, 629, 643, 657, 682, 709, 712, 714, 715, 738, 742, 745, 761, 795, 809, 828, 833, 844, 866, 893, 906, 923, 1014, 1032, 1061], "filesystem": [30, 104, 113, 257], "table_path": [30, 104, 113, 257], "match": [30, 31, 38, 74, 84, 90, 92, 93, 94, 96, 108, 109, 120, 121, 149, 174, 196, 257, 449, 491, 513, 514, 517, 519, 520, 522, 523, 529, 530, 537, 539, 540, 541, 581, 643, 671, 682, 742, 745, 880, 887, 964, 991, 992, 995, 997, 998, 1000, 1001, 1007, 1008, 1015, 1017, 1018, 1019, 1061], "version": [30, 72, 104, 113, 119, 133, 257, 295, 340, 341, 579, 592, 619, 620, 631, 643, 674, 697, 742, 751, 796, 828, 829, 948, 1019, 1061], "old": [30, 192, 257, 698, 742], "existing_table_path": [30, 257], "store": [30, 101, 110, 147, 171, 197, 257, 297, 751, 776, 856, 1061], "like": [30, 91, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 167, 169, 173, 219, 257, 319, 412, 455, 477, 519, 592, 593, 627, 631, 632, 643, 663, 669, 697, 742, 751, 803, 903, 950, 997, 1061], "bucket": [30, 104, 113, 257, 348, 355, 836, 843, 867, 1061], "prefix": [30, 131, 257, 266, 293, 442, 537, 547, 551, 643, 745, 772, 1015, 1025], "aws_region": [30, 113, 257], "the_aws_region": [30, 257], "aws_access_key_id": [30, 104, 113, 257], "the_aws_access_key_id": [30, 104, 113, 257], "aws_secret_access_kei": [30, 104, 113, 257], "the_aws_secret_access_kei": [30, 104, 113, 257], "pa": [30, 90, 117, 257], "workbook": [31, 257], "worksheet": [31, 105, 257], "posit": [31, 141, 146, 158, 186, 201, 202, 203, 209, 226, 233, 234, 237, 257, 363, 364, 365, 366, 468, 474, 509, 521, 528, 568, 570, 575, 576, 577, 580, 581, 582, 583, 589, 597, 610, 614, 623, 626, 627, 643, 664, 668, 675, 701, 702, 704, 709, 716, 720, 721, 724, 742, 851, 852, 853, 948, 999, 1006, 1061], "tupl": [31, 103, 134, 171, 196, 197, 198, 204, 236, 257, 481, 643, 695, 707, 742, 745, 954, 1061], "a1": [31, 68, 70, 257], "table_styl": [31, 257], "column_format": [31, 257], "dtype_format": [31, 257], "oneormoredatatyp": [31, 123, 257, 887, 1061], "conditional_format": [31, 257], "conditionalformatdict": [31, 257], "header_format": [31, 257], "column_tot": [31, 257], "columntotalsdefinit": [31, 257], "column_width": [31, 257], "row_tot": [31, 257], "rowtotalsdefinit": [31, 257], "row_height": [31, 257], "sparklin": [31, 257], "sequenc": [31, 59, 67, 73, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 123, 124, 125, 135, 140, 146, 147, 173, 174, 180, 184, 186, 187, 188, 198, 209, 217, 223, 227, 228, 229, 257, 313, 390, 434, 441, 470, 474, 509, 549, 572, 577, 587, 588, 599, 601, 609, 619, 624, 643, 657, 668, 681, 682, 690, 694, 709, 714, 716, 717, 742, 751, 796, 797, 799, 856, 925, 948, 973, 1028, 1061], "formula": [31, 257, 360, 643, 849, 1061], "autofilt": [31, 257], "autofit": [31, 257], "hidden_column": [31, 257], "hide_gridlin": [31, 257], "sheet_zoom": [31, 257], "freeze_pan": [31, 257], "excel": [31, 105, 257, 654], "open": [31, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 114, 116, 257, 663, 697, 742], "xlsxwriter": [31, 119, 257], "close": [31, 159, 160, 257, 313, 386, 438, 474, 486, 487, 488, 489, 490, 492, 493, 494, 506, 592, 593, 631, 632, 643, 676, 677, 742, 796, 871, 948, 984, 1061], "xlsx": [31, 105, 257], "work": [31, 39, 91, 102, 105, 193, 202, 234, 257, 271, 287, 300, 301, 302, 303, 366, 375, 412, 435, 468, 484, 527, 561, 643, 702, 721, 742, 745, 767, 782, 785, 786, 787, 862, 903, 926, 1005, 1046, 1061], "directori": [31, 35, 110, 116, 257], "sheet1": [31, 257], "notat": [31, 257], "medium": [31, 257], "kei": [31, 67, 72, 74, 159, 171, 173, 174, 181, 186, 188, 192, 195, 197, 198, 257, 626, 676, 681, 682, 691, 698, 699, 742], "first_column": [31, 257], "last_column": [31, 257], "banded_column": [31, 257], "banded_row": [31, 257], "sheet": [31, 105, 257], "chart": [31, 257, 695, 742], "subsequ": [31, 57, 191, 220, 257, 434, 634, 667, 742], "colnam": [31, 112, 125, 144, 257, 666, 742], "given": [31, 52, 53, 67, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 122, 123, 125, 126, 127, 128, 134, 135, 145, 146, 148, 159, 160, 170, 186, 187, 196, 198, 205, 206, 209, 223, 228, 257, 271, 319, 322, 351, 353, 354, 360, 386, 409, 428, 434, 436, 468, 470, 477, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 520, 521, 539, 541, 549, 572, 597, 609, 620, 621, 622, 643, 657, 668, 676, 677, 686, 694, 705, 706, 709, 714, 717, 726, 742, 745, 752, 803, 806, 839, 841, 842, 849, 850, 867, 871, 890, 900, 919, 925, 927, 930, 942, 950, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 976, 977, 998, 999, 1017, 1019, 1048, 1052, 1061, 1068, 1069], "dd": [31, 257], "mm": [31, 257], "yyyi": [31, 257], "00": [31, 125, 159, 174, 229, 257, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 486, 487, 489, 492, 493, 494, 539, 541, 544, 592, 595, 631, 632, 643, 676, 682, 742, 745, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 1017, 1019, 1022], "overridden": [31, 90, 92, 94, 96, 108, 109, 129, 257, 742], "basi": [31, 125, 257], "param": [31, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 124, 125, 127, 196, 257, 742], "It": [31, 181, 187, 239, 257, 271, 295, 451, 484, 592, 593, 643, 686, 691, 726, 742, 972, 973, 1061], "group": [31, 35, 48, 52, 102, 158, 159, 160, 172, 184, 186, 188, 198, 227, 229, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 265, 271, 368, 374, 412, 468, 477, 484, 508, 509, 513, 519, 520, 521, 529, 554, 572, 643, 675, 676, 677, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 745, 903, 957, 991, 997, 998, 999, 1007, 1061], "float_dtyp": [31, 257], "simplifi": [31, 47, 48, 73, 257, 661, 667, 669, 695, 707, 742], "uniform": [31, 257, 474, 643, 948, 1061], "condit": [31, 143, 150, 196, 257, 517, 537, 578, 599, 634, 665, 672, 742], "suppli": [31, 90, 92, 93, 94, 96, 108, 109, 196, 257, 470, 643, 742], "typenam": [31, 257], "3_color_scal": [31, 257], "data_bar": [31, 257], "make": [31, 59, 74, 90, 95, 101, 102, 106, 110, 114, 116, 181, 184, 191, 229, 257, 364, 365, 443, 468, 480, 535, 547, 643, 691, 742, 852, 853, 867, 931, 1013, 1025, 1061, 1069], "icon": [31, 257], "multipl": [31, 55, 73, 74, 101, 102, 112, 114, 115, 116, 123, 127, 135, 141, 145, 147, 150, 158, 159, 164, 172, 186, 188, 198, 201, 203, 209, 223, 233, 237, 257, 433, 448, 452, 459, 460, 468, 481, 484, 486, 487, 488, 489, 490, 492, 493, 494, 509, 568, 570, 577, 581, 587, 588, 589, 599, 609, 610, 614, 619, 624, 627, 634, 643, 657, 664, 672, 675, 676, 701, 704, 709, 714, 720, 724, 726, 742, 751, 850, 856, 924, 936, 954, 1061], "singl": [31, 53, 67, 74, 101, 102, 103, 110, 112, 123, 134, 141, 142, 143, 147, 155, 170, 173, 186, 196, 198, 209, 257, 271, 344, 372, 410, 433, 441, 478, 481, 509, 512, 566, 568, 570, 572, 577, 581, 582, 583, 589, 606, 609, 610, 614, 624, 627, 632, 643, 664, 665, 681, 709, 742, 751, 832, 856, 901, 924, 951, 954, 990, 1037, 1061], "across": [31, 67, 257, 568, 569, 570, 571, 589, 590, 610, 611, 614, 615, 627, 628], "effect": [31, 153, 159, 219, 257, 271, 327, 592, 593, 643, 676, 723, 742, 803, 811], "heatmap": [31, 257], "min": [31, 35, 48, 140, 149, 159, 160, 188, 257, 301, 303, 309, 371, 468, 477, 489, 615, 623, 643, 671, 676, 677, 742, 785, 787, 792, 797, 859, 950, 962, 1061, 1069], "entir": [31, 257], "final": [31, 67, 116, 257, 363, 364, 365, 643, 669, 742, 851, 852, 853, 1061], "made": [31, 257, 1042, 1061], "up": [31, 59, 103, 171, 174, 197, 198, 216, 257, 271, 300, 547, 643, 681, 682, 686, 742, 745, 782, 1025, 1061], "abov": [31, 257, 634], "order": [31, 47, 48, 52, 54, 67, 73, 93, 118, 120, 134, 135, 158, 159, 160, 186, 187, 188, 199, 203, 209, 219, 223, 225, 229, 257, 271, 281, 287, 298, 430, 435, 477, 496, 497, 498, 508, 509, 549, 561, 562, 577, 643, 653, 657, 675, 676, 677, 690, 704, 709, 714, 715, 742, 752, 761, 767, 778, 780, 886, 921, 926, 950, 955, 969, 970, 974, 986, 1028, 1046, 1047, 1061], "than": [31, 47, 48, 89, 94, 96, 101, 102, 112, 117, 125, 127, 134, 136, 157, 158, 171, 174, 186, 196, 197, 199, 227, 239, 257, 271, 379, 380, 401, 440, 454, 474, 484, 496, 506, 525, 531, 536, 547, 572, 584, 592, 627, 643, 675, 682, 726, 742, 752, 948, 957, 969, 984, 1003, 1009, 1014, 1025, 1061, 1069], "bold": [31, 257], "font_color": [31, 257], "702963": [31, 257], "total": [31, 145, 257, 850, 1061], "export": [31, 171, 172, 197, 198, 216, 219, 257], "sum": [31, 52, 145, 153, 158, 159, 160, 170, 188, 237, 257, 271, 310, 311, 360, 372, 434, 486, 489, 493, 566, 568, 587, 589, 590, 599, 619, 628, 643, 661, 663, 667, 669, 675, 676, 677, 693, 695, 703, 707, 724, 742, 745, 793, 794, 849, 850, 959, 960, 962, 965, 966, 967, 1061], "must": [31, 91, 92, 104, 113, 117, 140, 146, 159, 160, 174, 181, 196, 257, 313, 434, 441, 474, 486, 487, 488, 489, 490, 492, 493, 494, 634, 643, 668, 676, 677, 682, 686, 691, 742, 796, 797, 948, 1061], "funcnam": [31, 257], "averag": [31, 257, 363, 364, 365, 477, 643, 851, 852, 853, 950, 1061], "count_num": [31, 257], "count": [31, 52, 101, 102, 106, 110, 112, 114, 115, 116, 117, 140, 159, 160, 174, 184, 185, 188, 224, 228, 229, 235, 239, 248, 257, 272, 307, 344, 402, 410, 461, 466, 486, 487, 488, 489, 490, 492, 493, 494, 514, 562, 564, 573, 616, 643, 676, 677, 682, 693, 717, 723, 726, 735, 742, 797, 832, 867, 901, 938, 943, 992, 1047, 1049, 1061], "std_dev": [31, 257], "var": [31, 128, 257, 494, 643, 742, 1061], "pixel": [31, 257], "unit": [31, 38, 40, 125, 127, 145, 257, 320, 321, 328, 353, 358, 439, 452, 539, 541, 563, 592, 593, 594, 601, 643, 695, 742, 745, 804, 805, 812, 841, 846, 850, 930, 1017, 1019, 1048, 1061, 1069], "hand": [31, 101, 102, 112, 257, 424, 425, 426, 427, 915, 916, 917, 918], "side": [31, 159, 160, 257, 386, 424, 425, 426, 427, 486, 487, 488, 489, 490, 492, 493, 494, 497, 592, 593, 631, 632, 643, 676, 677, 742, 871, 915, 916, 917, 918, 970, 1061], "call": [31, 56, 102, 125, 127, 131, 134, 158, 159, 160, 175, 256, 257, 271, 308, 311, 398, 472, 502, 551, 610, 614, 643, 655, 675, 676, 677, 741, 742, 745, 752, 1061], "ad": [31, 93, 159, 224, 233, 234, 257, 270, 369, 587, 588, 643, 676, 720, 721, 742, 796, 857, 948, 1061], "wise": [31, 67, 153, 257, 273, 274, 275, 276, 277, 278, 304, 305, 367, 437, 503, 504, 505, 556, 557, 587, 588, 599, 610, 614, 619, 643, 753, 754, 755, 756, 757, 758, 789, 790, 854, 928, 929, 981, 982, 983, 1035, 1036, 1061], "particip": [31, 257], "distinct": [31, 127, 186, 257, 287, 435, 477, 595, 643, 767, 926, 950, 1061, 1069], "referenc": [31, 257, 549], "differ": [31, 101, 117, 120, 147, 159, 160, 171, 197, 198, 216, 224, 257, 315, 325, 344, 345, 347, 356, 362, 411, 424, 426, 443, 462, 463, 465, 539, 562, 592, 598, 601, 607, 643, 667, 676, 677, 742, 745, 751, 752, 779, 798, 809, 832, 833, 835, 844, 856, 902, 915, 917, 940, 941, 971, 1017, 1061], "row_index": [31, 257], "height": [31, 143, 257], "provid": [31, 47, 48, 55, 101, 102, 103, 104, 112, 113, 125, 127, 170, 257, 271, 290, 291, 366, 434, 441, 515, 516, 519, 522, 523, 601, 626, 643, 654, 742, 752, 769, 770, 867, 890, 993, 994, 997, 1000, 1001, 1061, 1068, 1069], "intersect": [31, 257, 425, 745, 916], "bodi": [31, 257], "start": [31, 100, 101, 102, 103, 106, 110, 112, 114, 115, 116, 129, 158, 159, 175, 208, 229, 235, 257, 289, 292, 293, 325, 328, 329, 331, 332, 337, 339, 345, 346, 348, 349, 353, 355, 356, 357, 359, 366, 386, 429, 486, 487, 489, 492, 493, 494, 507, 513, 517, 520, 533, 537, 574, 581, 587, 592, 593, 597, 599, 605, 606, 631, 632, 634, 643, 675, 676, 695, 708, 723, 742, 745, 772, 804, 806, 809, 812, 813, 815, 820, 822, 825, 827, 830, 833, 834, 836, 837, 841, 843, 844, 845, 846, 847, 871, 920, 985, 995, 998, 1011, 1015, 1061, 1069], "zero": [31, 90, 91, 100, 101, 102, 106, 110, 124, 133, 149, 171, 196, 214, 219, 220, 257, 371, 434, 438, 497, 506, 547, 560, 643, 659, 671, 742, 784, 859, 925, 984, 1025, 1037, 1042, 1043, 1061], "unless": [31, 67, 92, 220, 257, 532, 538, 620, 742, 1016, 1043, 1051, 1061], "marker": [31, 257], "compliant": [31, 257], "case": [31, 67, 90, 92, 93, 94, 96, 108, 109, 116, 129, 134, 147, 159, 160, 171, 197, 198, 216, 257, 319, 441, 442, 451, 452, 513, 520, 529, 643, 676, 677, 742, 745, 751, 803, 856, 991, 998, 1007, 1061], "three": [31, 222, 257, 313, 434, 474, 497, 643, 796, 925, 948, 1061], "avail": [31, 99, 103, 104, 113, 123, 131, 256, 257, 477, 636, 637, 639, 642, 643, 644, 645, 648, 649, 650, 651, 654, 655, 669, 741, 742, 745, 950, 1053, 1055, 1057, 1061, 1062, 1065, 1066, 1067], "insert_befor": [31, 257], "insert_aft": [31, 257], "respect": [31, 257, 745], "direct": [31, 103, 110, 116, 227, 257], "far": [31, 257], "strongli": [31, 129, 134, 196, 239, 257, 271, 643, 752, 1061], "advis": [31, 175, 257], "structur": [31, 81, 85, 87, 147, 187, 198, 219, 257, 470, 643, 694, 742, 751, 856, 1061], "wherev": [31, 134, 239, 257, 271, 643, 752, 1061], "possibl": [31, 101, 134, 135, 158, 171, 197, 223, 225, 239, 257, 271, 439, 451, 536, 563, 643, 657, 675, 709, 714, 715, 742, 752, 1014, 1061], "simpl": [31, 127, 184, 257], "colx": [31, 57, 257, 745, 1069], "coli": [31, 257, 745, 1069], "after": [31, 57, 74, 93, 100, 101, 102, 106, 110, 112, 114, 115, 116, 147, 226, 256, 257, 366, 443, 468, 477, 547, 643, 716, 742, 751, 856, 931, 950, 1025, 1061], "befor": [31, 101, 112, 117, 120, 121, 129, 131, 147, 159, 174, 226, 257, 310, 311, 312, 443, 468, 469, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 547, 552, 621, 622, 643, 676, 679, 682, 716, 742, 751, 793, 794, 795, 856, 931, 944, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1025, 1031, 1061], "most": [31, 54, 90, 101, 102, 103, 112, 257, 452, 459, 469, 536, 564, 643, 936, 944, 1014, 1049, 1061, 1068], "mandatori": [31, 257], "return_dtyp": [31, 134, 257, 271, 441, 443, 572, 609, 643, 752, 931, 1061], "latter": [31, 147, 257, 751, 856, 1061], "appropri": [31, 117, 219, 257, 477, 643, 950, 1061], "pure": [31, 257, 1042, 1061], "actual": [31, 93, 125, 127, 198, 257, 979, 1061], "indic": [31, 100, 101, 102, 106, 110, 112, 122, 123, 127, 159, 160, 174, 198, 203, 217, 229, 257, 282, 344, 348, 355, 388, 391, 392, 394, 395, 396, 433, 447, 450, 486, 487, 488, 489, 490, 492, 493, 494, 497, 503, 554, 577, 578, 643, 676, 677, 682, 704, 742, 745, 832, 836, 843, 875, 879, 881, 882, 883, 884, 924, 970, 981, 1033, 1038, 1061, 1069], "calcul": [31, 67, 159, 210, 230, 257, 315, 363, 364, 365, 399, 411, 424, 439, 491, 506, 511, 563, 565, 572, 584, 621, 622, 625, 633, 643, 676, 710, 718, 742, 798, 851, 852, 853, 891, 902, 915, 964, 984, 988, 1050, 1061], "individu": [31, 48, 125, 160, 219, 257, 271, 520, 643, 677, 742, 783, 998, 1061], "gridlin": [31, 257], "zoom": [31, 257], "level": [31, 35, 48, 112, 114, 115, 116, 125, 134, 153, 184, 257, 372, 643, 678, 685, 742], "freez": [31, 257], "pane": [31, 257], "top": [31, 135, 223, 257, 657, 714, 742], "index": [31, 91, 95, 98, 119, 133, 151, 159, 160, 165, 170, 171, 174, 188, 194, 196, 197, 208, 219, 221, 229, 235, 257, 265, 279, 280, 281, 283, 344, 406, 407, 415, 429, 433, 434, 486, 487, 488, 489, 490, 492, 493, 494, 497, 507, 519, 533, 554, 643, 676, 677, 682, 708, 723, 742, 759, 760, 761, 762, 763, 832, 890, 897, 898, 906, 920, 924, 925, 942, 970, 973, 985, 997, 1011, 1033, 1061], "thu": [31, 147, 257, 584, 751, 856, 1061], "altern": [31, 257, 1042, 1061], "a2": [31, 68, 70, 257], "occur": [31, 73, 257, 410, 459, 477, 643, 661, 667, 669, 695, 707, 742, 901, 936, 950, 1061], "equival": [31, 90, 92, 93, 94, 96, 104, 108, 109, 159, 170, 184, 257, 264, 268, 361, 362, 376, 379, 380, 401, 440, 458, 460, 464, 465, 467, 471, 527, 550, 560, 567, 643, 676, 742, 890, 1005, 1021, 1023, 1024, 1061], "top_row": [31, 257], "top_col": [31, 257], "base": [31, 36, 143, 150, 159, 160, 257, 319, 327, 360, 363, 364, 365, 436, 437, 474, 528, 643, 665, 672, 676, 677, 742, 745, 803, 811, 849, 851, 852, 853, 867, 927, 928, 948, 1006, 1052, 1061, 1069], "scroll": [31, 257], "region": [31, 257], "initit": [31, 257], "5th": [31, 257], "properti": [31, 133, 138, 144, 152, 163, 200, 204, 232, 257, 662, 666, 700, 719, 742, 745, 1069], "readthedoc": [31, 257], "io": [31, 257, 663, 703, 742], "html": [31, 91, 133, 139, 257], "definit": [31, 123, 257, 399, 643, 891, 1061], "take": [31, 125, 131, 153, 159, 181, 187, 188, 213, 219, 257, 344, 509, 555, 592, 593, 596, 598, 607, 643, 676, 691, 713, 742, 832, 1034, 1052, 1061], "care": [31, 257, 271, 498, 643, 974, 1061], "rel": [31, 103, 104, 113, 120, 121, 257, 344, 363, 364, 365, 488, 490, 492, 494, 643, 832, 851, 852, 853, 1061], "working_with_conditional_format": [31, 257], "similarli": [31, 93, 159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "well": [31, 101, 102, 112, 188, 257, 386, 592, 643, 871, 1061], "adjac": [31, 257], "two": [31, 57, 92, 94, 96, 103, 153, 180, 181, 188, 222, 238, 239, 257, 265, 316, 321, 434, 474, 508, 554, 575, 576, 584, 586, 621, 622, 643, 690, 691, 725, 726, 742, 799, 805, 925, 948, 1061], "help": [31, 120, 121, 257, 669, 742], "appear": [31, 93, 120, 257, 562, 643, 1047, 1061], "working_with_sparklin": [31, 257], "inject": [31, 67, 257], "locat": [31, 147, 194, 221, 226, 257, 497, 643, 716, 742, 751, 856, 970, 973, 1033, 1061], "syntax": [31, 134, 184, 257, 513, 519, 520, 529, 707, 742, 991, 997, 998, 1007, 1061], "ensur": [31, 75, 103, 124, 125, 127, 158, 186, 196, 257, 386, 564, 643, 675, 686, 742, 745, 1042, 1049, 1061], "correctli": [31, 257], "microsoft": [31, 119, 257], "com": [31, 103, 257, 363, 364, 365, 519, 520, 521, 643, 851, 852, 853, 997, 998, 999, 1061], "u": [31, 38, 40, 55, 97, 257, 320, 321, 328, 353, 358, 539, 541, 592, 593, 594, 601, 745, 804, 805, 812, 841, 846, 1017, 1019], "offic": [31, 257], "f5ed2452": [31, 257], "2337": [31, 257], "4f71": [31, 257], "bed3": [31, 257], "c8ae6d2b276": [31, 257], "instanti": [31, 201, 233, 257, 701, 720, 742], "basic": [31, 257, 1069], "random": [31, 118, 123, 125, 127, 161, 199, 257, 381, 477, 496, 502, 643, 654, 865, 950, 969, 980, 1061], "date": [31, 38, 67, 101, 102, 103, 112, 117, 125, 140, 157, 159, 160, 172, 174, 229, 257, 320, 321, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 409, 486, 487, 488, 489, 490, 492, 493, 494, 539, 540, 558, 592, 593, 601, 608, 630, 643, 676, 677, 682, 742, 745, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 887, 900, 901, 940, 941, 973, 1017, 1018, 1044, 1061], "dtm": [31, 257, 321, 805], "2023": [31, 97, 119, 172, 257, 321, 592, 608, 745, 805], "num": [31, 222, 257, 386, 389, 547, 643, 871, 1061], "500": [31, 171, 228, 257, 669, 717, 742, 820, 822, 830, 837, 959, 960, 962, 1061], "val": [31, 195, 257, 298, 470, 558, 634, 643, 699, 742, 778], "10_000": [31, 257], "20_000": [31, 257], "30_000": [31, 257], "increas": [31, 67, 101, 110, 257, 312, 643, 795, 1061], "b4": [31, 257], "light": [31, 257], "twice": [31, 105, 257], "titl": [31, 52, 257], "explicit": [31, 112, 123, 257, 619], "integr": [31, 257, 1069], "multi_fram": [31, 257], "wb": [31, 257], "coordin": [31, 257], "advanc": [31, 257, 434, 925, 1069], "min_color": [31, 257], "76933c": [31, 257], "mid_color": [31, 257], "c4d79b": [31, 257], "max_color": [31, 257], "ebf1d": [31, 257], "data_bar_2010": [31, 257], "bar_color": [31, 257], "9bbb59": [31, 257], "bar_negative_color_sam": [31, 257], "bar_negative_border_color_sam": [31, 257], "000": [31, 257, 1069], "white": [31, 257], "w": [31, 54, 55, 159, 198, 257, 519, 521, 569, 571, 676, 742, 745, 997, 999, 1010], "get_worksheet_by_nam": [31, 257], "fmt_titl": [31, 257], "add_format": [31, 257], "4f6228": [31, 257], "font_siz": [31, 257], "12": [31, 67, 97, 124, 125, 159, 160, 174, 229, 257, 266, 310, 319, 321, 325, 329, 332, 339, 340, 341, 345, 346, 348, 355, 357, 359, 469, 476, 493, 501, 542, 579, 588, 591, 592, 594, 609, 643, 674, 676, 677, 678, 682, 685, 697, 707, 712, 742, 745, 752, 803, 805, 827, 836, 843, 968, 1020, 1061, 1069], "ital": [31, 257], "customis": [31, 257], "trend": [31, 257], "win_loss": [31, 257], "subtl": [31, 257], "tone": [31, 257], "hidden": [31, 257], "id": [31, 74, 224, 239, 257, 484, 529, 530, 562, 564, 643, 726, 957, 1047, 1061, 1069], "q1": [31, 257], "55": [31, 69, 257], "20": [31, 125, 147, 164, 165, 181, 187, 189, 193, 194, 257, 279, 280, 281, 315, 348, 355, 381, 385, 470, 486, 487, 489, 601, 608, 631, 643, 691, 694, 742, 745, 798, 843, 1061], "35": [31, 119, 257, 315, 643, 798, 1061], "q2": [31, 257], "30": [31, 147, 159, 164, 187, 193, 194, 215, 233, 257, 279, 280, 281, 315, 321, 326, 332, 340, 346, 347, 348, 355, 359, 381, 501, 592, 608, 631, 643, 676, 694, 720, 742, 745, 798, 805, 810, 828, 835, 836, 843, 1061, 1069], "15": [31, 119, 124, 134, 159, 160, 165, 257, 312, 315, 341, 348, 355, 470, 493, 588, 620, 631, 643, 676, 677, 742, 745, 795, 798, 836, 843, 1061], "60": [31, 147, 257, 349, 350, 493, 539, 643, 833, 837, 838, 1017], "q3": [31, 257], "40": [31, 147, 187, 257, 348, 355, 381, 542, 643, 694, 742, 816, 843, 1020], "80": [31, 257], "q4": [31, 257], "75": [31, 140, 257, 268, 467, 474, 486, 487, 488, 489, 492, 493, 494, 643, 797, 867, 948, 1061, 1069], "account": [31, 97, 103, 257, 344, 363, 364, 365, 643, 832, 851, 852, 853, 1061], "flavour": [31, 257], "integer_dtyp": [31, 201, 257, 701, 742, 745], "0_": [31, 257], "just": [31, 112, 180, 257, 690, 742], "unifi": [31, 257, 745], "multi": [31, 101, 102, 257, 366, 519, 610, 614, 643, 997], "2_color_scal": [31, 257], "95b3d7": [31, 257], "ffffff": [31, 257], "standardis": [31, 257], "z": [31, 54, 74, 97, 123, 125, 145, 167, 169, 173, 180, 197, 198, 227, 257, 264, 266, 268, 298, 381, 408, 442, 467, 472, 480, 520, 539, 541, 551, 569, 571, 590, 611, 615, 620, 628, 643, 681, 690, 708, 742, 745, 778, 859, 998, 1017, 1019, 1061, 1068], "score": [31, 257], "conjunct": [31, 105, 257], "a123": [31, 257], "b345": [31, 257], "c567": [31, 257], "d789": [31, 257], "e101": [31, 257], "45": [31, 160, 257, 321, 348, 355, 493, 514, 520, 575, 576, 608, 631, 643, 677, 742, 745, 805, 836, 843, 992, 998, 1069], "85": [31, 257, 1069], "font": [31, 257], "consola": [31, 257], "standard": [31, 119, 210, 219, 257, 332, 364, 492, 506, 511, 523, 625, 643, 710, 742, 816, 852, 984, 988, 1001, 1061, 1069], "stdev": [31, 257], "ipccompress": [32, 257], "arrow": [32, 47, 76, 90, 91, 103, 106, 114, 171, 197, 198, 214, 216, 257, 742, 1037, 1042, 1061], "ipc": [32, 106, 107, 114, 117, 257, 654], "feather": [32, 106, 114, 257, 654], "lz4": [32, 35, 47, 48, 257, 742], "zstd": [32, 35, 47, 48, 257, 742], "pretti": [33, 257], "row_ori": [33, 257], "iobas": [33, 34, 108, 109, 257, 456, 663, 697, 703, 742], "serial": [33, 34, 257, 663, 742], "represent": [33, 34, 218, 257, 298, 325, 329, 332, 333, 335, 337, 339, 342, 345, 346, 349, 356, 357, 359, 558, 643, 667, 684, 742, 778, 779, 809, 813, 815, 816, 820, 822, 825, 827, 830, 833, 834, 837, 844, 845, 847, 1040, 1044, 1061], "orient": [33, 68, 70, 94, 96, 257, 742], "slower": [33, 94, 96, 134, 158, 186, 229, 239, 257, 271, 572, 643, 675, 726, 742, 752, 1061], "common": [33, 67, 73, 74, 257, 442, 592, 593, 643, 648, 661, 667, 669, 695, 707, 742], "write_ndjson": [33, 257], "bit_set": [33, 257, 703, 742], "newlin": [34, 109, 115, 257], "parquetcompress": [35, 257], "compression_level": [35, 48, 257, 742], "statist": [35, 48, 101, 102, 110, 116, 140, 257, 364, 365, 399, 486, 487, 488, 489, 490, 491, 492, 493, 494, 506, 643, 742, 797, 852, 853, 891, 964, 984, 1061], "row_group_s": [35, 48, 257, 742], "use_pyarrow": [35, 48, 101, 106, 110, 257, 742, 1041, 1042, 1061], "pyarrow_opt": [35, 104, 110, 113, 257], "parquet": [35, 48, 110, 111, 116, 257, 654, 742], "gzip": [35, 48, 257, 742], "lzo": [35, 48, 257, 742], "brotli": [35, 48, 257, 742], "choos": [35, 47, 48, 188, 257, 742], "good": [35, 47, 48, 171, 257, 742], "perform": [35, 47, 48, 67, 81, 91, 101, 102, 106, 110, 112, 114, 115, 116, 133, 134, 135, 158, 159, 160, 174, 191, 198, 223, 239, 257, 271, 468, 539, 540, 541, 643, 657, 676, 677, 682, 709, 714, 723, 742, 752, 1017, 1018, 1019, 1061], "fast": [35, 47, 48, 126, 128, 257, 369, 498, 643, 742, 857, 974, 1061, 1069], "decompress": [35, 47, 48, 257, 742], "backward": [35, 48, 149, 174, 257, 288, 341, 371, 643, 671, 682, 742, 829, 859, 1061], "guarante": [35, 48, 91, 101, 102, 225, 257, 669, 715, 742], "deal": [35, 48, 171, 257, 347, 355, 477, 539, 541, 594, 643, 742, 835, 843, 950, 1017, 1019, 1061], "older": [35, 48, 257, 742], "reader": [35, 48, 99, 101, 102, 106, 110, 257, 655, 742], "higher": [35, 48, 190, 249, 257, 475, 490, 618, 643, 696, 736, 742, 949, 963, 1061], "mean": [35, 48, 101, 102, 106, 110, 112, 140, 149, 158, 159, 160, 174, 188, 229, 237, 257, 344, 348, 355, 368, 371, 486, 487, 488, 489, 490, 492, 493, 494, 506, 519, 579, 592, 634, 643, 671, 675, 676, 677, 682, 686, 724, 742, 797, 832, 836, 843, 855, 859, 864, 960, 984, 997, 1061], "smaller": [35, 48, 145, 257, 669, 742, 850, 1061], "disk": [35, 47, 48, 106, 257, 707, 742], "11": [35, 48, 91, 119, 125, 160, 257, 266, 317, 318, 332, 340, 341, 344, 348, 355, 385, 469, 477, 493, 507, 547, 567, 581, 627, 632, 643, 661, 677, 678, 685, 695, 712, 742, 745, 752, 832, 836, 843, 958, 1061], "22": [35, 48, 124, 257, 325, 345, 348, 355, 357, 358, 486, 487, 489, 492, 493, 494, 539, 581, 643, 742, 745, 836, 843, 846, 1017, 1069], "comput": [35, 48, 73, 74, 78, 145, 158, 174, 220, 225, 237, 249, 257, 263, 273, 274, 275, 276, 277, 278, 284, 285, 286, 299, 304, 305, 307, 308, 309, 310, 311, 316, 360, 367, 399, 420, 421, 422, 424, 425, 426, 427, 436, 437, 438, 459, 468, 469, 473, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 503, 504, 505, 506, 510, 556, 557, 568, 569, 570, 571, 575, 576, 577, 584, 586, 589, 596, 610, 614, 621, 622, 627, 634, 643, 675, 679, 681, 682, 715, 722, 724, 736, 742, 747, 753, 754, 755, 756, 757, 758, 764, 765, 766, 781, 789, 790, 791, 792, 793, 794, 799, 849, 850, 854, 891, 911, 912, 913, 915, 916, 917, 918, 927, 928, 929, 936, 944, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 981, 982, 983, 984, 987, 1035, 1036, 1043, 1061], "512": [35, 257, 471, 643, 944, 1061], "implement": [35, 91, 133, 134, 239, 257, 271, 398, 472, 551, 572, 643, 726, 752, 972, 973, 1061], "v": [35, 54, 55, 145, 257, 497, 643, 970, 1061], "At": [35, 257], "moment": [35, 139, 257, 399, 506, 643, 891, 984, 1061], "write_t": [35, 257], "partition_col": [35, 103, 257], "write_to_dataset": [35, 257], "similar": [35, 129, 153, 174, 257, 351, 354, 468, 484, 634, 643, 682, 742, 839, 842, 957, 1061], "spark": [35, 257], "partit": [35, 103, 104, 110, 113, 116, 117, 172, 186, 257], "we": [35, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 159, 160, 174, 229, 257, 271, 344, 348, 355, 412, 441, 486, 487, 488, 489, 490, 492, 493, 494, 521, 528, 608, 634, 643, 663, 676, 677, 682, 686, 697, 742, 752, 832, 836, 843, 867, 903, 999, 1006, 1061], "use_pyarrow_write_to_dataset": [35, 257], "first": [35, 67, 101, 102, 105, 112, 115, 124, 134, 157, 159, 162, 174, 176, 183, 187, 188, 212, 217, 218, 224, 225, 229, 242, 257, 281, 283, 312, 341, 344, 348, 382, 389, 403, 412, 415, 416, 434, 443, 470, 497, 509, 519, 522, 523, 529, 530, 580, 587, 592, 599, 603, 634, 643, 661, 676, 678, 682, 685, 694, 715, 722, 729, 742, 745, 761, 795, 797, 829, 832, 836, 866, 876, 893, 903, 906, 907, 925, 931, 970, 997, 999, 1000, 1001, 1007, 1008, 1032, 1040, 1061, 1069], "watermark": [35, 257], "partitioned_object": [35, 257], "calendar": [37, 38, 159, 160, 174, 229, 257, 332, 344, 348, 355, 359, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 816, 832, 836, 843, 847], "time_unit": [38, 40, 97, 320, 321, 328, 353, 358, 541, 592, 593, 594, 601, 745, 804, 805, 812, 841, 846, 1019], "time_zon": [38, 97, 322, 347, 355, 541, 592, 593, 594, 745, 803, 806, 811, 835, 843, 1019], "timezon": [38, 745], "m": [38, 40, 55, 173, 257, 319, 320, 321, 327, 328, 351, 353, 354, 358, 519, 539, 540, 541, 544, 592, 593, 594, 601, 681, 742, 745, 803, 804, 805, 811, 812, 839, 841, 842, 846, 997, 1017, 1018, 1019, 1022], "zone": [38, 319, 322, 347, 541, 592, 593, 594, 745, 803, 806, 835, 1019], "zoneinfo": [38, 745], "run": [38, 47, 48, 73, 126, 128, 134, 158, 175, 188, 202, 225, 234, 239, 257, 271, 312, 412, 483, 484, 623, 643, 661, 667, 669, 675, 686, 690, 695, 702, 707, 715, 721, 742, 745, 752, 795, 903, 956, 957, 1061, 1068, 1069], "available_timezon": [38, 745], "check": [38, 101, 102, 112, 120, 121, 154, 159, 160, 168, 170, 173, 257, 267, 269, 289, 292, 293, 386, 390, 409, 513, 517, 537, 643, 676, 677, 681, 686, 742, 749, 750, 768, 771, 772, 872, 874, 877, 878, 880, 885, 886, 887, 889, 890, 900, 971, 991, 995, 1015, 1061], "128": [39, 69, 944, 1061], "bit": [39, 41, 42, 43, 44, 45, 46, 61, 62, 63, 64, 479, 513, 643, 952, 991, 1061], "neg": [39, 118, 159, 160, 162, 176, 205, 206, 208, 212, 257, 428, 429, 470, 499, 500, 507, 533, 643, 676, 677, 705, 706, 708, 723, 742, 866, 893, 919, 920, 976, 977, 985, 1011, 1032, 1061], "scale": [39, 145, 257, 470, 542, 643, 850, 1020, 1061], "experiment": [39, 117, 201, 227, 228, 233, 257, 312, 348, 486, 487, 488, 489, 490, 492, 493, 494, 643, 701, 717, 720, 742, 780, 795, 836, 867, 948, 1061], "progress": 39, "expect": [39, 82, 84, 89, 271, 572, 608, 643, 684, 686, 742], "32": [41, 44, 62, 69, 160, 170, 257, 460, 501, 643, 677, 742, 799, 833, 944, 963, 1061], "sign": [43, 44, 45, 46, 344, 479, 547, 643, 832, 880, 952, 1025, 1061], "maintain_ord": [47, 48, 135, 158, 186, 188, 223, 225, 229, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 265, 271, 287, 435, 554, 561, 585, 643, 657, 661, 667, 669, 675, 695, 707, 709, 714, 715, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 767, 926, 1046, 1061], "type_coercion": [47, 48, 73, 661, 667, 669, 695, 707, 742], "predicate_pushdown": [47, 48, 73, 661, 667, 669, 686, 695, 707, 742], "projection_pushdown": [47, 48, 73, 661, 667, 669, 686, 695, 707, 742], "simplify_express": [47, 48, 73, 661, 667, 669, 695, 707, 742], "no_optim": [47, 48, 73, 661, 669, 686, 695, 742], "slice_pushdown": [47, 48, 73, 661, 667, 669, 686, 695, 707, 742], "persist": [47, 48, 57, 742], "larger": [47, 48, 584, 742], "ram": [47, 48, 742], "maintain": [47, 48, 135, 223, 257, 287, 435, 497, 561, 643, 657, 709, 714, 742, 767, 926, 970, 1046, 1061], "slightli": [47, 48, 742], "faster": [47, 48, 147, 219, 227, 257, 271, 485, 527, 562, 643, 742, 751, 752, 856, 958, 1005, 1061], "coercion": [47, 48, 73, 480, 643, 661, 667, 669, 695, 707, 742], "optim": [47, 48, 73, 110, 112, 114, 115, 116, 171, 175, 187, 191, 197, 225, 257, 661, 667, 669, 686, 695, 707, 715, 723, 726, 742, 781, 1061], "predic": [47, 48, 73, 112, 114, 115, 116, 117, 150, 170, 196, 257, 372, 566, 599, 643, 661, 667, 669, 672, 686, 695, 698, 707, 723, 742, 860, 972, 973, 1061], "pushdown": [47, 48, 73, 661, 667, 669, 686, 695, 698, 707, 723, 742, 972, 973, 1061], "project": [47, 48, 73, 112, 114, 115, 116, 271, 508, 509, 643, 661, 667, 669, 686, 695, 698, 703, 707, 742], "turn": [47, 48, 73, 101, 102, 112, 545, 564, 643, 661, 667, 669, 686, 695, 742, 1023], "off": [47, 48, 73, 101, 102, 112, 564, 643, 661, 667, 669, 686, 695, 742], "certain": [47, 48, 80, 104, 113, 165, 229, 257, 581, 661, 695, 742, 1061], "slice": [47, 48, 68, 73, 145, 162, 172, 212, 257, 416, 432, 485, 486, 487, 488, 489, 490, 492, 493, 494, 643, 661, 667, 669, 686, 695, 707, 742, 850, 866, 907, 923, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1032, 1061], "lf": [47, 48, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 722, 723, 742, 1068, 1069], "scan_csv": [47, 48, 101, 102, 742], "my_larger_than_ram_fil": [47, 48, 742], "data_pagesize_limit": [48, 742], "reduc": [48, 101, 102, 110, 112, 114, 115, 116, 244, 245, 247, 250, 501, 599, 643, 731, 732, 734, 737, 742, 933, 947, 978, 1031, 1061], "pressur": [48, 110, 115, 116, 501, 643, 742, 978, 1061], "improv": [48, 106, 114, 742], "speed": [48, 271, 643, 742], "minimum": [48, 123, 124, 125, 127, 153, 182, 257, 363, 364, 365, 457, 463, 477, 614, 615, 643, 692, 742, 785, 824, 851, 852, 853, 941, 946, 950, 1061, 1069], "limit": [48, 103, 112, 149, 257, 288, 301, 302, 303, 371, 377, 643, 671, 678, 742, 785, 786, 787, 859, 1061], "page": [48, 106, 110, 114, 116, 257, 643, 654, 742, 1061], "arrai": [49, 90, 94, 101, 102, 110, 145, 214, 219, 220, 257, 284, 285, 286, 287, 301, 302, 303, 307, 308, 309, 310, 311, 408, 419, 420, 421, 422, 423, 430, 431, 437, 486, 487, 489, 493, 498, 596, 643, 742, 764, 765, 766, 767, 785, 786, 787, 791, 792, 793, 794, 799, 850, 899, 910, 911, 912, 913, 914, 921, 922, 928, 929, 959, 960, 962, 965, 966, 967, 974, 979, 1037, 1042, 1043, 1051, 1061], "integer_list": 49, "float_list": 49, "wrap": [51, 97, 386, 643], "arbitrari": [51, 125, 745], "python": [51, 91, 101, 102, 119, 133, 134, 171, 197, 198, 216, 239, 257, 271, 321, 441, 521, 572, 592, 593, 631, 632, 634, 643, 648, 726, 752, 805, 817, 818, 819, 824, 999, 1041, 1061], "queri": [52, 54, 73, 103, 106, 112, 114, 115, 116, 147, 175, 187, 257, 271, 441, 443, 523, 643, 661, 667, 669, 678, 685, 695, 707, 723, 726, 742, 751, 752, 856, 1001, 1061, 1068], "eager": [52, 53, 54, 55, 56, 57, 159, 227, 257, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 353, 355, 356, 357, 358, 359, 486, 487, 489, 492, 493, 494, 574, 578, 592, 593, 601, 605, 606, 617, 620, 626, 631, 632, 635, 642, 643, 676, 742, 803, 804, 806, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 843, 844, 845, 846, 847, 1068], "against": [52, 412, 742, 903, 1068, 1069], "eagerli": [52, 434], "unset": [52, 124, 347, 434, 835], "init": [52, 131], "eager_execut": [52, 1068], "itself": [52, 123, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 621, 622, 643, 684, 742, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1061, 1068], "impact": [52, 159, 257, 676, 742, 1068], "declar": [52, 90, 92, 93, 94, 96, 108, 109, 257, 742], "godfath": 52, "1972": 52, "6_000_000": 52, "134_821_952": 52, "dark": 52, "knight": 52, "2008": 52, "185_000_000": 52, "533_316_061": 52, "schindler": 52, "1993": 52, "22_000_000": 52, "96_067_179": 52, "pulp": 52, "fiction": 52, "1994": 52, "8_000_000": 52, "107_930_000": 52, "shawshank": 52, "redempt": 52, "25_000_000": 52, "28_341_469": 52, "release_year": 52, "budget": 52, "gross": 52, "imdb_scor": 52, "ctx": [52, 53, 54, 55, 56, 57], "film": 52, "1990": 52, "BY": [52, 54], "desc": [52, 54], "AS": [52, 624, 1068], "decad": 52, "total_gross": 52, "n_film": 52, "2000": [52, 331, 333, 340, 341, 344, 745, 815, 828, 829, 832], "533316061": 52, "232338648": 52, "1970": [52, 117], "134821952": 52, "register_glob": [53, 55, 57, 1068], "register_mani": [53, 54, 57], "unregist": [53, 54, 55, 1068], "frame_data": [53, 56], "execut": [53, 54, 56, 74, 175, 257, 295, 412, 643, 658, 686, 695, 742, 903, 1068], "collect": [53, 54, 57, 70, 73, 112, 113, 117, 125, 127, 141, 143, 175, 214, 225, 226, 257, 271, 295, 366, 390, 582, 597, 601, 626, 643, 657, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 745, 878, 1061, 1068, 1069], "global": [54, 58, 75, 118, 125, 130, 219, 257, 443, 643, 777, 779, 1068], "scope": [54, 57, 131, 653, 745, 1068], "automat": [54, 57, 90, 92, 93, 94, 96, 97, 101, 102, 103, 108, 109, 112, 125, 127, 129, 201, 233, 257, 295, 443, 526, 532, 538, 643, 701, 720, 742, 931, 1004, 1010, 1016, 1061, 1068], "map": [54, 55, 92, 93, 101, 102, 106, 107, 110, 111, 112, 114, 134, 144, 152, 171, 192, 196, 197, 198, 215, 257, 348, 355, 442, 443, 468, 484, 564, 572, 643, 666, 698, 742, 745, 797, 836, 843, 931, 957, 1061, 1068], "recent": [54, 469, 643, 944, 1061, 1068], "df1": [54, 56, 57, 58, 67, 74, 75, 120, 147, 154, 181, 220, 231, 257, 691, 742], "x": [54, 55, 67, 74, 91, 97, 101, 102, 103, 112, 123, 125, 133, 145, 164, 167, 169, 173, 180, 188, 197, 198, 227, 257, 264, 266, 267, 268, 269, 271, 314, 361, 362, 376, 379, 380, 381, 401, 408, 417, 438, 440, 441, 442, 458, 460, 464, 465, 467, 471, 472, 480, 484, 503, 506, 535, 550, 551, 558, 560, 567, 569, 571, 572, 575, 576, 587, 588, 590, 599, 608, 609, 611, 615, 619, 628, 643, 681, 686, 690, 708, 742, 745, 752, 779, 859, 889, 981, 984, 1013, 1044, 1061, 1068], "df2": [54, 56, 57, 58, 67, 74, 75, 120, 147, 154, 220, 231, 257], "join": [54, 58, 67, 73, 74, 75, 174, 228, 257, 385, 468, 643, 661, 667, 669, 682, 695, 707, 717, 722, 742], "named_fram": [55, 1068], "lf1": [55, 57], "o": [55, 106, 114, 294, 312, 518, 559, 643, 773, 795, 996, 1016, 1045, 1061], "lf2": [55, 57, 742], "p": [55, 69, 187, 257, 470, 626, 643, 694, 742], "q": [55, 198, 257, 626], "r": [55, 470, 514, 518, 519, 520, 521, 529, 643, 745, 992, 996, 997, 998, 999, 1007], "lf3": [55, 742], "lf4": [55, 742], "either": [55, 125, 160, 170, 175, 178, 186, 196, 211, 219, 257, 474, 539, 568, 577, 626, 643, 677, 684, 742, 745, 948, 1017, 1061], "tbl1": [55, 57], "tbl2": [55, 57], "tbl3": 55, "tbl4": 55, "statement": [56, 634], "hello_world": 56, "baz": [56, 165, 166, 188, 226, 257, 521, 534, 536, 680, 716, 742, 745, 999, 1014], "hello_data": 56, "foo_bar": [56, 608], "registr": [57, 654], "lifetim": [57, 131, 653], "context": [57, 58, 129, 184, 240, 257, 265, 271, 295, 306, 372, 412, 451, 508, 509, 564, 572, 585, 598, 601, 607, 620, 623, 642, 643, 653, 654, 722, 727, 742, 903, 1068], "manag": [57, 58, 653, 654, 1068], "often": [57, 131, 159, 160, 257, 410, 480, 643, 676, 677, 742, 901], "want": [57, 93, 134, 147, 184, 257, 271, 301, 302, 303, 355, 372, 441, 443, 484, 486, 487, 488, 489, 490, 492, 493, 494, 587, 599, 617, 620, 635, 643, 661, 678, 685, 742, 745, 751, 752, 785, 786, 787, 843, 856, 957, 1042, 1061], "df0": [57, 181, 257, 691, 742], "exit": [57, 58, 131, 1068], "construct": [57, 90, 92, 93, 94, 95, 96, 257, 378, 443, 617, 620, 635, 643, 663, 674, 697, 742, 777, 1061], "through": [57, 91, 745, 1061], "tbl0": 57, "remain": [57, 101, 102, 112, 145, 257, 535, 536, 686, 742, 850, 1013, 1014, 1061], "text": [57, 527, 529, 530, 624, 1005, 1069], "misc": 57, "testing1234": 57, "test1": 57, "test2": 57, "test3": 57, "temporarili": [58, 129, 131, 159, 160, 257, 676, 677, 742], "cach": [58, 73, 75, 106, 112, 114, 116, 120, 121, 130, 443, 486, 487, 488, 489, 490, 492, 493, 494, 539, 540, 541, 544, 643, 653, 661, 667, 669, 695, 707, 742, 777, 1017, 1018, 1019, 1022], "categori": [58, 75, 217, 257, 297, 298, 313, 474, 643, 776, 778, 796, 867, 948, 1061], "until": [58, 175, 257, 592], "finish": [58, 78, 147, 257, 751, 856, 1061], "invalid": [58, 101, 102, 112, 522, 523, 528, 560, 592, 593, 643, 1000, 1001, 1006], "outermost": 58, "color": [58, 75, 239, 289, 291, 292, 293, 726], "red": [58, 75, 239, 726], "green": [58, 75, 239, 726], "blue": [58, 75, 289, 291, 292, 293], "orang": [58, 75, 138, 240, 241, 243, 244, 245, 247, 249, 250, 257, 727, 728, 730, 731, 732, 734, 736, 737], "uint8": [58, 75, 122, 124, 218, 219, 227, 257, 310, 311, 443, 552, 567, 643, 745, 793, 794, 1031, 1061, 1069], "yellow": [58, 75, 289, 291, 292, 293], "black": [58, 75, 134, 257, 289, 291, 292, 293], "succe": [58, 101, 102, 112], "df_join": [58, 75], "cat": [58, 75, 218, 257, 313, 474, 513, 543, 546, 558, 583, 639, 643, 745, 796, 867, 948, 991, 1021, 1024, 1057, 1061], "u8": [58, 75, 217, 218, 227, 257, 443, 567, 643, 745, 1038, 1061, 1069], "composit": [59, 124, 1069], "schemadict": [59, 90, 92, 93, 94, 95, 96, 112, 200, 257, 626, 686, 700, 726, 742], "struct_seri": [59, 726], "dai": [60, 159, 160, 172, 174, 229, 257, 328, 332, 339, 340, 341, 344, 345, 346, 348, 353, 355, 356, 357, 359, 486, 487, 488, 489, 490, 492, 493, 494, 591, 592, 594, 595, 643, 676, 677, 682, 742, 745, 828, 829, 832, 833, 836, 843, 845], "static": [65, 726], "utf": 66, "frametyp": [67, 1068], "joinstrategi": [67, 173, 257, 681, 742], "outer": [67, 74, 173, 257, 681, 742], "descend": [67, 135, 203, 209, 223, 257, 281, 430, 477, 498, 508, 509, 577, 643, 657, 704, 709, 714, 742, 761, 886, 921, 950, 974, 986, 1061], "fill": [67, 74, 136, 148, 149, 206, 227, 257, 288, 308, 311, 370, 371, 377, 385, 486, 487, 489, 493, 500, 525, 531, 547, 600, 617, 620, 635, 643, 670, 671, 706, 722, 742, 858, 859, 870, 942, 959, 960, 962, 965, 966, 967, 977, 1003, 1009, 1025, 1061], "sort": [67, 68, 120, 124, 135, 159, 160, 174, 181, 187, 188, 203, 223, 229, 242, 251, 257, 281, 298, 372, 468, 498, 509, 564, 566, 577, 643, 657, 667, 676, 677, 682, 691, 694, 695, 704, 707, 714, 729, 738, 742, 745, 761, 778, 886, 974, 1046, 1049, 1061, 1069], "origin": [67, 101, 102, 225, 257, 347, 398, 443, 468, 479, 480, 481, 514, 519, 520, 523, 525, 531, 547, 575, 576, 643, 715, 742, 796, 835, 931, 948, 954, 992, 997, 998, 1001, 1003, 1009, 1025, 1061], "In": [67, 104, 113, 116, 125, 127, 131, 134, 145, 147, 159, 160, 184, 219, 257, 271, 592, 643, 676, 677, 742, 751, 850, 856, 951, 1061], "duplic": [67, 79, 167, 173, 174, 225, 257, 266, 387, 398, 474, 643, 681, 682, 715, 742, 873, 948, 1061], "behaviour": [67, 74, 143, 257, 513, 519, 520, 529, 560, 643, 665, 742, 991, 997, 998, 1007], "suitabl": [67, 74, 123, 134, 257, 271, 497, 643, 752, 970, 1061, 1069], "get": [67, 98, 107, 111, 117, 129, 135, 138, 144, 152, 155, 156, 159, 160, 162, 163, 167, 169, 170, 176, 183, 196, 200, 204, 208, 212, 223, 232, 242, 251, 257, 265, 279, 280, 281, 283, 287, 297, 307, 308, 309, 310, 311, 328, 344, 373, 382, 387, 389, 397, 400, 403, 414, 418, 419, 435, 444, 445, 446, 451, 453, 457, 462, 463, 475, 483, 507, 511, 524, 527, 552, 553, 561, 565, 592, 598, 603, 607, 610, 611, 612, 613, 614, 615, 625, 629, 633, 643, 657, 662, 666, 673, 676, 677, 678, 683, 685, 700, 708, 712, 714, 719, 729, 738, 742, 759, 760, 761, 762, 763, 767, 776, 783, 791, 792, 793, 794, 812, 832, 863, 866, 871, 873, 876, 888, 893, 905, 909, 910, 926, 932, 934, 935, 937, 940, 941, 945, 946, 949, 956, 985, 988, 1002, 1005, 1032, 1037, 1038, 1046, 1050, 1051, 1061], "speedup": [67, 134, 171, 257, 271, 643, 752, 1061], "receiv": [67, 112, 134, 187, 257, 470, 643, 694, 742, 1069], "now": [67, 160, 257, 295, 643, 677, 742, 1019], "One": [67, 140, 184, 188, 257, 268, 467, 624, 643, 745, 797, 1061], "whose": [67, 174, 188, 257, 366, 597, 643, 682, 742], "uniqu": [67, 122, 123, 124, 127, 169, 173, 184, 198, 248, 257, 272, 283, 313, 389, 397, 461, 474, 539, 540, 541, 544, 562, 564, 573, 616, 643, 681, 735, 742, 763, 796, 797, 876, 888, 938, 948, 1017, 1018, 1019, 1022, 1047, 1049, 1061], "post": 67, "constrain": [67, 143, 257, 665, 742], "newli": 67, "boolean": [67, 135, 150, 153, 175, 209, 223, 257, 267, 268, 269, 289, 292, 293, 331, 372, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 404, 405, 409, 467, 509, 522, 566, 567, 577, 578, 626, 634, 643, 657, 660, 672, 684, 709, 714, 742, 745, 749, 750, 762, 768, 770, 815, 860, 871, 872, 873, 875, 876, 878, 879, 881, 882, 883, 884, 888, 895, 896, 900, 945, 946, 972, 991, 1042, 1052, 1061], "know": [67, 434, 527, 1005, 1042, 1051, 1061], "2022": [67, 140, 157, 159, 160, 174, 229, 257, 321, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 539, 592, 593, 595, 601, 643, 676, 677, 682, 742, 745, 805, 816, 832, 836, 843, 1017], "y": [67, 74, 91, 97, 123, 125, 133, 145, 167, 169, 173, 180, 188, 197, 198, 227, 257, 264, 266, 267, 268, 269, 351, 354, 361, 362, 379, 380, 401, 408, 417, 440, 442, 464, 465, 467, 472, 480, 484, 539, 540, 541, 551, 560, 567, 569, 571, 575, 576, 590, 608, 611, 615, 628, 643, 681, 690, 708, 742, 745, 779, 839, 842, 1017, 1018, 1019], "df3": [67, 257], "set_tbl_format": 67, "09": [67, 125, 160, 257, 321, 332, 340, 341, 542, 632, 677, 742, 809, 1020], "01": [67, 125, 140, 157, 159, 160, 229, 257, 319, 320, 321, 322, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 359, 486, 487, 489, 492, 493, 494, 539, 540, 541, 544, 592, 593, 595, 643, 676, 677, 742, 745, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 1017, 1018, 1019, 1022], "02": [67, 157, 159, 160, 174, 229, 257, 320, 321, 328, 329, 330, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 353, 355, 356, 358, 486, 487, 488, 489, 490, 492, 493, 494, 495, 539, 540, 541, 544, 592, 593, 595, 643, 676, 677, 682, 742, 745, 804, 805, 807, 808, 812, 813, 814, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 925, 1017, 1018, 1019, 1022], "03": [67, 97, 159, 160, 229, 257, 320, 321, 322, 326, 328, 330, 338, 339, 340, 341, 347, 348, 349, 350, 351, 353, 354, 355, 356, 358, 486, 487, 489, 492, 493, 494, 540, 544, 592, 593, 643, 676, 677, 742, 804, 805, 806, 809, 810, 812, 813, 814, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 841, 842, 844, 845, 846, 1018, 1022], "af1": 67, "af2": 67, "af3": 67, "keep": [67, 101, 102, 112, 225, 228, 229, 257, 398, 443, 580, 643, 715, 717, 742, 931, 1061], "easili": [67, 201, 233, 237, 257, 581, 626, 701, 720, 724, 742], "dot": [67, 643, 707, 742, 1061], "product": [67, 139, 257, 310, 316, 572, 643, 793, 799, 1061], "fill_nul": [67, 148, 257, 643, 670, 722, 742, 1061], "sum_horizont": [67, 627], "167": 67, "47": 67, "callabl": [68, 69, 70, 71, 112, 134, 153, 187, 239, 257, 271, 434, 441, 442, 470, 485, 572, 587, 588, 599, 609, 619, 643, 686, 694, 726, 742, 752, 925, 958, 1061], "decor": [68, 69, 70, 71, 125, 127, 134, 257, 271, 643, 653, 654, 752, 1061], "under": [68, 69, 70, 71, 636, 637, 639, 644, 645, 649, 650, 651, 1053, 1055, 1057, 1062, 1065, 1066, 1067], "access": [68, 69, 70, 71, 133, 171, 196, 197, 257, 443, 521, 643, 722, 742, 999, 1069], "by_first_letter_of_column_nam": 68, "f": [68, 102, 140, 157, 172, 214, 224, 227, 257, 264, 271, 434, 501, 518, 539, 541, 572, 582, 609, 643, 925, 996, 1017, 1019], "fromkei": [68, 70], "by_first_letter_of_column_valu": 68, "starts_with": [68, 289, 292, 513, 517, 745, 995], "to_seri": [68, 155, 257, 539, 578, 620, 1017], "xx": [68, 70, 124, 127, 745], "xy": [68, 70], "yy": [68, 70, 124, 127, 745], "yz": [68, 70], "b1": [68, 70], "b2": [68, 70], "pow_n": 69, "powersofn": 69, "next": [69, 159, 160, 174, 229, 257, 288, 344, 348, 355, 477, 486, 487, 488, 489, 490, 492, 493, 494, 592, 643, 676, 677, 682, 742, 832, 836, 843, 950, 1061], "ceil": [69, 643, 1061], "previou": [69, 131, 469, 472, 549, 551, 643, 751, 944, 1061], "floor": [69, 643, 1061], "nearest": [69, 174, 190, 249, 257, 300, 375, 385, 475, 490, 618, 643, 682, 696, 736, 742, 782, 862, 870, 949, 963, 1061], "24": [69, 119, 134, 145, 159, 160, 174, 229, 257, 310, 312, 325, 330, 344, 345, 348, 355, 357, 460, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 795, 814, 832, 836, 843, 890, 1061], "001": [69, 333, 334, 336, 343, 595, 821, 823, 831], "next_pow2": 69, "prev_pow2": 69, "nearest_pow2": 69, "split_by_column_dtyp": 70, "collect_al": 70, "31": [71, 125, 321, 325, 326, 339, 340, 344, 356, 539, 591, 592, 594, 601, 608, 745, 803, 805, 809, 810, 828, 832, 1017, 1069], "42": [71, 160, 161, 181, 257, 677, 691, 742, 865, 1061], "961": 71, "1764": 71, "4160": 71, "build": [72, 91, 745, 1069], "wa": 72, "compil": [72, 406, 407, 897, 898], "gate": 72, "info": [72, 104, 113, 119], "otherwis": [72, 124, 129, 134, 181, 198, 201, 239, 257, 271, 290, 301, 302, 303, 313, 347, 355, 363, 364, 365, 434, 470, 474, 479, 513, 515, 568, 570, 572, 589, 610, 614, 627, 634, 643, 691, 701, 726, 742, 752, 769, 785, 786, 787, 796, 835, 843, 851, 852, 853, 925, 948, 952, 972, 973, 991, 993, 1061], "depend": [72, 119, 271, 406, 407, 451, 474, 477, 572, 598, 601, 607, 643, 897, 898, 948, 950, 1061, 1069], "host": [72, 101, 106, 110, 114, 116], "git": 72, "lazy_fram": 73, "comm_subplan_elim": [73, 661, 667, 669, 695, 707, 742], "comm_subexpr_elim": [73, 295, 643, 661, 667, 669, 695, 707, 742], "graph": [73, 175, 257, 679, 722, 742], "parallel": [73, 74, 99, 103, 110, 116, 159, 174, 175, 187, 202, 234, 257, 312, 412, 634, 643, 654, 676, 681, 682, 702, 721, 726, 742, 795, 903, 1061], "threadpool": [73, 129], "Will": [73, 661, 667, 669, 695, 707, 742, 1061], "try": [73, 85, 87, 101, 102, 105, 106, 110, 112, 114, 116, 661, 667, 669, 695, 707, 742], "branch": [73, 661, 667, 669, 695, 707, 742], "subplan": [73, 661, 667, 669, 695, 707, 742], "union": [73, 74, 427, 661, 667, 669, 695, 707, 742, 745, 918], "subexpress": [73, 661, 667, 669, 695, 707, 742], "reus": [73, 661, 667, 669, 695, 707, 742], "part": [73, 90, 125, 520, 535, 536, 661, 667, 669, 695, 707, 722, 742, 998, 1013, 1014], "fashion": [73, 173, 257, 661, 667, 669, 695, 707, 742], "item": [74, 102, 196, 199, 257, 368, 409, 415, 417, 496, 536, 643, 855, 900, 906, 908, 969, 1014, 1061], "iter": [74, 126, 128, 135, 158, 159, 160, 171, 172, 196, 197, 198, 201, 202, 203, 209, 223, 224, 233, 234, 236, 237, 257, 312, 468, 509, 568, 569, 570, 571, 577, 580, 581, 582, 583, 589, 590, 610, 611, 614, 615, 623, 626, 627, 628, 643, 657, 675, 676, 677, 701, 702, 704, 709, 714, 720, 721, 724, 742, 795, 1061, 1069], "polarstyp": 74, "concatmethod": 74, "vertic": [74, 147, 227, 231, 257, 512, 990], "rechunk": [74, 90, 95, 101, 102, 106, 110, 112, 114, 115, 116, 147, 257, 643, 751, 783, 856, 937, 1061], "combin": [74, 85, 87, 159, 160, 161, 174, 229, 257, 268, 282, 344, 355, 467, 526, 532, 538, 592, 643, 676, 677, 682, 707, 742, 832, 836, 843, 1004, 1010, 1016], "concaten": [74, 153, 187, 257, 470, 582, 583, 643, 694, 742, 783, 937, 1061], "vertical_relax": 74, "diagon": [74, 224, 257], "vstack": [74, 147, 257], "coerc": [74, 480, 643], "equal": [74, 75, 101, 102, 112, 120, 121, 135, 154, 159, 174, 181, 223, 257, 295, 313, 361, 362, 379, 401, 434, 465, 474, 480, 485, 486, 487, 488, 489, 490, 492, 493, 494, 524, 525, 531, 547, 621, 622, 643, 657, 676, 682, 691, 709, 714, 742, 796, 925, 948, 958, 959, 960, 961, 962, 963, 965, 966, 967, 971, 1002, 1003, 1009, 1025, 1061, 1069], "supertyp": [74, 149, 257, 270, 643, 671, 742], "find": [74, 151, 257, 497, 643, 970, 1061], "miss": [74, 101, 102, 112, 148, 257, 288, 363, 364, 365, 377, 392, 394, 643, 670, 742, 851, 852, 853, 1051, 1061], "stack": [74, 164, 231, 257], "don": [74, 134, 225, 227, 257, 271, 312, 412, 468, 572, 643, 715, 742, 745, 752, 795, 903, 971, 1051, 1061], "auto": [74, 90, 92, 93, 94, 96, 108, 109, 110, 116, 224, 257, 742, 1069], "logic": [74, 134, 239, 257, 271, 558, 572, 643, 663, 674, 681, 697, 703, 726, 742, 752, 1044, 1061], "align_fram": 74, "pattern": [74, 101, 102, 112, 114, 115, 116, 171, 257, 449, 513, 514, 519, 520, 521, 529, 530, 726, 745, 972, 973, 991, 992, 997, 998, 999, 1007, 1008, 1061], "collis": 74, "need": [74, 97, 101, 102, 103, 105, 120, 121, 159, 160, 198, 207, 219, 257, 434, 443, 501, 524, 542, 617, 620, 635, 643, 676, 677, 742, 978, 1002, 1020, 1061], "sure": [74, 90, 95, 101, 102, 106, 110, 159, 160, 191, 257, 676, 677, 742], "contigu": [74, 90, 95, 101, 102, 106, 110, 112, 114, 115, 116, 191, 257], "relev": 74, "df_h1": 74, "l1": 74, "l2": 74, "df_h2": 74, "r1": 74, "r2": 74, "r3": 74, "df_d1": 74, "df_d2": 74, "df_a1": 74, "df_a2": 74, "df_a3": 74, "disabl": [75, 130, 171, 257], "encount": [76, 159, 257, 462, 463, 522, 523, 584, 587, 599, 643, 676, 742, 940, 941, 1000, 1001, 1061], "least": [82, 125, 469, 564, 643, 944, 1049, 1061], "unexpect": [83, 257, 271, 441, 643, 752, 1061], "caus": [83, 91, 101, 102, 112, 133, 147, 257, 751, 856, 1061], "panic": 83, "mismatch": [85, 109], "incompat": 87, "chunkedarrai": [90, 183, 257, 799, 1061], "recordbatch": [90, 172, 257], "schemadefinit": [90, 92, 93, 94, 96, 108, 109, 257, 742], "schema_overrid": [90, 92, 93, 94, 95, 96, 108, 109, 172, 219, 257, 287, 742, 745, 767], "copi": [90, 91, 133, 136, 137, 172, 214, 219, 220, 233, 257, 369, 547, 643, 659, 660, 720, 742, 784, 788, 801, 857, 1025, 1037, 1042, 1043, 1061], "closest": 90, "pair": [90, 92, 93, 94, 96, 108, 109, 124, 192, 257, 698, 742, 1069], "sever": [90, 92, 93, 94, 96, 108, 109, 257, 742, 1069], "wai": [90, 92, 93, 94, 96, 108, 109, 158, 172, 187, 209, 237, 257, 468, 470, 509, 519, 581, 643, 675, 694, 709, 724, 726, 742, 997], "form": [90, 92, 93, 94, 96, 108, 109, 171, 197, 227, 257, 469, 643, 742, 944, 1061], "them": [90, 92, 93, 94, 96, 108, 109, 112, 146, 147, 159, 160, 174, 181, 229, 257, 386, 417, 462, 463, 468, 582, 643, 668, 676, 677, 682, 691, 742, 745, 751, 856, 908, 940, 941, 1061], "dimens": [90, 92, 94, 96, 108, 109, 257, 481, 643, 742, 954, 1061], "allow_copi": [91, 133], "interchang": [91, 133], "__dataframe__": 91, "convers": [91, 133, 171, 172, 197, 198, 216, 220, 257, 539, 540, 541, 544, 592, 654, 1017, 1018, 1019, 1022, 1041, 1042, 1043, 1061], "detail": [91, 103, 120, 121, 133, 257, 742, 1069], "latest": [91, 104, 113, 133, 347, 355, 377, 452, 539, 541, 594, 643, 835, 843, 1017, 1019], "from_panda": [91, 105], "from_arrow": 91, "effici": [91, 172, 257], "reli": 91, "therefor": [91, 145, 257, 634, 850, 1061], "becaus": [91, 109, 134, 145, 159, 175, 227, 239, 257, 412, 592, 676, 726, 742, 752, 850, 903, 1061], "convert": [91, 95, 104, 105, 113, 133, 215, 216, 217, 218, 219, 222, 257, 314, 322, 351, 354, 434, 442, 476, 521, 528, 539, 540, 541, 542, 544, 643, 674, 742, 779, 806, 839, 842, 925, 999, 1006, 1017, 1018, 1019, 1020, 1022, 1030, 1040, 1041, 1042, 1043, 1051, 1061], "panda": [91, 95, 105, 119, 159, 220, 257, 340, 341, 558, 643, 676, 742, 828, 829, 1043, 1044, 1061], "pd": [91, 95, 105, 558, 643, 1043, 1044, 1061], "df_pd": 91, "dfi": [91, 133], "clone": [92, 93, 94, 95, 96, 136, 219, 220, 257, 659, 742, 784, 1041, 1042, 1043, 1051, 1061], "dimension": [92, 94, 96, 219, 257, 742, 1061], "infer_schema_length": [93, 96, 101, 102, 105, 112, 115, 257, 522, 742, 1000], "NOT": [93, 120, 121, 450, 1068], "typic": [93, 134, 257, 327, 745, 752, 811, 1061], "clearer": 93, "load": [93, 95, 104, 105, 113, 126, 128, 257, 654, 678, 685, 742, 1069], "_partial_": [93, 257, 742], "omit": [93, 97, 123, 125, 127, 131, 184, 198, 257, 631, 632, 745], "mani": [93, 96, 103, 147, 257, 522, 751, 856, 1000, 1061], "scan": [93, 96, 101, 102, 112, 113, 114, 115, 116, 117, 159, 160, 257, 669, 676, 677, 678, 685, 742], "slow": [93, 96, 101, 102, 112, 271, 312, 643, 726, 795, 1061], "partial": 93, "present": [93, 120, 125, 390, 643, 1051, 1061], "np": [94, 150, 219, 257, 554, 643, 742, 875, 879, 881, 882, 958, 1033, 1061], "ndarrai": [94, 150, 219, 257, 554, 643, 742, 799, 970, 973, 1033, 1042, 1061], "numpi": [94, 119, 139, 171, 197, 198, 216, 219, 220, 257, 462, 463, 643, 742, 875, 879, 881, 882, 940, 941, 958, 1042, 1043, 1051, 1061], "columnar": [94, 96, 171, 197, 257], "interpret": [94, 96, 101, 102, 112, 257, 742], "yield": [94, 96, 101, 102, 112, 145, 147, 224, 257, 468, 643, 742, 751, 850, 856, 1061], "conclus": [94, 96, 257, 742], "nan_to_nul": [95, 257, 742, 1061], "include_index": 95, "instal": [95, 101, 102, 103, 106, 110, 119, 139, 219, 220, 257, 707, 742, 1043, 1061], "nan": [95, 120, 121, 125, 133, 148, 220, 257, 317, 318, 361, 362, 370, 379, 380, 385, 392, 394, 395, 396, 401, 440, 444, 457, 462, 463, 464, 465, 560, 584, 643, 670, 742, 754, 758, 800, 858, 881, 882, 940, 941, 958, 1042, 1043, 1061, 1069], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 102], "reconstruct": 97, "repr": [97, 125, 127], "trim": 97, "whitespac": [97, 526, 532, 538, 1004, 1010, 1016], "prompt": 97, "extract": [97, 323, 325, 326, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 346, 349, 350, 352, 356, 357, 359, 470, 520, 521, 522, 523, 643, 807, 808, 809, 810, 813, 814, 816, 820, 821, 822, 823, 825, 826, 827, 830, 831, 833, 834, 837, 838, 840, 844, 845, 847, 998, 999, 1000, 1001], "to_init_repr": [97, 257, 1061], "truncat": [97, 159, 171, 197, 198, 216, 257, 344, 676, 695, 742, 832], "identifi": [97, 180, 186, 225, 257, 690, 715, 742], "compound": [97, 198, 257, 745], "struct": [97, 184, 201, 222, 226, 233, 257, 313, 434, 443, 474, 483, 484, 521, 522, 535, 536, 564, 587, 588, 590, 609, 643, 701, 716, 720, 726, 742, 796, 925, 948, 956, 999, 1000, 1011, 1013, 1014, 1061], "neither": [97, 105, 199, 257, 434, 925], "source_ac": 97, "source_cha": 97, "ident": [97, 136, 137, 257, 351, 483, 484, 643, 659, 660, 742, 784, 788, 839, 956, 957, 1061], "timestamp": [97, 347, 601, 835], "tor_id": 97, "nnel_id": 97, "\u03bc": [97, 125, 159, 160, 171, 174, 197, 198, 216, 229, 257, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 486, 487, 489, 492, 493, 494, 539, 541, 592, 595, 601, 643, 676, 677, 682, 742, 745, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 1017, 1019], "asia": [97, 745, 807, 808, 840], "tokyo": [97, 745], "123456780": 97, "9876543210": 97, "56": [97, 556, 643], "59": [97, 124, 321, 337, 349, 594, 630, 631, 632, 745, 805, 825, 837], "663053": 97, "jst": [97, 745], "803065983": 97, "2055938745": 97, "38": [97, 125], "18": [97, 160, 181, 257, 295, 311, 348, 355, 358, 385, 398, 579, 592, 631, 643, 674, 677, 691, 695, 697, 742, 745, 751, 846, 1019, 1061], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": 97, "to_list": [97, 160, 257, 677, 742, 991, 1061], "datatypeclass": 98, "uint32": [98, 119, 145, 257, 281, 325, 329, 333, 335, 337, 339, 342, 345, 346, 349, 356, 357, 406, 407, 419, 480, 514, 524, 527, 554, 558, 643, 745, 762, 774, 809, 813, 820, 822, 825, 827, 830, 833, 834, 837, 844, 845, 850, 880, 897, 898, 910, 971, 992, 1002, 1005, 1044, 1061], "regular": [98, 171, 196, 197, 229, 257, 366, 513, 514, 519, 520, 521, 529, 530, 581, 597, 610, 614, 627, 643, 745, 991, 992, 997, 998, 999, 1007, 1008], "uint64": [98, 161, 257, 381, 406, 407, 479, 643, 865, 897, 898, 952, 1061], "bigidx": 98, "read": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 147, 257, 378, 441, 634, 643, 663, 669, 674, 697, 742, 751, 856, 1061], "batch": [99, 102, 115, 117, 686, 742], "over": [99, 101, 102, 104, 112, 125, 134, 147, 171, 172, 196, 197, 198, 224, 236, 239, 257, 271, 312, 371, 441, 442, 477, 485, 486, 487, 488, 489, 490, 492, 493, 494, 572, 587, 588, 599, 609, 619, 643, 726, 745, 751, 752, 795, 856, 958, 959, 960, 962, 966, 1061], "fetch": [99, 112, 175, 257, 659, 661, 678, 685, 742], "ideal": 99, "read_csv_batch": [99, 655], "tpch": [99, 102], "tables_scale_100": [99, 102], "lineitem": [99, 102, 103], "try_parse_d": [99, 101, 102, 112], "n_row": [100, 101, 102, 106, 110, 112, 114, 115, 116, 172, 257, 669, 742], "handler": [100, 101, 102, 105, 106, 107, 108, 109, 111, 663, 697, 742], "g": [100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 133, 159, 160, 174, 219, 227, 229, 257, 264, 271, 344, 348, 355, 366, 486, 487, 488, 489, 490, 492, 493, 494, 501, 597, 643, 663, 676, 677, 682, 697, 698, 742, 832, 836, 843, 971, 1042, 1061], "builtin": [100, 101, 102, 105, 106, 107, 108, 109, 111, 663, 697, 742], "accept": [100, 101, 102, 104, 106, 110, 135, 158, 201, 202, 209, 223, 233, 234, 237, 257, 264, 366, 386, 443, 468, 509, 567, 568, 569, 570, 571, 577, 580, 581, 582, 583, 589, 590, 597, 610, 611, 614, 615, 623, 626, 627, 628, 634, 643, 657, 675, 701, 702, 709, 714, 720, 721, 724, 742, 871, 1061], "stop": [100, 101, 102, 106, 110, 112, 114, 115, 116, 325, 328, 329, 331, 332, 337, 339, 345, 346, 348, 349, 353, 355, 356, 357, 359, 486, 487, 489, 492, 493, 494, 643, 804, 806, 809, 812, 813, 815, 820, 822, 825, 827, 830, 833, 834, 836, 837, 841, 843, 844, 845, 846, 847], "textio": 101, "new_column": [101, 102, 105, 112, 193, 257], "comment_char": [101, 102, 112], "quote_char": [101, 102, 112], "skip_row": [101, 102, 112], "missing_utf8_is_empty_str": [101, 102, 112], "ignore_error": [101, 102, 109, 112], "n_thread": [101, 102], "8192": 101, "csvencod": [101, 102, 112], "low_memori": [101, 102, 110, 112, 115, 116], "skip_rows_after_head": [101, 102, 112], "row_count_nam": [101, 102, 106, 110, 112, 114, 115, 116], "row_count_offset": [101, 102, 106, 110, 112, 114, 115, 116], "sample_s": [101, 102], "eol_char": [101, 102, 112], "raise_if_empti": [101, 102, 105, 112], "fsspec": [101, 102, 106, 110, 113, 114, 116, 119], "remot": [101, 102, 106, 110], "autogener": [101, 102, 112], "column_x": [101, 102, 112], "enumer": [101, 102, 112, 172, 257], "shorter": [101, 102], "comment": [101, 102, 112], "instanc": [101, 102, 112, 125, 127, 131, 147, 153, 257, 296, 452, 486, 487, 488, 489, 490, 492, 493, 494, 587, 599, 643, 686, 723, 742, 751, 774, 856, 1061], "escap": [101, 102, 112], "dure": [101, 102, 112, 131, 147, 257, 751, 856, 1061], "would": [101, 102, 112, 281, 415, 451, 477, 577, 592, 643, 761, 906, 950, 1042, 1061], "prefer": [101, 102, 104, 112, 128, 134, 147, 171, 196, 197, 239, 257, 271, 366, 485, 643, 742, 751, 752, 856, 958, 1061, 1069], "treat": [101, 102, 112, 513, 529, 530, 991, 1007, 1008], "10000": [101, 172, 257, 547], "might": [101, 102, 112, 129, 135, 219, 223, 257, 271, 562, 643, 657, 709, 714, 742, 1043, 1061], "issu": [101, 102, 105, 112, 310, 311, 552, 643, 793, 794, 1031, 1061], "iso8601": [101, 102, 112], "physic": [101, 102, 174, 257, 298, 558, 643, 658, 681, 682, 742, 778, 779, 1044, 1061], "cpu": [101, 102], "system": [101, 102], "wrongli": 101, "done": [101, 102, 112, 117, 157, 174, 257, 270, 272, 296, 468, 525, 531, 573, 643, 682, 742, 774, 1003, 1009, 1061], "buffer": [101, 102, 145, 171, 257, 850, 1061], "modifi": [101, 102, 112, 129, 131, 147, 164, 171, 231, 257, 282, 347, 358, 513, 519, 520, 529, 643, 751, 835, 846, 856, 991, 997, 998, 1007, 1021, 1023, 1024, 1061], "upper": [101, 102, 145, 159, 257, 301, 302, 386, 434, 563, 574, 592, 593, 605, 606, 631, 632, 643, 676, 742, 786, 850, 871, 930, 1048, 1061], "bound": [101, 102, 145, 159, 257, 301, 302, 303, 386, 415, 433, 434, 439, 563, 574, 592, 593, 605, 606, 631, 632, 643, 676, 742, 786, 787, 850, 871, 906, 924, 930, 1048, 1061], "lossi": [101, 102, 112], "decod": [101, 102], "usag": [101, 102, 112, 125, 127, 207, 257, 745, 979, 1061], "expens": [101, 102, 110, 112, 115, 116, 126, 128, 134, 159, 160, 171, 196, 197, 198, 224, 225, 257, 271, 643, 676, 677, 715, 742, 751, 752, 856, 1061, 1069], "aggreg": [101, 102, 110, 153, 158, 159, 160, 177, 178, 179, 182, 184, 188, 189, 190, 210, 211, 227, 230, 237, 238, 241, 243, 257, 265, 372, 383, 441, 468, 485, 486, 487, 488, 489, 490, 492, 493, 494, 564, 568, 569, 570, 571, 587, 588, 589, 590, 599, 604, 610, 611, 614, 615, 619, 627, 628, 643, 676, 677, 686, 687, 688, 689, 692, 693, 696, 710, 711, 718, 724, 725, 728, 730, 742, 868, 958, 959, 960, 962, 965, 966, 967, 1061], "nativ": [101, 106, 110, 123, 134, 171, 197, 198, 216, 239, 257, 271, 572, 643, 648, 726, 752, 1061, 1069], "parser": 101, "regard": [101, 584], "sens": [101, 106, 110, 114, 116, 181, 229, 257, 468, 643, 691, 742], "particular": [101, 106, 110, 114, 116, 145, 257, 850, 1061], "usernam": [101, 103, 106, 110, 114, 116], "password": [101, 103, 106, 110, 114, 116], "skip": [101, 102, 105, 110, 112, 116, 227, 257, 752, 1061], "offset": [101, 102, 106, 110, 112, 114, 115, 116, 159, 160, 208, 229, 235, 257, 319, 327, 340, 341, 344, 348, 355, 429, 507, 533, 592, 593, 643, 676, 677, 708, 723, 742, 803, 811, 828, 829, 832, 836, 843, 920, 985, 1011, 1019, 1061], "row_count": [101, 102, 106, 110, 112, 114, 115, 116], "sampl": [101, 102, 239, 257, 506, 643, 726, 984, 1061], "estim": [101, 102, 145, 257, 272, 364, 365, 399, 573, 643, 742, 850, 852, 853, 891, 1061], "alloc": [101, 102, 145, 191, 257, 850, 1061], "nodataerror": [101, 102, 105, 112, 654], "lazili": [101, 102, 112, 113, 114, 115, 116, 443, 643], "glob": [101, 102, 112, 114, 115, 116], "continu": [101, 110, 313, 474, 506, 643, 796, 948, 984, 1061], "benchmark": [101, 110], "50000": 102, "batchedcsvread": [102, 654], "upon": 102, "creation": 102, "gather": 102, "next_batch": 102, "big": 102, "interest": 102, "seen_group": 102, "big_fil": 102, "df_current_batch": 102, "concat": [102, 783, 937, 1061], "partition_df": 102, "partition_bi": [102, 172, 257], "as_dict": [102, 186, 257], "fh": 102, "write_csv": [102, 112, 257], "els": [102, 634], "partition_on": 103, "partition_rang": 103, "partition_num": 103, "dbreadengin": 103, "raw": 103, "connectorx": [103, 119], "driver": 103, "snowflak": 103, "warehous": 103, "role": 103, "transfer": 103, "document": [103, 105, 351, 354, 523, 539, 540, 541, 544, 779, 839, 842, 1001, 1017, 1018, 1019, 1022], "redshift": 103, "mysql": 103, "mariadb": 103, "clickhous": 103, "oracl": 103, "bigqueri": 103, "pleas": [103, 159, 257, 676, 742], "doc": [103, 139, 257], "github": 103, "sfu": 103, "connector": 103, "destin": 103, "small": [103, 124, 175, 257, 348, 669, 742, 1069], "still": 103, "develop": [103, 125, 127], "explicitli": [103, 123, 125, 131, 443, 626, 643, 653], "test_tabl": 103, "compani": 103, "testdb": 103, "public": [103, 257, 643, 654, 742, 1061], "myrol": 103, "delta_table_opt": [104, 113], "root": [104, 113, 299, 398, 442, 453, 472, 510, 551, 642, 643, 781, 987, 1061], "absolut": [104, 113, 120, 121, 263, 363, 364, 365, 643, 747, 851, 852, 853, 1061], "sinc": [104, 113, 135, 223, 257, 295, 328, 579, 592, 601, 620, 631, 643, 657, 674, 697, 709, 714, 742, 751, 796, 812, 948, 1019, 1061], "avoid": [104, 197, 257, 266, 643], "year": [104, 113, 159, 160, 174, 229, 257, 331, 332, 344, 345, 348, 355, 356, 486, 487, 488, 489, 490, 492, 493, 494, 591, 592, 594, 643, 676, 677, 682, 742, 815, 816, 832, 833, 836, 843, 844], "2021": [104, 113, 140, 157, 159, 229, 257, 539, 608, 676, 742, 745, 807, 808, 816, 840, 887, 1017, 1061], "aw": [104, 113], "googl": [104, 113], "service_account": [104, 113], "service_account_json_absolute_path": [104, 113], "az": [104, 113], "adl": [104, 113], "abf": [104, 113], "azure_storage_account_nam": [104, 113], "azure_storage_account_kei": [104, 113], "without_fil": [104, 113], "track": [104, 113, 134, 257, 434, 1068], "sheet_id": 105, "sheet_nam": 105, "xlsx2csv_option": 105, "read_csv_opt": 105, "noreturn": 105, "xlsx2csv": [105, 119], "read_csv": [105, 112], "sheetnam": 105, "nor": [105, 199, 257], "skip_empty_lin": 105, "correct": [105, 364, 365, 399, 491, 506, 643, 686, 742, 852, 853, 891, 964, 984, 1061], "look": [105, 289, 434, 768], "1000": [105, 145, 218, 257, 333, 334, 547, 821, 1040, 1061, 1069], "spreadsheet": [105, 188, 257], "xl": 105, "xlsm": 105, "xlsb": 105, "odf": 105, "od": 105, "odt": 105, "memory_map": [106, 110, 114], "v2": [106, 114], "greatli": [106, 114], "repeat": [106, 114, 478, 480, 617, 635, 643], "give": [106, 110, 114, 115, 116, 180, 225, 257, 328, 399, 480, 560, 643, 654, 690, 715, 742, 812, 891, 1061], "That": [106, 686, 742], "filenam": 106, "my_fil": 106, "write_ipc": [106, 257], "read_ndjson": 108, "parallelstrategi": [110, 116], "use_statist": [110, 116], "stabl": [110, 135, 139, 199, 223, 257, 438, 643, 657, 690, 709, 714, 742], "row_group": [110, 116], "read_tabl": 110, "scan_parquet": 110, "scan_pyarrow_dataset": [110, 116], "hive": [110, 116], "contribut": [110, 488, 490, 492, 494, 643], "with_column_nam": 112, "push": [112, 114, 115, 116, 117], "down": [112, 114, 115, 116, 117, 375, 643, 862, 1061], "therebi": [112, 114, 115, 116], "potenti": [112, 114, 115, 116, 171, 196, 198, 257], "overhead": [112, 114, 115, 116], "realloc": [112, 114, 115, 147, 257, 751, 856, 1061], "headerless": 112, "unlik": [112, 159, 257, 676, 742], "fewer": 112, "my_long_fil": 112, "doesn": [112, 159, 257, 360, 643, 676, 742, 849, 1051, 1061], "thing": [112, 118, 598, 607], "less": [112, 174, 257, 401, 440, 525, 531, 536, 547, 643, 682, 742, 1003, 1009, 1014, 1025, 1069], "breezah": 112, "languag": [112, 159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "hard": [112, 686, 742], "mydf": 112, "lambda": [112, 134, 153, 187, 239, 257, 271, 363, 364, 365, 434, 441, 442, 485, 572, 587, 588, 599, 609, 619, 643, 686, 694, 726, 742, 752, 851, 852, 853, 925, 1061], "lower": [112, 159, 190, 249, 257, 301, 303, 386, 439, 442, 475, 479, 490, 574, 592, 593, 605, 606, 618, 631, 632, 643, 669, 676, 696, 736, 742, 787, 871, 930, 949, 952, 963, 1048, 1061], "simpli": [112, 468, 587, 599, 643], "idx": [112, 159, 172, 257, 434, 676, 742, 925, 973, 1061], "uint16": [112, 310, 311, 552, 643, 745, 793, 794, 1031, 1061], "u16": [112, 125, 1069], "eu": 113, "central": [113, 399, 506, 643, 891, 984, 1061], "read_parquet": 116, "allow_pyarrow_filt": 117, "comparison": 117, "dset": 117, "my": [117, 545, 1023], "folder": 117, "05": [117, 120, 121, 125, 174, 229, 257, 321, 322, 326, 347, 349, 351, 354, 592, 682, 742, 745, 805, 806, 807, 808, 809, 810, 835, 836, 839, 840, 842, 843, 845], "04": [117, 159, 229, 257, 321, 322, 326, 330, 337, 338, 339, 340, 341, 347, 348, 349, 350, 351, 354, 356, 358, 539, 592, 595, 676, 742, 745, 806, 810, 814, 820, 822, 825, 826, 827, 828, 829, 830, 834, 835, 837, 838, 839, 842, 844, 845, 846, 1017], "seed": [118, 161, 199, 257, 381, 477, 496, 502, 643, 865, 950, 969, 980, 1061], "shuffl": [118, 199, 239, 257, 496, 643, 726, 969, 1061], "intern": [118, 171, 257], "stdout": [119, 131, 157, 257, 454], "17": [119, 125, 237, 495, 601, 620, 631, 643, 724, 789, 836, 1061, 1069], "platform": 119, "linux": 119, "90": [119, 542, 1020], "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 134, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 319, 332, 385, 477, 631, 643, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 745, 803, 836], "44": [119, 181, 257, 316, 643, 691, 742], "51": 119, "gcc": 119, "matplotlib": [119, 695, 707, 742], "check_row_ord": 120, "check_column_ord": 120, "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "08": [120, 121, 125, 160, 257, 321, 348, 539, 592, 595, 677, 742, 745, 836, 843, 1017], "nans_compare_equ": [120, 121], "categorical_as_str": [120, 121], "assertionerror": [120, 121], "compar": [120, 121, 154, 257, 361, 362, 379, 380, 401, 440, 464, 465, 643, 779, 971, 1061], "irrespect": 120, "unsort": 120, "exactli": [120, 121, 124, 125, 127, 535, 536, 979, 1013, 1014, 1061], "toler": [120, 121, 174, 257, 682, 742], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 160, 257, 654, 677, 742, 745, 864, 1061], "check_nam": 121, "s1": [121, 153, 257, 890, 925, 1043, 1052, 1061], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 469, 643, 944, 1061], "chanc": [122, 125, 127, 1069], "independ": [122, 123, 125, 127], "flag": [122, 257, 498, 513, 519, 520, 529, 643, 667, 686, 742, 974, 991, 997, 998, 1007, 1061], "hypothesi": [122, 123, 124, 125, 126, 127, 1069], "sampled_from": [122, 1069], "unique_small_int": 122, "ccy": [122, 1069], "gbp": [122, 1069], "eur": [122, 140, 157, 257, 1069], "jpy": [122, 1069], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125, 745], "mincol": 123, "assign": [123, 159, 257, 434, 468, 477, 535, 536, 643, 676, 742, 925, 931, 950, 1013, 1014, 1061], "exact": [123, 125, 127, 207, 257, 539, 540, 541, 560, 643, 1017, 1018, 1019], "especi": [123, 484, 643, 957, 1061], "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 1069], "max_siz": [124, 125, 127, 1069], "anoth": [124, 158, 257, 312, 320, 433, 447, 450, 643, 675, 722, 742, 795, 804, 856, 924, 971, 1061], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "uint8_pair": [124, 1069], "uint": [124, 1069], "zip": [124, 1069], "131": 124, "176": 124, "149": [124, 1069], "max_data_s": [125, 127], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 1069], "excluded_dtyp": [125, 127], "describ": [125, 157, 257, 1061], "desir": [125, 434, 592, 593, 925], "n_chunk": [125, 127, 257, 751, 856, 1061], "randomis": 125, "onto": 125, "pct": 125, "preced": [125, 745], "disallow": [125, 127], "inf": [125, 127, 278, 313, 388, 391, 474, 560, 643, 758, 796, 867, 875, 879, 930, 944, 948, 1048, 1061], "exclud": [125, 127, 308, 311, 386, 581, 643, 871, 887, 1061], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 257], "0x11f561580": 125, "known": [125, 434, 726, 925], "0565": 125, "34715": 125, "5844": 125, "33": [125, 181, 257, 495, 581, 643, 691, 742, 963, 1061], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 159, 160, 174, 229, 257, 319, 340, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 803, 828, 832, 836, 843], "836271": 125, "4063": 125, "06": [125, 229, 257, 321, 332, 346, 347, 359, 745, 835, 836, 845], "39092": 125, "1889": 125, "13": [125, 136, 137, 148, 149, 156, 160, 165, 175, 183, 233, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 266, 485, 542, 582, 587, 590, 599, 628, 633, 643, 659, 660, 670, 671, 677, 684, 720, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 752, 836, 843, 844, 1020, 1061], "41": [125, 493, 643, 1069], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 742], "balanc": [126, 128, 1069], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "normal": [127, 159, 257, 360, 399, 506, 643, 676, 742, 849, 891, 984, 1061], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 1069], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 134, 187, 239, 257, 271, 470, 572, 643, 694, 726, 742, 752, 1061], "recommend": [129, 171, 187, 257, 592, 745], "initi": [131, 587, 599, 634], "whatev": 131, "were": 131, "enter": 131, "advantag": [131, 187, 257], "initialis": [131, 742, 1068], "set_": 131, "set_verbos": 131, "do_various_th": 131, "restor": 131, "cleaner": 131, "breviti": 131, "vein": 131, "durat": [131, 174, 229, 257, 319, 326, 327, 330, 334, 336, 338, 343, 350, 355, 358, 558, 592, 593, 631, 632, 643, 682, 742, 745, 803, 810, 811, 814, 821, 823, 826, 831, 838, 843, 846, 1044, 1061], "set_ascii_t": 131, "write_ascii_frame_to_stdout": 131, "sy": 131, "nan_as_nul": 133, "polarsdatafram": 133, "futur": 133, "notimplementederror": 133, "num_row": 133, "get_column": [133, 221, 257], "dtypekind": 133, "inference_s": [134, 257], "256": [134, 257, 944, 1061], "much": [134, 227, 239, 257, 271, 312, 433, 572, 643, 726, 752, 795, 924, 1061], "almost": [134, 239, 257, 539, 540, 541, 592, 752, 1017, 1018, 1019, 1061], "_significantly_": [134, 239, 257, 752, 1061], "intens": [134, 239, 257, 468, 643, 752, 1061], "forc": [134, 174, 239, 257, 681, 682, 726, 742, 752, 1061], "materi": [134, 239, 257, 695, 726, 742, 745, 752, 1061], "parallelis": [134, 239, 257, 752, 1061], "optimis": [134, 198, 239, 257, 742, 752, 972, 973, 1061], "achiev": [134, 239, 257, 271, 643, 752, 796, 948, 1061], "best": [134, 239, 257, 271, 643, 752, 1061], "tri": [134, 257], "arbitrarili": [134, 257], "rearrang": [134, 257], "transform": [134, 257, 441, 543, 545, 546, 643], "preserv": [134, 158, 219, 220, 257, 503, 643, 981, 1043, 1061], "lru_cach": [134, 257, 271, 643, 752, 1061], "With": [134, 170, 257, 271, 486, 487, 488, 489, 490, 492, 493, 494, 643, 752, 890, 1061], "magnitud": [134, 257, 271, 643, 752, 1061], "column_1": [134, 224, 257], "better": [134, 219, 239, 257, 271, 564, 643, 726, 972, 973, 1061], "scalar": [134, 170, 196, 257, 497, 572, 608, 643, 890, 970, 1061], "k": [135, 198, 223, 257, 294, 298, 399, 559, 643, 657, 714, 742, 773, 778, 891, 1045, 1061], "intoexpr": [135, 158, 159, 160, 201, 202, 209, 223, 233, 234, 237, 257, 270, 386, 410, 424, 425, 426, 427, 468, 500, 509, 568, 569, 570, 571, 574, 577, 580, 582, 583, 587, 589, 590, 592, 593, 594, 599, 605, 606, 610, 611, 614, 615, 620, 623, 626, 627, 628, 631, 632, 634, 643, 657, 672, 675, 676, 677, 701, 702, 709, 714, 720, 721, 724, 742, 871, 1061], "nulls_last": [135, 209, 223, 257, 281, 508, 643, 657, 709, 714, 742, 761, 1061], "smallest": [135, 223, 257, 294, 643, 657, 714, 742, 773, 1061], "largest": [135, 159, 160, 174, 223, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 559, 643, 657, 676, 677, 682, 714, 742, 832, 836, 843, 1045, 1061], "wors": [135, 223, 257, 657, 709, 714, 742], "search": [135, 174, 223, 257, 657, 682, 709, 714, 742], "top_k": [135, 257, 294, 643, 657, 742, 773, 1061], "greater": [136, 174, 257, 379, 380, 506, 536, 643, 682, 742, 984, 1014, 1061], "cheap": [136, 137, 202, 234, 257, 659, 660, 702, 721, 742, 751, 784, 788, 1061], "deepcopi": [136, 137, 257, 659, 660, 742, 784, 788, 1061], "clear": [137, 257, 660, 742, 788, 1061], "appl": [138, 164, 173, 192, 194, 215, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 482, 517, 537, 643, 681, 698, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 742, 995, 1015], "banana": [138, 215, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 257, 482, 643, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737], "pairwis": [139, 257], "pearson": [139, 257, 399, 506, 584, 643, 891, 984, 1061], "correl": [139, 257, 584, 621], "coeffici": [139, 257, 506, 643, 984, 1061], "corrcoef": [139, 257], "percentil": [140, 257, 797, 1061], "summari": [140, 257, 797, 1061], "glimps": [140, 162, 257], "usd": [140, 157, 257, 1069], "2020": [140, 157, 160, 257, 322, 326, 327, 330, 333, 334, 336, 338, 343, 347, 350, 351, 354, 355, 539, 540, 541, 677, 742, 745, 806, 810, 811, 814, 821, 823, 826, 831, 835, 838, 839, 842, 843, 1017, 1018, 1019], "null_count": [140, 143, 257, 312, 643, 742, 795, 797, 1061], "266667": [140, 257], "666667": [140, 178, 230, 245, 257, 363, 643, 718, 732, 742], "std": [140, 257, 485, 492, 643, 742, 797, 965, 1061], "101514": [140, 257], "707107": [140, 257, 364, 492, 643, 852, 1061], "57735": [140, 257], "columnnameorselector": [141, 143, 186, 188, 198, 217, 225, 226, 227, 257, 664, 665, 690, 715, 742], "more_column": [141, 146, 203, 226, 257, 366, 597, 643, 664, 668, 704, 716, 742], "subset": [143, 184, 225, 257, 665, 715, 742], "behavior": [143, 257, 271, 433, 572, 643, 665, 742, 751, 796, 924, 948, 1061], "all_horizont": [143, 257, 568, 665, 742], "is_nul": [143, 257, 643, 665, 742, 1061], "sizeunit": [145, 257, 850, 1061], "heap": [145, 257, 850, 1061], "its": [145, 257, 321, 348, 355, 509, 634, 643, 779, 805, 836, 843, 850, 1061], "bitmap": [145, 257, 850, 1061], "structarrai": [145, 257, 850, 1061], "constant": [145, 160, 257, 319, 369, 643, 677, 742, 803, 850, 857, 1061], "unchang": [145, 257, 558, 643, 686, 726, 742, 850, 1044, 1061], "capac": [145, 207, 257, 850, 979, 1061], "ffi": [145, 257, 850, 1061], "kb": [145, 257, 850, 1061], "mb": [145, 257, 850, 1061], "gb": [145, 257, 850, 1061], "tb": [145, 257, 850, 1061], "revers": [145, 257, 307, 308, 309, 310, 311, 442, 472, 551, 643, 742, 791, 792, 793, 794, 1061], "1_000_000": [145, 257, 850, 1061], "25888898": [145, 257], "689577102661133": [145, 257], "long": [146, 180, 227, 257, 668, 690, 742], "letter": [146, 242, 251, 257, 366, 520, 597, 643, 668, 729, 738, 742, 745, 998], "onlin": [147, 257, 751, 856, 1061], "rerun": [147, 257, 751, 856, 1061], "conveni": [147, 257, 751, 856, 1061], "evalu": [148, 150, 174, 257, 268, 282, 312, 384, 404, 405, 434, 443, 467, 568, 570, 574, 578, 592, 593, 596, 605, 606, 617, 620, 626, 631, 632, 634, 635, 643, 672, 679, 681, 682, 742, 762, 795, 895, 896, 1052, 1061], "Not": [148, 257, 392, 394, 443, 643, 670, 742], "fillnullstrategi": [149, 257, 371, 643, 671, 742, 859, 1061], "matches_supertyp": [149, 257, 671, 742], "forward": [149, 174, 257, 340, 371, 377, 643, 671, 682, 742, 828, 859, 1061], "consecut": [149, 257, 288, 371, 377, 512, 643, 671, 742, 859, 990, 1061], "fill_nan": [149, 257, 643, 742, 1061], "OR": [150, 257, 570, 571, 672, 742, 745], "reduct": [153, 257], "supercast": [153, 257], "parent": [153, 257], "rule": [153, 257], "arithmet": [153, 257], "zip_with": [153, 257, 1061], "foo11": [153, 257], "bar22": [153, 257], "null_equ": [154, 257, 971, 1061], "retriev": [155, 257, 406, 407, 548, 897, 898, 1026], "return_as_str": [157, 257, 454], "preview": [157, 257], "wide": [157, 180, 227, 257, 690, 742], "nice": [157, 257], "few": [157, 257], "rather": [157, 174, 257, 454, 474, 484, 547, 643, 682, 742, 948, 957, 1025, 1061], "head": [157, 176, 212, 257, 270, 403, 643, 685, 742, 893, 1032, 1061], "tail": [157, 162, 257, 270, 506, 643, 742, 866, 984, 1061], "more_bi": [158, 186, 209, 257, 509, 643, 675, 709, 742], "consist": [158, 186, 257, 539, 675, 742, 751, 856, 1017, 1061], "regardless": [158, 257, 523, 634, 1001], "agg": [158, 159, 160, 257, 265, 271, 372, 374, 508, 509, 554, 566, 585, 643, 661, 667, 669, 675, 676, 677, 695, 703, 707, 742, 745], "Or": [158, 159, 160, 174, 209, 229, 237, 257, 468, 509, 581, 634, 643, 675, 676, 677, 682, 709, 724, 742], "index_column": [159, 160, 257, 676, 677, 742], "timedelta": [159, 160, 229, 257, 325, 328, 329, 332, 337, 339, 344, 345, 346, 348, 349, 353, 355, 356, 357, 359, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 631, 632, 643, 676, 677, 742, 745, 817, 819, 824, 832, 836, 843, 940, 941, 1061], "period": [159, 160, 205, 206, 257, 348, 355, 363, 364, 365, 428, 469, 499, 500, 592, 593, 631, 632, 643, 676, 677, 705, 706, 742, 836, 843, 851, 852, 853, 919, 944, 976, 977, 1061], "include_boundari": [159, 257, 676, 742], "closedinterv": [159, 160, 257, 386, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 631, 632, 643, 676, 677, 742, 871, 1061], "start_bi": [159, 257, 676, 742], "startbi": [159, 257, 676, 742], "window": [159, 160, 257, 312, 348, 355, 363, 364, 365, 468, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 582, 621, 622, 643, 676, 677, 742, 795, 836, 843, 851, 852, 853, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1061], "check_sort": [159, 160, 257, 676, 677, 742], "dynamicgroupbi": [159, 257], "groupbi": [159, 160, 184, 257, 265, 271, 312, 372, 374, 412, 468, 508, 509, 554, 566, 572, 585, 643, 661, 667, 669, 676, 677, 695, 707, 742, 745, 795, 903, 1061], "member": [159, 257, 676, 742, 878, 1061], "seen": [159, 257, 288, 377, 643, 676, 742], "roll": [159, 160, 257, 340, 341, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 582, 621, 622, 643, 676, 677, 742, 828, 829, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1061], "slot": [159, 257, 312, 315, 411, 643, 676, 742, 795, 798, 902, 1061], "interv": [159, 160, 229, 257, 313, 331, 348, 349, 355, 386, 474, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 631, 632, 643, 676, 677, 742, 796, 809, 812, 813, 815, 820, 822, 825, 827, 830, 833, 834, 836, 837, 841, 843, 844, 845, 847, 871, 948, 1061], "1n": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "1u": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "microsecond": [159, 160, 171, 174, 197, 198, 216, 229, 257, 344, 348, 349, 355, 486, 487, 488, 489, 490, 492, 493, 494, 594, 595, 630, 643, 676, 677, 682, 695, 742, 745, 832, 836, 843], "1m": [159, 160, 174, 229, 257, 333, 334, 336, 343, 344, 348, 350, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 821, 823, 831, 832, 836, 838, 843], "minut": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 594, 595, 630, 631, 643, 676, 677, 682, 742, 745, 832, 836, 843], "1h": [159, 160, 174, 229, 257, 327, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 631, 632, 643, 676, 677, 682, 742, 811, 813, 832, 836, 843], "hour": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 592, 594, 595, 630, 631, 643, 676, 677, 682, 742, 745, 832, 836, 843], "1d": [159, 160, 174, 229, 257, 320, 330, 338, 344, 348, 355, 358, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 608, 643, 676, 677, 682, 742, 745, 804, 812, 814, 817, 818, 819, 824, 826, 832, 836, 841, 843, 845, 846], "1w": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "week": [159, 160, 174, 229, 257, 344, 348, 355, 357, 486, 487, 488, 489, 490, 492, 493, 494, 595, 643, 676, 677, 682, 742, 745, 832, 836, 843, 845], "1mo": [159, 160, 174, 229, 257, 322, 326, 340, 341, 344, 347, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 643, 676, 677, 682, 742, 806, 810, 827, 828, 829, 832, 833, 834, 835, 836, 843, 844], "month": [159, 160, 174, 229, 257, 325, 340, 341, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 591, 592, 593, 594, 643, 676, 677, 682, 742, 809, 828, 829, 832, 836, 843], "1q": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "quarter": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "1y": [159, 160, 174, 229, 257, 331, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 592, 643, 676, 677, 682, 742, 815, 832, 836, 843, 847], "1i": [159, 160, 174, 229, 257, 344, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832], "3d12h4m25": [159, 160, 174, 229, 257, 348, 355, 676, 677, 682, 742, 836, 843], "suffix": [159, 160, 173, 174, 201, 229, 233, 237, 257, 266, 292, 344, 348, 355, 392, 394, 395, 396, 442, 468, 472, 482, 486, 487, 488, 489, 490, 492, 493, 494, 517, 643, 676, 677, 681, 682, 701, 720, 722, 724, 742, 745, 771, 832, 836, 843, 995], "_satur": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 592, 593, 643, 676, 677, 682, 742, 832, 836, 843], "satur": [159, 160, 174, 229, 257, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 832, 836, 843], "28": [159, 160, 174, 215, 229, 257, 264, 344, 347, 348, 355, 358, 486, 487, 488, 489, 490, 492, 493, 494, 592, 643, 676, 677, 682, 742, 832, 835, 836, 843, 846, 1069], "correspond": [159, 160, 174, 219, 229, 257, 332, 344, 348, 355, 477, 484, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 816, 832, 836, 843, 950, 957, 1061], "due": [159, 160, 174, 198, 229, 257, 266, 296, 327, 344, 348, 355, 398, 472, 486, 487, 488, 489, 490, 492, 493, 494, 551, 643, 676, 677, 682, 742, 774, 811, 832, 836, 843, 1061], "daylight": [159, 160, 174, 229, 257, 319, 327, 344, 348, 355, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 677, 682, 742, 811, 832, 836, 843], "10i": [159, 160, 257, 676, 677, 742], "ascend": [159, 160, 257, 676, 677, 742], "dynam": [159, 257, 434, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 742, 925], "matter": [159, 160, 171, 197, 198, 216, 257, 676, 677, 742], "_lower_bound": [159, 257, 676, 742], "_upper_bound": [159, 257, 676, 742], "harder": [159, 257, 676, 742], "tempor": [159, 160, 171, 197, 198, 216, 257, 386, 486, 487, 488, 489, 490, 492, 493, 494, 643, 654, 676, 677, 742, 745, 871, 887, 1061], "inclus": [159, 160, 257, 386, 486, 487, 488, 489, 490, 492, 493, 494, 534, 535, 574, 592, 593, 605, 606, 631, 632, 643, 676, 677, 742, 871, 1012, 1013, 1061], "datapoint": [159, 257, 676, 742], "mondai": [159, 257, 355, 357, 676, 742, 843, 845], "tuesdai": [159, 257, 676, 742], "wednesdai": [159, 257, 676, 742], "thursdai": [159, 257, 676, 742], "fridai": [159, 257, 676, 742], "saturdai": [159, 257, 676, 742], "sundai": [159, 257, 357, 676, 742, 845], "weekli": [159, 257, 355, 676, 742, 843], "sorted": [159, 160, 257, 676, 677, 742], "metadata": [159, 160, 257, 676, 677, 742], "verifi": [159, 160, 257, 676, 677, 742], "incorrectli": [159, 160, 257, 434, 676, 677, 742], "incorrect": [159, 160, 257, 358, 498, 643, 676, 677, 726, 742, 846, 974, 1061], "re": [159, 219, 257, 340, 341, 676, 742, 828, 829, 1068], "come": [159, 257, 340, 341, 399, 643, 655, 676, 741, 742, 828, 829, 891, 1061], "set_index": [159, 257, 676, 742], "resampl": [159, 257, 676, 742], "reset_index": [159, 257, 676, 742], "though": [159, 257, 676, 742], "evenli": [159, 257, 676, 742], "upsampl": [159, 257, 676, 742], "date_rang": [159, 229, 257, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 353, 355, 356, 357, 358, 359, 486, 487, 489, 492, 493, 494, 643, 676, 742, 803, 804, 806, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 843, 844, 845, 846, 847], "30m": [159, 257, 348, 355, 676, 742, 836, 843], "time_min": [159, 257, 676, 742], "time_max": [159, 257, 676, 742], "23": [159, 160, 257, 321, 325, 329, 345, 348, 357, 486, 487, 489, 492, 493, 494, 594, 630, 631, 632, 643, 676, 677, 742, 745, 805, 813, 1069], "boundari": [159, 257, 301, 302, 303, 355, 643, 676, 742, 785, 786, 787, 843, 867, 1061], "time_count": [159, 257, 676, 742], "_lower_boundari": [159, 257, 676, 742], "_upper_boundari": [159, 257, 676, 742], "lower_bound": [159, 257, 301, 303, 386, 643, 676, 742, 785, 787, 871, 1048, 1061], "upper_bound": [159, 257, 301, 302, 386, 434, 643, 676, 742, 785, 786, 871, 930, 1061], "time_agg_list": [159, 257, 676, 742], "int_rang": [159, 227, 239, 257, 574, 676, 726, 742], "2i": [159, 257, 676, 742], "3i": [159, 257, 676, 742], "a_agg_list": [159, 257, 676, 742], "rollinggroupbi": [160, 257], "dynamic_groupbi": [160, 257, 677, 742], "groupby_dynam": [160, 257, 677, 742], "t_0": [160, 257, 486, 487, 488, 489, 490, 492, 493, 494, 643, 677, 742], "t_1": [160, 257, 486, 487, 488, 489, 490, 492, 493, 494, 643, 677, 742], "t_n": [160, 257, 486, 487, 488, 489, 490, 492, 493, 494, 643, 677, 742], "19": [160, 174, 257, 348, 487, 489, 542, 643, 677, 682, 742, 796, 836, 843, 948, 1020, 1061], "43": [160, 257, 311, 493, 643, 677, 742], "strptime": [160, 257, 347, 677, 742, 835], "set_sort": [160, 174, 229, 257, 643, 677, 682, 742, 1061], "2d": [160, 219, 257, 608, 677, 742, 803, 809], "sum_a": [160, 257, 677, 742], "min_a": [160, 257, 677, 742], "max_a": [160, 257, 677, 742], "seed_1": [161, 257, 381, 643, 865, 1061], "seed_2": [161, 257, 381, 643, 865, 1061], "seed_3": [161, 257, 381, 643, 865, 1061], "hash": [161, 257, 643, 1061], "u64": [161, 257, 381, 479, 643, 695, 742, 865, 1061], "10783150408545073287": [161, 257], "1438741209321515184": [161, 257], "10047419486152048166": [161, 257], "2047317070637311557": [161, 257], "ab": [162, 176, 212, 233, 257, 548, 549, 643, 720, 742, 866, 893, 1032, 1061], "grown": [164, 257], "intermedi": [166, 257, 680, 742, 1069], "linear": [166, 190, 249, 257, 385, 408, 446, 475, 490, 582, 583, 618, 643, 680, 696, 736, 742, 870, 899, 949, 963, 1061], "mask": [167, 169, 257, 290, 387, 389, 397, 513, 515, 643, 769, 860, 871, 873, 876, 888, 945, 946, 972, 991, 993, 1052, 1061], "visual": [167, 169, 257], "buffer_s": [171, 257], "veri": [171, 224, 257, 271, 643, 660, 726, 742, 788, 1061], "fit": [171, 207, 227, 257, 501, 620, 643, 978, 979, 1061], "signific": [171, 257, 271, 643], "4x": [171, 257], "materialis": [171, 172, 196, 197, 198, 257], "rows_by_kei": [171, 197, 257], "awar": [171, 197, 198, 216, 257, 1019], "iter_row": [172, 196, 197, 198, 257], "17_500": [172, 257], "klmnoopqrstuvwxyz": [172, 257], "__name__": [172, 257], "7500": [172, 257], "15_000": [172, 257], "record_batch": [172, 257], "to_arrow": [172, 257, 1061], "to_batch": [172, 257], "date32": [172, 257], "large_str": [172, 214, 220, 257], "15000": [172, 257], "2500": [172, 257], "left_on": [173, 174, 257, 681, 682, 742], "right_on": [173, 174, 257, 681, 682, 742], "_right": [173, 174, 257, 681, 682, 742], "joinvalid": [173, 257, 681, 742], "semi": [173, 257, 681, 742], "anti": [173, 257, 681, 726, 742, 972, 973, 1061], "cross": [173, 257, 355, 681, 742, 843], "many_to_mani": [173, 257, 681, 742], "one_to_on": [173, 257, 681, 742], "one_to_mani": [173, 257, 681, 742], "many_to_on": [173, 257, 681, 742], "join_asof": [173, 257, 681, 742], "stringcach": [173, 257, 654, 777, 779], "other_df": [173, 257], "by_left": [174, 257, 682, 742], "by_right": [174, 257, 682, 742], "asofjoinstrategi": [174, 257, 682, 742], "allow_parallel": [174, 257, 681, 682, 742], "force_parallel": [174, 257, 681, 682, 742], "asof": [174, 257, 682, 742], "asof_join": [174, 257], "distanc": [174, 257, 682, 742, 867, 1061], "plan": [174, 175, 257, 658, 663, 667, 674, 681, 682, 697, 703, 707, 742], "gdp": [174, 257, 682, 742], "2016": [174, 257, 682, 742], "2017": [174, 257, 682, 742], "2018": [174, 257, 347, 682, 742, 835], "2019": [174, 257, 682, 742], "jan": [174, 257, 682, 742], "1st": [174, 257, 592, 682, 742], "4164": [174, 257, 682, 742], "4411": [174, 257, 682, 742], "4566": [174, 257, 682, 742], "4696": [174, 257, 682, 742], "popul": [174, 257, 682, 742], "12th": [174, 257, 682, 742], "82": [174, 257, 682, 742], "66": [174, 257, 493, 567, 643, 682, 742, 963, 1061], "83": [174, 257, 682, 742], "52": [174, 233, 257, 495, 643, 682, 720, 742], "request": [175, 257], "describe_plan": [175, 257], "unoptim": [175, 257], "describe_optimized_plan": [175, 257], "show_graph": [175, 257, 742], "un": [175, 257], "graphviz": [175, 257, 707, 742], "axi": [177, 178, 180, 182, 211, 257, 575, 576, 690, 742], "null_strategi": [178, 211, 257], "nullstrategi": [178, 211, 257], "propag": [178, 211, 257, 362, 462, 463, 465, 643, 940, 941, 1061], "spam": [178, 257, 520, 998], "id_var": [180, 257, 690, 742], "value_var": [180, 257, 690, 742], "variable_nam": [180, 257, 690, 742], "value_nam": [180, 257, 690, 742], "unpivot": [180, 257, 690, 742], "leav": [180, 257, 434, 690, 742], "massag": [180, 257, 690, 742], "measur": [180, 257, 690, 742], "merg": [181, 257, 691, 742], "caller": [181, 257, 434, 686, 691, 726, 742], "respons": [181, 257, 691, 742], "steve": [181, 257, 691, 742], "elis": [181, 257, 691, 742], "bob": [181, 257, 691, 742], "ag": [181, 257, 691, 742], "anna": [181, 257, 691, 742], "megan": [181, 257, 691, 742], "thoma": [181, 257, 691, 742], "21": [181, 211, 257, 486, 487, 489, 492, 493, 494, 601, 643, 691, 742, 745], "what": [184, 257, 1042, 1051, 1061], "pack": [184, 257], "expr_unique_subset": [184, 257], "df_nuniqu": [184, 257], "df_agg_nuniqu": [184, 257], "include_kei": [186, 198, 257], "offer": [187, 257, 470, 643, 694, 742], "fulli": [187, 199, 257], "cast_str_to_int": [187, 257, 694, 742], "col_nam": [187, 257, 694, 742], "tdf": [187, 257, 694, 742], "aggregate_funct": [188, 257], "pivotagg": [188, 257], "sort_column": [188, 257], "predefin": [188, 257], "median": [188, 257, 371, 488, 643, 722, 742, 961, 1061], "predict": [188, 191, 229, 257], "transpos": [188, 257], "discoveri": [188, 257], "col1": [188, 224, 257, 742, 1069], "col2": [188, 224, 257, 742, 1069], "col3": [188, 257, 1069], "tanh": [188, 257, 643, 1061], "998347": [188, 257], "964028": [188, 257], "999954": [188, 257], "interpol": [190, 249, 257, 371, 446, 475, 490, 618, 643, 696, 736, 742, 949, 963, 1061], "rollinginterpolationmethod": [190, 249, 257, 475, 490, 618, 643, 696, 736, 742, 949, 963, 1061], "midpoint": [190, 249, 257, 475, 490, 618, 643, 696, 736, 742, 949, 963, 1061], "by_pred": [196, 257], "accord": [196, 257, 443, 474, 592, 643, 816, 948, 1061], "never": [196, 257, 592], "mutual": [196, 257], "exclus": [196, 257, 567, 574, 605, 606, 643], "addition": [196, 257], "clariti": [196, 257], "toomanyrowsreturnederror": [196, 257, 654], "norowsreturnederror": [196, 257, 654], "inherit": [196, 257], "rowserror": [196, 257, 654], "high": [198, 257, 474, 643, 948, 1061], "cost": [198, 257], "reoconstruct": [198, 257], "defaultdict": [198, 257], "assum": [198, 257, 686, 726, 742], "with_replac": [199, 257, 496, 643, 969, 1061], "modul": [199, 257, 642, 745, 969, 980, 1061], "named_expr": [201, 202, 233, 234, 257, 623, 626, 701, 702, 720, 721, 742], "threshold": [201, 257, 701, 742], "set_auto_structifi": [201, 233, 257, 701, 720, 742], "auto_structifi": [201, 233, 257, 701, 720, 742], "is_odd": [201, 257, 701, 742], "_is_odd": [201, 257, 701, 742], "sequenti": [202, 234, 257, 702, 721, 742], "shift_and_fil": [205, 257, 643, 742, 1061], "fill_valu": [206, 227, 257, 500, 643, 706, 742, 977, 1061], "shift": [206, 257, 315, 411, 469, 500, 582, 643, 706, 742, 798, 902, 944, 977, 1061], "shrink": [207, 257, 501, 643, 978, 979, 1061], "hold": [207, 257], "ddof": [210, 230, 257, 492, 494, 511, 565, 584, 621, 622, 625, 633, 643, 710, 718, 742, 965, 967, 988, 1050, 1061], "deviat": [210, 257, 364, 492, 511, 625, 643, 710, 742, 852, 988, 1061], "degre": [210, 230, 257, 476, 492, 494, 511, 565, 576, 584, 621, 622, 625, 633, 643, 710, 718, 742, 965, 967, 988, 1050, 1061], "freedom": [210, 230, 257, 492, 494, 511, 565, 584, 621, 622, 625, 633, 643, 710, 718, 742, 965, 967, 988, 1050, 1061], "divisor": [210, 230, 257, 492, 494, 511, 565, 584, 621, 622, 625, 633, 643, 710, 718, 742, 965, 967, 988, 1050, 1061], "816497": [210, 257], "16a": [211, 257], "27b": [211, 257], "38c": [211, 257], "nth": [213, 257, 536, 555, 643, 713, 742, 1014, 1034, 1061], "mostli": [214, 257, 372, 643], "categoricaltyp": [214, 257], "as_seri": [215, 257, 796, 948, 1061], "fruit": [215, 257, 482, 517, 537, 643, 995, 1015], "car": [215, 257, 482, 643], "beetl": [215, 257, 482, 643], "audi": [215, 257, 482, 643], "300": [215, 257, 959, 960, 962, 1061], "drop_first": [217, 257], "dummi": [217, 257, 1038, 1061], "foo_1": [217, 257], "foo_2": [217, 257], "bar_3": [217, 257], "bar_4": [217, 257], "ham_a": [217, 257], "ham_b": [217, 257], "instantiat": [218, 257, 1040, 1061], "from_repr": [218, 257, 1040, 1061], "df_from_str_repr": [218, 257], "eval": [218, 257, 596, 1040, 1061], "indexord": [219, 257], "fortran": [219, 257], "downstream": [219, 257, 498, 643, 974, 1061], "applic": [219, 257, 486, 487, 488, 489, 490, 492, 493, 494, 643], "prevent": [219, 257, 266, 310, 311, 398, 552, 643, 742, 793, 794, 1031, 1061], "reshap": [219, 257, 413, 643, 904, 1061], "ll": [219, 257], "u1": [219, 257], "f4": [219, 257], "view": [219, 257, 1042, 1061], "recarrai": [219, 257], "rec": [219, 257], "use_pyarrow_extension_arrai": [220, 257, 1043, 1061], "extens": [220, 257, 1043, 1061], "trigger": [220, 257, 1043, 1061], "sent": [220, 257, 1042, 1043, 1061], "pandas_df1": [220, 257], "pandas_df2": [220, 257], "pandas_df2_pa": [220, 257], "na": [220, 257, 1043, 1061], "four": [222, 257], "five": [222, 257, 1069], "bottom_k": [223, 257, 559, 643, 714, 742, 1045, 1061], "include_head": [224, 257], "header_nam": [224, 257], "column_nam": [224, 257], "perhap": [224, 257], "column_2": [224, 257], "name_gener": [224, 257], "base_nam": [224, 257], "my_column_": [224, 257], "my_column_0": [224, 257], "my_column_1": [224, 257], "my_column_2": [224, 257], "new_id": [224, 257], "uniquekeepstrategi": [225, 257, 715, 742], "kept": [225, 257, 715, 742], "decompos": [226, 257, 716, 742], "t_a": [226, 257, 716, 742], "t_b": [226, 257, 716, 742], "t_c": [226, 257, 716, 742], "t_d": [226, 257, 716, 742], "womp": [226, 257, 716, 742], "t_": [226, 257, 716, 742], "t_struct": [226, 257, 716, 742], "step": [227, 257, 574, 605, 606], "unstackdirect": [227, 257], "pivot": [227, 257], "phase": [227, 257], "subject": [227, 257], "ascii_uppercas": [227, 257], "h": [227, 257, 264, 351, 354, 501, 539, 541, 544, 643, 1017, 1019, 1022], "x_0": [227, 257, 363, 364, 365, 643, 851, 852, 853, 1061], "x_1": [227, 257], "y_0": [227, 257, 363, 364, 365, 643, 851, 852, 853, 1061], "y_1": [227, 257], "z_0": [227, 257], "z_1": [227, 257], "syntact": [228, 257, 597, 598, 602, 607, 617, 618, 623, 635, 717, 742, 987, 1061], "sugar": [228, 257, 597, 598, 602, 607, 617, 618, 623, 635, 717, 742, 987, 1061], "coalesc": [228, 257, 539, 717, 742, 1017], "400": [228, 257, 717, 742, 959, 960, 962, 1061], "600": [228, 257, 717, 742, 745], "700": [228, 257, 717, 742], "new_df": [228, 257, 717, 742], "time_column": [229, 257], "frequenc": [229, 257], "forward_fil": [229, 257, 308, 311, 643], "varianc": [230, 257, 365, 399, 494, 565, 633, 643, 718, 742, 853, 891, 967, 1050, 1061], "grow": [231, 257], "is_not": [233, 257, 643, 720, 742], "not_c": [233, 257, 720, 742], "diff": [233, 257, 326, 330, 334, 336, 338, 343, 350, 424, 643, 720, 742, 810, 814, 821, 823, 826, 831, 838, 915, 1061], "_diff": [233, 257, 720, 742], "row_nr": [235, 257, 443, 486, 487, 489, 492, 493, 494, 643, 723, 742, 973, 1061], "named_agg": [237, 724], "_sum": [237, 724], "_mean_squar": [237, 724], "b_sum": [237, 724], "c_mean_squar": [237, 724], "sub": [239, 284, 285, 286, 643, 764, 765, 766], "triangl": [239, 726], "group_df": [239, 726], "deem": [240, 306, 585, 643, 727], "nr": [242, 251, 729, 738], "maxim": [244, 279, 643, 731, 759, 1061], "833333": [245, 732], "minim": [247, 280, 407, 501, 509, 643, 734, 760, 898, 935, 978, 1061], "overview": [257, 643, 654, 742, 1061, 1069], "frameinittyp": [257, 742], "variou": [257, 643, 742, 745, 1061], "entri": [257, 742, 1068], "mydatafram": 257, "notic": [257, 742, 1061], "df4": 257, "df5": 257, "df6": 257, "corr": 257, "drop_in_plac": 257, "drop_nul": [257, 267, 269, 317, 643, 742, 749, 750, 1061], "estimated_s": [257, 1061], "explod": [257, 374, 468, 481, 643, 742, 954, 1061], "find_idx_by_nam": 257, "fold": [257, 452, 580, 587, 588, 619], "frame_equ": [257, 348, 355], "groupby_rol": [257, 486, 487, 488, 489, 490, 492, 493, 494, 643, 676, 742], "hash_row": 257, "hstack": 257, "insert_at_idx": 257, "is_dupl": [257, 643, 1061], "is_empti": [257, 1061], "is_uniqu": [257, 643, 1061], "iter_slic": 257, "melt": [257, 742], "merge_sort": [257, 742], "n_uniqu": [257, 643, 1061], "pipe": [257, 643, 742], "quantil": [257, 474, 490, 643, 742, 948, 963, 1061], "replace_at_idx": 257, "select_seq": [257, 742], "shrink_to_fit": [257, 1061], "take_everi": [257, 643, 742, 1061], "to_dict": 257, "to_dummi": [257, 1061], "to_numpi": [257, 441, 643, 1061], "to_panda": [257, 1061], "to_struct": [257, 520], "unnest": [257, 313, 474, 483, 520, 521, 535, 536, 549, 643, 742, 796, 925, 948, 956, 1013, 1014, 1061], "unstack": 257, "with_columns_seq": [257, 742], "write_avro": 257, "write_databas": 257, "write_delta": 257, "write_excel": 257, "write_json": 257, "write_parquet": 257, "cumprod": [264, 643, 1061], "ghi": [264, 520, 643, 745, 998], "94": [265, 643], "map_alia": [266, 643], "to_uppercas": [266, 521, 643], "confus": [267, 392, 394, 643], "tt": [267, 643], "tf": [267, 269, 643], "ff": [267, 269, 643], "bitwis": [268, 467, 567, 568, 569, 570, 571, 643], "upcast": [270, 643], "skip_nul": [271, 643, 752, 1061], "pass_nam": [271, 643], "applystrategi": [271, 643], "thread_loc": [271, 643], "unknown": [271, 443, 519, 608, 643, 997], "stage": [271, 643], "code": [271, 289, 291, 292, 293, 498, 643, 684, 742, 974, 1061], "amount": [271, 643], "releas": [271, 643, 1069], "gil": [271, 643], "bug": [271, 441, 643, 686, 726, 742, 752, 1061], "discourag": [271, 643], "loop": [271, 643], "a_times_2": [271, 643], "approxim": [272, 573, 643, 742, 1069], "hyperloglog": [272, 573, 643, 742], "algorithm": [272, 573, 643, 742], "cardin": [272, 573, 643, 742], "invers": [273, 274, 275, 276, 277, 278, 643, 753, 754, 755, 756, 757, 758, 1061], "cosin": [273, 274, 304, 305, 441, 643, 753, 754, 789, 790, 1061], "570796": [273, 275, 643, 753, 755, 1061], "hyperbol": [274, 276, 278, 305, 505, 557, 643, 754, 756, 758, 790, 983, 1036, 1061], "sine": [275, 276, 441, 504, 505, 643, 755, 756, 982, 983, 1061], "881374": [276, 643, 756, 1061], "tangent": [277, 278, 556, 557, 643, 757, 758, 1035, 1036, 1061], "785398": [277, 575, 576, 643, 757, 1061], "arg_wher": [282, 643], "substr": [289, 292, 293, 513, 517, 529, 530, 534, 535, 536, 537, 745, 768, 771, 772, 991, 995, 1007, 1008, 1012, 1013, 1014, 1015], "ends_with": [289, 293, 513, 537, 745, 1015], "x00": [289, 291, 292, 293], "xff": [289, 291, 292, 293], "hex": [289, 290, 291, 292, 293, 515, 516, 528, 769, 770, 993, 994, 1006], "code_encoded_hex": [289, 291, 292, 293], "contains_ff": [289, 292, 293], "starts_with_ff": [289, 292, 293], "ends_with_ff": [289, 292, 293], "000000": [289, 291, 292, 293], "ffff00": [289, 291, 292, 293], "0000ff": [289, 291, 292, 293], "transferencod": [290, 291, 515, 516, 769, 770, 993, 994], "strict": [290, 296, 513, 515, 528, 539, 540, 541, 544, 643, 769, 774, 971, 991, 993, 1006, 1017, 1018, 1019, 1022, 1061], "base64": [290, 291, 515, 516, 769, 770, 993, 994], "anywher": [292, 293, 539, 540, 541, 1017, 1018, 1019], "complex": [294, 312, 559, 643, 773, 795, 1045, 1061], "frac": [294, 363, 364, 365, 506, 559, 643, 773, 851, 852, 853, 984, 1045, 1061], "deprec": [295, 568, 570, 579, 589, 592, 610, 614, 620, 627, 631, 643, 674, 697, 742, 751, 796, 948, 1019, 1061], "supersed": [295, 643], "overflow": [296, 310, 311, 528, 552, 643, 774, 793, 794, 1006, 1031, 1061], "to_fram": [297, 348, 355, 539, 796, 948, 972, 973, 1013, 1014, 1017, 1061], "categoricalord": [298, 778], "lexic": [298, 745, 778, 780], "259921": [299, 643, 781, 1061], "587401": [299, 643], "foo_clip": [301, 302, 303, 643], "clip": [302, 303, 643, 786, 787, 1061], "543081": [305, 643, 790, 1061], "cumul": [307, 308, 309, 310, 311, 587, 588, 589, 590, 643, 791, 792, 793, 794, 1061], "a_revers": [307, 308, 309, 310, 311, 442, 482, 551, 643], "value_cummax": [308, 643], "value_cummax_all_fil": [308, 643], "value_cumsum": [311, 643], "value_cumsum_all_fil": [311, 643], "min_period": [312, 363, 364, 365, 485, 486, 487, 488, 489, 490, 492, 493, 494, 621, 622, 643, 795, 851, 852, 853, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1061], "slide": [312, 643, 795, 1061], "realli": [312, 643, 795, 1061], "visit": [312, 643, 795, 1061], "label": [313, 474, 485, 486, 487, 488, 489, 490, 492, 493, 494, 643, 695, 742, 796, 948, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1061], "left_clos": [313, 474, 643, 796, 948, 1061], "include_break": [313, 474, 643, 796, 948, 1061], "bin": [313, 474, 528, 567, 637, 643, 796, 867, 948, 1006, 1055, 1061], "discret": [313, 315, 360, 411, 424, 474, 643, 796, 798, 849, 867, 902, 915, 948, 1061], "plu": [313, 438, 643, 796, 929, 948, 1061], "endpoint": [313, 474, 486, 487, 488, 489, 490, 492, 493, 494, 643, 796, 948, 1061], "observ": [313, 363, 364, 365, 474, 643, 796, 851, 852, 853, 948, 1061], "fall": [313, 474, 484, 643, 796, 871, 948, 957, 1061], "qcut": [313, 643, 796, 1061], "breakpoint": [313, 474, 643, 796, 948, 1061], "brk": [313, 474, 643], "foo_bin": [313, 474, 643], "radian": [314, 575, 643], "pi": [314, 643, 789, 982, 1035, 1061], "720": [314, 476, 643], "540": [314, 476, 643], "360": [314, 476, 643], "180": [314, 332, 346, 359, 476, 643], "null_behavior": [315, 411, 643, 798, 902, 1061], "nullbehavior": [315, 411, 643, 798, 902, 1061], "th": [315, 411, 424, 506, 643, 798, 902, 915, 984, 1061], "drop_nan": [318, 643, 1061], "utc": [319, 322, 327, 347, 539, 541, 745, 803, 806, 811, 835, 1017, 1019], "usual": [319, 803], "vari": [319, 592, 803, 1069], "rare": [319, 803], "countri": [319, 803], "switch": [319, 803], "samoa": [319, 803], "apia": [319, 803], "did": [319, 520, 803, 998], "2011": [319, 803], "dst_offset": [319, 355, 803, 843], "2012": [319, 803], "replace_time_zon": [319, 327, 807, 808, 840], "pacif": [319, 803], "11h": [319, 803], "13h": [319, 803], "lose": [320, 804], "2001": [320, 325, 328, 329, 331, 332, 337, 339, 344, 345, 346, 348, 349, 353, 355, 356, 357, 358, 359, 486, 487, 489, 492, 493, 494, 539, 643, 804, 809, 812, 813, 815, 817, 818, 819, 820, 822, 824, 825, 827, 830, 832, 833, 834, 836, 837, 841, 843, 844, 845, 846, 847, 1017], "time_unit_m": [320, 804], "time_unit_n": [320, 804], "naiv": [321, 805, 1019], "compon": [321, 349, 539, 541, 595, 805, 837, 1017, 1019], "resolv": 321, "tm": [321, 745], "456000": [321, 805], "101000": 321, "456": [321, 745, 805, 1039, 1061], "07": [321, 347, 348, 355, 539, 592, 601, 745, 805, 809, 835, 845, 1017], "101": [321, 528, 1006, 1069], "d1": 321, "d2": 321, "d3": 321, "europ": [322, 327, 347, 355, 806, 811, 835, 843], "london": [322, 327, 347, 355, 806, 811, 835, 843], "gmt": [322, 327, 347, 355, 806, 811, 835, 843], "bst": [322, 327, 347, 355, 806, 811, 835, 843], "weekdai": [325, 345], "ordinal_dai": [325, 357], "day_of_month": [325, 345, 357], "day_of_year": [325, 345, 357], "356": [325, 345, 357], "357": [325, 345, 357], "358": [325, 345, 357], "359": [325, 345, 357], "days_diff": 326, "base_utc_offset": [327, 811], "26": [327, 811], "0m": [327, 811], "epochtimeunit": [328, 601, 812], "unix": [328, 601, 812], "epoch_n": [328, 812], "epoch_": [328, 812], "978307200000000": [328, 353, 812, 841], "978307200": [328, 812], "978393600000000": [328, 353, 812, 841], "978393600": [328, 812], "978480000000000": [328, 353, 812, 841], "978480000": [328, 812], "hours_diff": 330, "leap": [331, 344, 592, 815, 832], "2002": [331, 332, 344, 346, 359, 815, 832, 847], "iso": [332, 356, 357, 816, 844, 845], "2006": [332, 344, 832], "2004": [332, 344, 832], "2005": [332, 344, 832], "1_001": [333, 334, 336, 343], "002": [333, 334, 336, 343, 595, 821, 823, 831], "003": [333, 334, 336, 343], "3000": 333, "997": [333, 334, 336, 343], "997000": 333, "998": [333, 334, 336, 343], "998000": 333, "999": [333, 334, 336, 343, 745, 1069], "999000": [333, 745], "microseconds_diff": 334, "milliseconds_diff": 336, "minutes_diff": 338, "1440": [338, 826], "think": [340, 341, 828, 829], "vectoris": [340, 341, 828, 829], "tseri": [340, 341, 828, 829], "monthend": [340, 828], "rollforward": [340, 828], "monthbegin": [341, 829], "rollback": [341, 829], "nanoseconds_diff": 343, "1000000": [343, 547, 831], "minu": [344, 832], "dictat": [344, 832], "date_plus_1i": [344, 832], "1y2mo": [344, 832], "date_min": 344, "1998": [344, 832], "1999": [344, 745, 832], "2003": [344, 601, 832], "ordin": [345, 477, 643, 833, 950, 1061], "366": [345, 833], "use_earliest": [347, 355, 539, 541, 594, 835, 843, 1017, 1019], "convert_time_zon": [347, 835], "ambigu": [347, 355, 539, 541, 594, 835, 843, 1017, 1019], "earliest": [347, 355, 539, 541, 594, 835, 843, 1017, 1019], "london_timezon": [347, 835], "amsterdam": [347, 835], "london_to_amsterdam": [347, 835], "cet": [347, 835], "cest": [347, 835], "dst": [347, 835], "ts_local": [347, 835], "brussel": [347, 835], "half": [348, 363, 364, 365, 643, 836, 851, 852, 853, 1061], "225": [348, 355], "10m": [348, 355, 836, 843], "milli": [349, 837], "micro": [349, 837], "456789": [349, 745], "654321": 349, "111110": 349, "765431": 349, "sec": [349, 1069], "11111": 349, "seconds_diff": 350, "to_str": [351, 839], "datetime_str": [351, 354], "timestamp_n": [353, 841], "timestamp_m": 353, "978307200000": 353, "978393600000": 353, "978480000000": 353, "strftime": [354, 842], "offset_bi": [355, 843], "15m": [355, 843], "53": [356, 844], "time_unit_u": [358, 846], "32971": [358, 846], "32974": [358, 846], "32976": [358, 846], "718281828459045": [360, 436, 643, 849, 927, 1061], "pk": [360, 643, 849, 1061], "probabl": [360, 474, 643, 849, 948, 1061], "459148": [360, 643], "754888": [360, 643], "eq": [362, 643, 1061], "span": [363, 364, 365, 643, 851, 852, 853, 1061], "half_lif": [363, 364, 365, 643, 851, 852, 853, 1061], "adjust": [363, 364, 365, 506, 643, 851, 852, 853, 984, 1061], "ignore_nul": [363, 364, 365, 643, 851, 852, 853, 1051, 1061], "exponenti": [363, 364, 365, 367, 471, 643, 851, 852, 853, 854, 1061], "weight": [363, 364, 365, 485, 486, 487, 488, 489, 490, 492, 493, 494, 506, 643, 851, 852, 853, 958, 959, 960, 961, 962, 963, 965, 966, 967, 984, 1061], "decai": [363, 364, 365, 643, 851, 852, 853, 1061], "term": [363, 364, 365, 524, 527, 643, 851, 852, 853, 1002, 1005, 1061], "mass": [363, 364, 365, 643, 851, 852, 853, 1061], "gamma": [363, 364, 365, 643, 851, 852, 853, 1061], "foral": [363, 364, 365, 643, 851, 852, 853, 1061], "geq": [363, 364, 365, 643, 851, 852, 853, 1061], "theta": [363, 364, 365, 643, 851, 852, 853, 1061], "life": [363, 364, 365, 643, 851, 852, 853, 1061], "exp": [363, 364, 365, 643, 851, 852, 853, 1061], "ln": [363, 364, 365, 643, 851, 852, 853, 1061], "smooth": [363, 364, 365, 643, 851, 852, 853, 1061], "factor": [363, 364, 365, 558, 643, 851, 852, 853, 1044, 1061], "leq": [363, 364, 365, 643, 851, 852, 853, 1061], "imbal": [363, 364, 365, 643, 851, 852, 853, 1061], "ew": [363, 364, 365, 643, 851, 852, 853, 1061], "w_i": [363, 364, 365, 643, 851, 852, 853, 1061], "recurs": [363, 364, 365, 643, 851, 852, 853, 1061], "y_t": [363, 364, 365, 643, 851, 852, 853, 1061], "y_": [363, 364, 365, 643, 851, 852, 853, 1061], "x_t": [363, 364, 365, 643, 851, 852, 853, 1061], "x_2": [363, 364, 365, 643, 851, 852, 853, 1061], "428571": [363, 643], "bia": [364, 365, 399, 491, 506, 643, 852, 853, 891, 964, 984, 1061], "unbias": [364, 365, 643, 852, 853, 1061], "963624": [364, 643, 852, 1061], "928571": [365, 643, 853, 1061], "wildcard": [366, 581, 587, 588, 599, 619, 643], "regex": [366, 449, 513, 514, 517, 519, 520, 521, 529, 530, 537, 597, 627, 643, 745, 991, 992, 995, 997, 998, 999, 1007, 1008, 1015], "aa": [366, 513, 597, 643, 991], "ba": [366, 597, 643, 745], "cc": [366, 597, 643], "718282": [367, 643], "389056": [367, 643], "54": [367, 643, 1069], "59815": [367, 643], "expand": [368, 448, 449, 480, 643, 745, 855, 1061], "pythonliter": [369, 610, 614, 643, 857, 932, 935, 1061], "extrem": [369, 643, 857, 1061], "group_col": [372, 566, 643], "g1": [372, 566, 643], "g2": [372, 566, 643], "lt": [372, 566, 643, 1061], "gte": [372, 566, 643], "exprlistnamespac": [374, 643], "divis": [376, 560, 643], "truediv": [376, 643], "9774092659964970114": [381, 643], "13614470193936745724": [381, 643], "1101441246220388612": [381, 643], "11638928888656214026": [381, 643], "13382926553367784577": [381, 643], "cumsum": [384, 550, 590, 643, 679, 742, 890, 1061], "interpolationmethod": [385, 643, 870, 1061], "regrid": [385, 643], "grid": [385, 643], "df_original_grid": [385, 643], "grid_point": [385, 643], "df_new_grid": [385, 643], "conflat": [386, 643], "finit": [388, 560, 584, 643, 875, 1061], "optional_memb": [390, 643, 878, 1061], "infinit": [391, 560, 643, 879, 1061], "_isnan": [392, 643], "b_isnan": [392, 643], "negat": [393, 643], "_is_not_nan": [394, 643], "b_is_not_nan": [394, 643], "_not_nul": [395, 643], "a_not_nul": [395, 643], "b_not_nul": [395, 643], "_isnul": [396, 643], "a_isnul": [396, 643], "b_isnul": [396, 643], "constraint": [398, 472, 551, 643], "chain": [398, 472, 551, 634, 643], "undo": [398, 455, 472, 551, 643], "333333": [398, 643, 944, 967, 1061], "fisher": [399, 506, 643, 891, 984, 1061], "fourth": [399, 643, 891, 1061], "subtract": [399, 550, 643, 891, 1061], "distribut": [399, 506, 643, 891, 984, 1061], "elimin": [399, 643, 891, 1061], "bias": [399, 506, 643, 891, 984, 1061], "scipi": [399, 506, 643, 891, 984, 1061], "stat": [399, 506, 643, 891, 984, 1061], "153061": [399, 643], "sublist": [406, 407, 409, 411, 414, 415, 416, 417, 418, 424, 429, 432, 433, 434, 878, 897, 898, 900, 902, 905, 906, 907, 908, 909, 915, 920, 923, 924, 925, 1061], "membership": [409, 900], "listcol": 410, "number_of_two": 410, "blindli": [412, 903], "worth": [412, 903], "enough": [412, 506, 643, 903, 984, 1061], "concat_list": [412, 596, 903], "rank": [412, 584, 596, 643, 903, 1061], "exprnamespac": 413, "flat": [413, 481, 643, 904, 954, 1061], "symmetr": [426, 917], "sdiff": 426, "taken": [429, 533, 920, 1011], "null_on_oob": [433, 924], "cheaper": [433, 924], "n_field_strategi": [434, 925], "tostructstrategi": [434, 925], "first_non_nul": [434, 925], "max_width": [434, 925], "field_0": [434, 925], "field_1": [434, 925], "field_n": [434, 925], "pre": [434, 474, 617, 620, 635, 643, 948, 1061], "n0": 434, "n1": 434, "logarithm": [436, 437, 438, 643, 927, 928, 929, 1061], "584963": [436, 643], "30103": [437, 643], "60206": [437, 643], "natur": [438, 643, 929, 1061], "693147": [438, 643], "098612": [438, 643], "386294": [438, 643], "lowest": [439, 643], "9223372036854775808": [439, 643], "agg_list": [441, 643], "elementwis": [441, 485, 486, 487, 489, 493, 643, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1061], "third": [441, 643], "parti": [441, 643], "book": [441, 643], "map_dict": [441, 643, 1061], "argmax": [441, 643], "b_revers": [442, 482, 551, 643], "rstrip": [442, 643], "_revers": [442, 482, 551, 643], "remap": [443, 643, 931, 1061], "lookup": [443, 643, 931, 1061], "country_code_dict": [443, 643], "ca": [443, 643], "canada": [443, 643], "de": [443, 643], "germani": [443, 643], "fr": [443, 643], "franc": [443, 643], "country_cod": [443, 643], "rest": [443, 643], "exprmetanamespac": [447, 450], "computeerror": [451, 528, 654, 1006], "tree": 454, "keep_nam": [455, 643], "modulu": [458, 643], "xlog2": [460, 471, 643], "poison": [462, 463, 643, 940, 941, 1061], "nanmax": [462, 463, 643, 940, 941, 1061], "wherea": [462, 463, 592, 643, 678, 685, 742, 940, 941, 1061], "inequ": [464, 643], "ne": [465, 643, 1061], "more_expr": [468, 568, 570, 577, 580, 582, 583, 589, 610, 614, 627, 643], "mapping_strategi": [468, 643], "windowmappingstrategi": [468, 643], "group_to_row": [468, 643], "outcom": [468, 643], "group_dtyp": [468, 643], "warn": [468, 643], "flatten": [468, 643], "_max": [468, 643], "c_max": [468, 643], "_min": [468, 643], "c_min": [468, 643], "percent": [469, 643, 944, 1061], "090909": [469, 643], "extract_numb": [470, 643], "digit": [470, 495, 520, 547, 643, 968, 992, 998, 1025, 1061, 1069], "scale_negative_even": [470, 643], "expon": [471, 643, 1061], "reverse_": [472, 643], "reverse_a": [472, 643], "reverse_b": [472, 643], "allow_dupl": [474, 643, 948, 1061], "duplicateerror": [474, 643, 654, 948, 1061], "cut": [474, 643, 948, 1061], "566371": [476, 643], "424778": [476, 643], "283185": [476, 643], "141593": [476, 643, 753, 1061], "rankmethod": [477, 643, 950, 1061], "ti": [477, 643, 950, 1061], "competit": [477, 643, 950, 1061], "highest": [477, 563, 584, 643, 742, 950, 1061], "immedi": [477, 574, 578, 592, 593, 605, 606, 617, 620, 626, 631, 632, 635, 643, 950, 1061], "64bit": [479, 643, 952, 1061], "safe": [479, 643, 952, 1019, 1042, 1061], "fruits_revers": [482, 643], "cars_revers": [482, 643], "rle": [484, 643, 957, 1061], "themselv": [484, 643, 957, 1061], "a_r": [484, 643], "ab_r": [484, 643], "window_s": [485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 621, 622, 643, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 1061], "rolling_min": [485, 643, 958, 1061], "rolling_max": [485, 643, 958, 1061], "rolling_mean": [485, 643, 958, 1061], "rolling_sum": [485, 643, 958, 1061], "multipli": [485, 486, 487, 489, 492, 493, 494, 643, 958, 959, 960, 961, 962, 963, 965, 966, 967, 1061], "358899": [485, 643], "041452": [485, 643], "567764": [485, 643], "travers": [486, 487, 489, 493, 643, 959, 960, 962, 965, 966, 967, 1061], "vector": [486, 487, 489, 493, 643, 959, 960, 962, 965, 966, 967, 1061], "5h": [486, 487, 488, 489, 490, 492, 493, 494, 643], "df_tempor": [486, 487, 489, 492, 493, 494, 643], "closur": [486, 487, 492, 493, 494, 643], "rolling_row_max": [486, 643], "2h": [486, 487, 489, 492, 493, 494, 643], "rolling_row_mean": [487, 643], "rolling_row_min": [489, 643], "625": [490, 643], "skew": [491, 643, 964, 1061], "381802": [491, 643, 964, 1061], "47033": [491, 643, 964, 1061], "38180177416060584": [491, 643, 964, 1061], "47033046033698594": [491, 643, 964, 1061], "433013": [492, 643, 710, 742], "rolling_row_std": [492, 643], "rolling_row_sum": [493, 643], "39": [493, 601, 643], "63": [493, 643], "69": [493, 643], "1875": [494, 643, 718, 742], "rolling_row_var": [494, 643], "searchsortedsid": [497, 643, 970, 1061], "leftmost": [497, 643, 970, 1061], "rightmost": [497, 643, 970, 1061], "six": [497, 643], "extrema": [501, 643, 978, 1061], "112": [501, 643, 1069], "129": [501, 643], "i8": [501, 617, 620, 635, 643, 798, 955, 1048, 1061], "8589934592": [501, 643], "1073741824": [501, 643], "content": [502, 564, 643, 980, 1061], "175201": [505, 643, 983, 1061], "about": [506, 513, 519, 520, 529, 643, 984, 991, 997, 998, 1007, 1061, 1069], "unimod": [506, 643, 984, 1061], "skewtest": [506, 643, 984, 1061], "speak": [506, 643, 984, 1061], "g_1": [506, 643, 984, 1061], "m_3": [506, 643, 984, 1061], "m_2": [506, 643, 984, 1061], "m_i": [506, 643, 984, 1061], "sum_": [506, 643, 984, 1061], "texttt": [506, 643, 984, 1061], "k_3": [506, 643, 984, 1061], "k_2": [506, 643, 984, 1061], "sqrt": [506, 575, 576, 643, 984, 1061], "343622": [506, 643], "whole": [508, 509, 519, 643, 726, 742, 997], "value1": [509, 643], "value2": [509, 643], "attain": [509, 643], "414214": [510, 643, 987, 1061], "sensit": [513, 520, 529, 991, 998, 1007], "ilmsuxu": [513, 519, 520, 529, 991, 997, 998, 1007], "default_match": 513, "insensitive_match": 513, "section": [513, 519, 520, 529, 991, 997, 998, 1007], "crab": [513, 991], "dog": [513, 543, 546, 583, 991, 1021, 1024], "rab": [513, 991], "success": [514, 520, 992, 998], "overlap": [514, 520, 992, 998], "captur": [514, 519, 520, 521, 992, 997, 998, 999], "123": [514, 520, 530, 745, 992, 998, 1008, 1039, 1061], "bla": [514, 520, 992, 998], "asd": [514, 520, 992, 998], "678": [514, 520, 992, 998], "910t": [514, 520, 992, 998], "count_digit": 514, "666f6f": [516, 994], "626172": [516, 994], "mango": [517, 537, 995, 1015], "go": [517, 995], "has_suffix": 517, "group_index": [519, 997], "nthose": [519, 997], "nodd": [519, 997], "nthe": [519, 997], "url": [519, 521, 997, 999], "vote": [519, 521, 997, 999], "ballon_dor": [519, 521, 997, 999], "404": [519, 521, 997, 999], "ref": [519, 521, 997, 999], "candid": [519, 521, 997, 999], "messi": [519, 521, 997, 999], "ronaldo": [519, 997], "email": [520, 998], "real": [520, 998], "some_account": [520, 998], "somewher": [520, 998], "net": [520, 998], "jkl": [520, 998], "uvw": [520, 998], "co": [520, 643, 998, 1061], "uk": [520, 998], "address": 520, "xi": [520, 998], "insensit": [520, 529, 745, 991, 998, 1007], "quantifi": [520, 998], "email_part": [520, 998], "extracted_nr": 520, "910": [520, 998], "unnam": [521, 999], "weghorst": [521, 999], "candi": 521, "json_path_match": [522, 1000], "jsonpath": [522, 523, 1000, 1001], "json_path": [523, 1001], "json_val": [523, 1001], "n_char": [524, 1002], "caf\u00e9": [524, 527, 1002, 1005], "345": [524, 527, 1002, 1005], "\u6771\u4eac": [524, 527, 1002, 1005], "nchar": [524, 527], "fill_char": [525, 531, 1003, 1009], "justifi": [525, 531, 1003, 1009], "pad": [525, 531, 547, 1003, 1009, 1025], "cow": [525, 531, 1003, 1009], "monkei": [525, 531, 1003, 1009], "hippopotamu": [525, 531, 1003, 1009], "strip": [526, 532, 1004, 1010], "tworld": [526, 1004, 1016], "wod": [526, 1004], "rld": [526, 538, 1004], "radix": [528, 1006], "parseerror": [528, 1006], "becom": [528, 1006], "silent": [528, 1006], "110": [528, 1006], "010": [528, 1006], "fa1e": [528, 1006], "ff00": [528, 1006], "cafe": [528, 1006], "64030": [528, 1006], "65280": [528, 1006], "51966": [528, 1006], "replace_al": [529, 1007], "citi": 529, "philadelphia": 529, "season": 529, "spring": 529, "summer": 529, "autumn": 529, "winter": 529, "weather": [529, 1007], "raini": [529, 1007], "sunni": [529, 1007], "cloudi": 529, "snowi": 529, "foggi": [529, 1007], "123abc": [529, 1007], "abc456": [529, 1007], "abcabc": [530, 1008], "123a123": [530, 1008], "bc": [530, 627, 1008], "trail": [532, 538, 1010, 1016], "oldw": 532, "he": 532, "subslic": [533, 1011], "pear": [533, 1011], "papaya": [533, 1011], "dragonfruit": [533, 1011], "s_slice": 533, "ear": [533, 1011], "aya": [533, 1011], "uit": [533, 1011], "ya": [533, 1011], "onf": [533, 1011], "a_1": [535, 1013, 1038, 1061], "d_4": [535, 1013], "rename_field": [535, 536, 796, 948, 1013, 1014, 1061], "first_part": [535, 536, 1013, 1014], "second_part": [535, 536, 1013, 1014], "remaind": [536, 1014], "app": [537, 1015], "has_prefix": 537, "nworld": 538, "ow": 538, "hell": [538, 1016], "polarstemporaltyp": [539, 1017], "introduc": [539, 540, 541, 1017, 1018, 1019], "penalti": [539, 540, 541, 1017, 1018, 1019], "clean": [539, 540, 541, 1017, 1018, 1019], "beforehand": [539, 540, 541, 1017, 1018, 1019], "certainli": [539, 540, 541, 1017, 1018, 1019], "3f": [539, 541, 1017, 1019], "00z": [539, 541, 1017, 1019], "sun": [539, 1017], "jul": [539, 1017], "34": [539, 1017], "inference_length": [542, 1020], "3420": [542, 1020], "120134": [542, 1020], "3212": [542, 1020], "143": [542, 1020, 1069], "lowercas": [543, 1021], "variant": [543, 545, 546], "titlecas": [545, 1023], "sing": [545, 1023], "welcom": [545, 1023], "THERE": [545, 1023], "NO": [545, 745, 1023], "There": [545, 1023], "uppercas": [546, 1024], "100000": 547, "0010": 547, "0001": 547, "00000": 547, "00001": 547, "cd": [548, 549], "struct_col": [548, 549], "www": 549, "xxx": 549, "yyi": 549, "zzz": 549, "obvious": 549, "structfieldnotfounderror": [549, 654], "761594": [557, 643, 1036, 1061], "replic": [558, 643, 1044, 1061], "vals_phys": [558, 643], "floordiv": [560, 643], "ieee": [560, 643], "754": [560, 643], "mathemat": [560, 596, 643], "undefin": [560, 643], "On": [560, 643], "operand": [560, 643], "infin": [560, 643], "value_count": [562, 643, 1061], "9223372036854775807": [563, 643], "multithread": [564, 643], "binary_str": [567, 643], "zfill": [567, 643], "250": [567, 643, 960, 1061, 1069], "bin_x": [567, 643], "bin_i": [567, 643], "xor_xi": [567, 643], "bin_xor_xi": [567, 643], "00001010": [567, 643], "00000001": [567, 643], "00001011": [567, 643], "00001000": [567, 643], "00000010": [567, 643], "11111010": [567, 643], "00000011": [567, 643], "249": [567, 643], "11111001": [567, 643], "01000010": [567, 643], "00000100": [567, 643], "70": [567, 643], "01000110": [567, 643], "AND": [568, 569, 745, 1042, 1061], "any_horizont": 570, "returns_scalar": 572, "product_a": 572, "49": 572, "polarsintegertyp": [574, 605, 606], "arctan": [575, 576, 643, 1061], "angl": [575, 576], "plane": [575, 576], "rai": [575, 576], "tworoottwo": [575, 576], "arctan2d": 575, "atan2d": [575, 576], "atan2": [575, 576], "135": [575, 576], "356194": [575, 576], "arctan2": 576, "arg_tru": [578, 643, 1061], "more_nam": 581, "hamburg": 581, "lag": 582, "mimic": 582, "a_lag_": 582, "a_rol": 582, "swim": 583, "walk": 583, "full_sent": 583, "correlationmethod": 584, "propagate_nan": 584, "spearman": 584, "544705": 584, "covari": [586, 622], "acc": [587, 588, 599, 619], "include_init": 587, "accumul": [587, 588, 599, 619], "fn": [587, 588, 599, 619], "new_valu": [587, 588, 599, 619], "cumreduc": 587, "cumsum_horizont": 589, "1h30m25": [592, 593, 631, 632], "further": [592, 593, 1043, 1061], "granular": 592, "finer": 592, "permut": 592, "februari": 592, "febrari": 592, "28th": 592, "march": 592, "31st": 592, "approach": 592, "prior": 592, "began": 592, "januari": 592, "1mo_satur": 592, "month_end": 592, "routin": 592, "1985": 592, "america": 592, "new_york": 592, "est": 592, "999999": [594, 630, 631, 632, 745], "tbl_width_char": 595, "120": 595, "add_week": 595, "add_dai": 595, "add_second": 595, "add_milli": 595, "add_hour": 595, "a_b_doubl": 596, "f_string": 600, "placehold": 600, "hello_": 600, "_world": 600, "foo_": 600, "_bar_": 600, "foo_a_bar_1": 600, "foo_b_bar_2": 600, "foo_c_bar_3": 600, "epoch": 601, "timestep": 601, "1666683077": 601, "1666683099": 601, "12345": [601, 782, 862, 968, 1061], "12346": 601, "agg_group": [602, 643], "allow_object": 608, "valueexcept": 608, "test_func": 609, "max_horizont": 610, "min_horizont": [614, 623], "power": [624, 1061], "a_a": 624, "a_txt": 624, "605551": 625, "605551275463989": 625, "my_struct": 626, "afterward": 634, "own": [634, 1069], "isn": 634, "thens": 634, "elif": 634, "pick": 634, "arr": [636, 1042, 1053, 1061], "sometim": 642, "and_": 643, "approx_n_uniqu": [643, 742], "arcco": [643, 1061], "arccosh": [643, 1061], "arcsin": [643, 1061], "arcsinh": [643, 1061], "arctanh": [643, 1061], "arg_max": [643, 1061], "arg_min": [643, 1061], "arg_sort": [643, 1061], "arg_uniqu": [643, 1061], "backward_fil": 643, "cbrt": [643, 1061], "clip_max": [643, 1061], "clip_min": [643, 1061], "cosh": [643, 1061], "cumcount": 643, "cummax": [643, 1061], "cummin": [643, 1061], "cumulative_ev": [643, 1061], "entropi": [643, 1061], "eq_miss": [643, 1061], "ewm_mean": [643, 1061], "ewm_std": [643, 1061], "ewm_var": [643, 1061], "extend_const": [643, 1061], "from_json": [643, 742], "ge": [643, 1061], "gt": [643, 1061], "implod": [643, 1061], "inspect": [643, 742], "is_between": [643, 1061], "is_finit": [643, 1061], "is_first": [643, 1061], "is_in": [643, 1061], "is_infinit": [643, 1061], "is_nan": [643, 1061], "is_not_nan": [643, 1061], "is_not_nul": [643, 1061], "kurtosi": [643, 1061], "le": [643, 1061], "log10": [643, 1061], "log1p": [643, 1061], "mod": 643, "mul": 643, "nan_max": [643, 1061], "nan_min": [643, 1061], "ne_miss": [643, 1061], "or_": 643, "pct_chang": [643, 1061], "pow": [643, 1061], "reinterpret": [643, 1061], "repeat_bi": 643, "rle_id": [643, 1061], "rolling_appli": [643, 1061], "rolling_median": [643, 1061], "rolling_quantil": [643, 1061], "rolling_skew": [643, 1061], "rolling_std": [643, 1061], "rolling_var": [643, 1061], "search_sort": [643, 1061], "shrink_dtyp": [643, 1061], "sin": [643, 1061], "sinh": [643, 1061], "sort_bi": 643, "tan": [643, 1061], "to_phys": [643, 779, 1061], "unique_count": [643, 1061], "xor": 643, "expos": 654, "miscellan": 654, "arrowerror": 654, "columnnotfounderror": 654, "invalidoperationerror": 654, "polarspanicerror": 654, "schemaerror": 654, "schemafieldnotfounderror": 654, "shapeerror": 654, "parametr": 654, "build_info": 654, "get_index_typ": 654, "show_vers": 654, "threadpool_s": 654, "sqlcontext": [654, 1068], "hit": [658, 742], "node": [658, 679, 686, 690, 695, 698, 742], "huge": [661, 742], "saver": [661, 742], "stringio": [663, 674, 703, 742], "snippet": [665, 742], "purpos": [669, 742], "influenc": [669, 686, 742], "deseri": [674, 697, 703, 742], "lazygroupbi": [675, 676, 677, 742], "other_lf": [681, 742], "validate_output_schema": [686, 742], "streamabl": [686, 690, 742], "past": [686, 742], "paramount": [686, 742], "elig": [686, 742], "invari": [686, 742], "upheld": [686, 742], "prune": [686, 742], "show_plot": [695, 742], "truncate_nod": [695, 742], "figsiz": [695, 707, 742], "gantt": [695, 742], "plot": [695, 707, 742], "groupby_partit": [695, 742], "470": [695, 742], "475": [695, 742], "1964": [695, 742], "swap": [698, 742], "localproject": [703, 742], "dataframescan": [703, 742], "output_schema": [703, 742], "output_path": [707, 742], "raw_output": [707, 742], "figur": [707, 742], "290994": [710, 742], "118034": [710, 742], "extern": [722, 742], "lf_other": [722, 742], "afoo": [722, 742], "cfoo": [722, 742], "train_lf": [722, 742], "feature_0": [722, 742], "feature_1": [722, 742], "test_lf": [722, 742], "_train": [722, 742], "feature_0_train": [722, 742], "opaqu": 726, "idiomat": 726, "my_column": 726, "lf5": 742, "lf6": 742, "explain": 742, "read_json": 742, "sink_ipc": 742, "sink_parquet": 742, "with_context": 742, "intuit": 745, "relat": 745, "broadcast": 745, "emploi": 745, "complement": 745, "plenti": 745, "cde": 745, "fgg": 745, "jjk": 745, "lmn": 745, "opp": 745, "qqr": 745, "by_dtyp": 745, "as_expr": 745, "dispatch": 745, "selectortyp": 745, "2024": 745, "1_234_500": 745, "5_000_555": 745, "1234500": 745, "5000555": 745, "2010": 745, "4_500_000": 745, "4500000": 745, "3265500": 745, "by_nam": 745, "zap": 745, "tstamp_tokyo": 745, "987654": 745, "123465": 745, "tstamp_utc": 745, "2025": 745, "666000": 745, "tstamp": 745, "600000": 745, "123000": 745, "666": 745, "td1": 745, "123456": 745, "987000": 745, "td2": 745, "td3": 745, "2m": [745, 825], "456m": 745, "7d": 745, "456789\u00b5": 745, "18d": 745, "999999\u00b5": 745, "23h": 745, "987m": 745, "14d": 745, "16h": 745, "39m": 745, "21d": 745, "456001\u00b5": 745, "expand_selector": 745, "789": 745, "colz": [745, 1069], "everyth": 745, "is_selector": 745, "obj": 745, "include_categor": 745, "set_ord": [745, 780], "2345": 745, "3456": 745, "append_chunk": [751, 1061], "behav": [751, 1061], "super": [751, 1061], "292432": [754, 1061], "549306": [758, 1061], "catnamespac": 775, "56789": [782, 862, 968, 1061], "901234": [782, 862, 968, 1061], "1232e": [789, 1061], "break_point_label": [796, 948, 1061], "break_point": [796, 867, 948, 1061], "category_label": [796, 948, 1061], "quick": [797, 1061, 1069], "series_num": [797, 1061], "581139": [797, 1061], "series_str": [797, 1061], "datetimeindex": [799, 1061], "datetimenamespac": 802, "ser": [803, 807, 808, 811, 840, 843], "kathmandu": [807, 808, 840], "0545": [807, 808, 840], "500m": [820, 822, 830, 837], "500000": 820, "500000000": 830, "date_minus_1y_2mon": 832, "165": [836, 843], "series_equ": [836, 843, 1061], "timestamp_u": 841, "978307200000000000": 841, "978393600000000000": 841, "978480000000000000": 841, "005": [849, 1061], "06293300616044681": [849, 1061], "65": [849, 1061], "8568409950394724": [849, 1061], "4000000": [850, 1061], "814697265625": [850, 1061], "bitmask": [864, 1061], "swiftli": [864, 1061], "10734580197236529959": [865, 1061], "3022416320763508302": [865, 1061], "13756996518000038261": [865, 1061], "bin_count": [867, 1061], "occurr": [867, 1061], "a_count": [867, 1061], "listnamespac": 894, "field_2": 925, "n00": 925, "n01": 925, "n02": 925, "2147483648": [930, 1061], "iso3166": [931, 1061], "tur": [931, 1023, 1061], "jpn": [931, 1061], "nld": [931, 1061], "country_lookup": [931, 1061], "japan": [931, 1061], "t\u00fcrkiy": [931, 1061], "netherland": [931, 1061], "unrecognis": [931, 1061], "unspecifi": [931, 1061], "country_nam": [931, 1061], "166667": [944, 1061], "142857": [944, 1061], "peak": [945, 946, 1061], "nanstd": [958, 1061], "858612": [958, 1061], "200": [959, 960, 962, 1061], "150": [960, 1061], "350": [960, 1061], "450": [960, 1061], "dev": [965, 1061], "527525": [965, 1061], "57": [968, 1061, 1069], "frequent": [972, 973, 1061], "mutat": [973, 1061], "2246e": [982, 1035, 1061], "stringnamespac": 989, "orld": 1010, "6331e16": [1035, 1061], "lib": [1037, 1061], "int64arrai": [1037, 1061], "a_2": [1038, 1061], "a_3": [1038, 1061], "s_from_str_repr": [1040, 1061], "zero_copy_onli": [1042, 1061], "writabl": [1042, 1061], "complet": [1042, 1061], "presenc": [1042, 1061], "immut": [1042, 1061], "127": [1048, 1061], "seriesview": [1051, 1061], "arraylik": 1061, "dtype_if_empti": 1061, "position": 1061, "scenario": 1061, "chunk_length": 1061, "get_chunk": 1061, "has_valid": 1061, "hist": 1061, "is_boolean": 1061, "is_float": 1061, "is_integ": 1061, "is_numer": [1061, 1069], "is_sort": 1061, "is_tempor": 1061, "is_utf8": 1061, "new_from_index": 1061, "peak_max": 1061, "peak_min": 1061, "set_at_idx": 1061, "two_a": 1068, "__enter__": 1068, "__exit__": 1068, "exc_typ": 1068, "baseexcept": 1068, "exc_val": 1068, "exc_tb": 1068, "tracebacktyp": 1068, "guid": 1069, "easi": 1069, "machin": 1069, "xdist": 1069, "significantli": 1069, "hardwar": 1069, "setup": 1069, "numeric_dtyp": 1069, "null_probabililti": 1069, "test_numer": 1069, "col0": 1069, "col4": 1069, "29096": 1069, "485": 1069, "2147483647": 1069, "8257e14": 1069, "7508": 1069, "37338": 1069, "7264": 1069, "321": 1069, "16996": 1069, "121": 1069, "361": 1069, "63204": 1069, "1443e235": 1069, "conform": 1069, "ascii_lett": 1069, "id_char": 1069, "alphabet": 1069, "price": 1069, "min_valu": 1069, "max_valu": 1069, "test_price_calcul": 1069, "a101": 1069, "8nin": 1069, "qhoo": 1069, "714": 1069, "544": 1069, "i0e0": 1069, "0000": 1069, "test_miscellan": 1069, "235": 1069, "87": 1069, "186": 1069, "174": 1069, "179": 1069, "213": 1069, "221": 1069, "86": 1069, "255": 1069}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [49, 0, 1, "", "List"], [50, 0, 1, "", "Null"], [51, 0, 1, "", "Object"], [1068, 0, 1, "", "SQLContext"], [58, 0, 1, "", "StringCache"], [59, 0, 1, "", "Struct"], [60, 0, 1, "", "Time"], [61, 0, 1, "", "UInt16"], [62, 0, 1, "", "UInt32"], [63, 0, 1, "", "UInt64"], [64, 0, 1, "", "UInt8"], [65, 0, 1, "", "Unknown"], [66, 0, 1, "", "Utf8"], [67, 4, 1, "", "align_frames"], [568, 4, 1, "", "all"], [569, 4, 1, "", "all_horizontal"], [570, 4, 1, "", "any"], [571, 4, 1, "", "any_horizontal"], [572, 4, 1, "", "apply"], [573, 4, 1, "", "approx_n_unique"], [574, 4, 1, "", "arange"], [575, 4, 1, "", "arctan2"], [576, 4, 1, "", "arctan2d"], [577, 4, 1, "", "arg_sort_by"], [578, 4, 1, "", "arg_where"], [579, 4, 1, "", "avg"], [72, 4, 1, "", "build_info"], [580, 4, 1, "", "coalesce"], [581, 4, 1, "", "col"], [73, 4, 1, "", "collect_all"], [74, 4, 1, "", "concat"], [582, 4, 1, "", "concat_list"], [583, 4, 1, "", "concat_str"], [584, 4, 1, "", "corr"], [585, 4, 1, "", "count"], [586, 4, 1, "", "cov"], [587, 4, 1, "", "cumfold"], [588, 4, 1, "", "cumreduce"], [589, 4, 1, "", "cumsum"], [590, 4, 1, "", "cumsum_horizontal"], [591, 4, 1, "", "date"], [592, 4, 1, "", "date_range"], [593, 4, 1, "", "date_ranges"], [594, 4, 1, "", "datetime"], [595, 4, 1, "", "duration"], [596, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [597, 4, 1, "", "exclude"], [598, 4, 1, "", "first"], [599, 4, 1, "", "fold"], [600, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [601, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [602, 4, 1, "", "groups"], [603, 4, 1, "", "head"], [604, 4, 1, "", "implode"], [605, 4, 1, "", "int_range"], [606, 4, 1, "", "int_ranges"], [607, 4, 1, "", "last"], [608, 4, 1, "", "lit"], [609, 4, 1, "", "map"], [610, 4, 1, "", "max"], [611, 4, 1, "", "max_horizontal"], [612, 4, 1, "", "mean"], [613, 4, 1, "", "median"], [614, 4, 1, "", "min"], [615, 4, 1, "", "min_horizontal"], [616, 4, 1, "", "n_unique"], [617, 4, 1, "", "ones"], [618, 4, 1, "", "quantile"], [100, 4, 1, "", "read_avro"], [101, 4, 1, "", "read_csv"], [102, 4, 1, "", "read_csv_batched"], [103, 4, 1, "", "read_database"], [104, 4, 1, "", "read_delta"], [105, 4, 1, "", "read_excel"], [106, 4, 1, "", "read_ipc"], [107, 4, 1, "", "read_ipc_schema"], [108, 4, 1, "", "read_json"], [109, 4, 1, "", "read_ndjson"], [110, 4, 1, "", "read_parquet"], [111, 4, 1, "", "read_parquet_schema"], [619, 4, 1, "", "reduce"], [620, 4, 1, "", "repeat"], [621, 4, 1, "", "rolling_corr"], [622, 4, 1, "", "rolling_cov"], [112, 4, 1, "", "scan_csv"], [113, 4, 1, "", "scan_delta"], [114, 4, 1, "", "scan_ipc"], [115, 4, 1, "", "scan_ndjson"], [116, 4, 1, "", "scan_parquet"], [117, 4, 1, "", "scan_pyarrow_dataset"], [623, 4, 1, "", "select"], [745, 6, 0, "-", "selectors"], [118, 4, 1, "", "set_random_seed"], [119, 4, 1, "", "show_versions"], [624, 4, 1, "", "sql_expr"], [625, 4, 1, "", "std"], [626, 4, 1, "", "struct"], [627, 4, 1, "", "sum"], [628, 4, 1, "", "sum_horizontal"], [629, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [630, 4, 1, "", "time"], [631, 4, 1, "", "time_range"], [632, 4, 1, "", "time_ranges"], [130, 4, 1, "", "using_string_cache"], [633, 4, 1, "", "var"], [634, 4, 1, "", "when"], [635, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[133, 1, 1, "", "__dataframe__"], [134, 1, 1, "", "apply"], [135, 1, 1, "", "bottom_k"], [136, 1, 1, "", "clear"], [137, 1, 1, "", "clone"], [138, 2, 1, "", "columns"], [139, 1, 1, "", "corr"], [140, 1, 1, "", "describe"], [141, 1, 1, "", "drop"], [142, 1, 1, "", "drop_in_place"], [143, 1, 1, "", "drop_nulls"], [144, 2, 1, "", "dtypes"], [145, 1, 1, "", "estimated_size"], [146, 1, 1, "", "explode"], [147, 1, 1, "", "extend"], [148, 1, 1, "", "fill_nan"], [149, 1, 1, "", "fill_null"], [150, 1, 1, "", "filter"], [151, 1, 1, "", "find_idx_by_name"], [152, 2, 1, "", "flags"], [153, 1, 1, "", "fold"], [154, 1, 1, "", "frame_equal"], [155, 1, 1, "", "get_column"], [156, 1, 1, "", "get_columns"], [157, 1, 1, "", "glimpse"], [158, 1, 1, "", "groupby"], [159, 1, 1, "", "groupby_dynamic"], [160, 1, 1, "", "groupby_rolling"], [161, 1, 1, "", "hash_rows"], [162, 1, 1, "", "head"], [163, 2, 1, "", "height"], [164, 1, 1, "", "hstack"], [165, 1, 1, "", "insert_at_idx"], [166, 1, 1, "", "interpolate"], [167, 1, 1, "", "is_duplicated"], [168, 1, 1, "", "is_empty"], [169, 1, 1, "", "is_unique"], [170, 1, 1, "", "item"], [171, 1, 1, "", "iter_rows"], [172, 1, 1, "", "iter_slices"], [173, 1, 1, "", "join"], [174, 1, 1, "", "join_asof"], [175, 1, 1, "", "lazy"], [176, 1, 1, "", "limit"], [177, 1, 1, "", "max"], [178, 1, 1, "", "mean"], [179, 1, 1, "", "median"], [180, 1, 1, "", "melt"], [181, 1, 1, "", "merge_sorted"], [182, 1, 1, "", "min"], [183, 1, 1, "", "n_chunks"], [184, 1, 1, "", "n_unique"], [185, 1, 1, "", "null_count"], [186, 1, 1, "", "partition_by"], [187, 1, 1, "", "pipe"], [188, 1, 1, "", "pivot"], [189, 1, 1, "", "product"], [190, 1, 1, "", "quantile"], [191, 1, 1, "", "rechunk"], [192, 1, 1, "", "rename"], [193, 1, 1, "", "replace"], [194, 1, 1, "", "replace_at_idx"], [195, 1, 1, "", "reverse"], [196, 1, 1, "", "row"], [197, 1, 1, "", "rows"], [198, 1, 1, "", "rows_by_key"], [199, 1, 1, "", "sample"], [200, 2, 1, "", "schema"], [201, 1, 1, "", "select"], [202, 1, 1, "", "select_seq"], [203, 1, 1, "", "set_sorted"], [204, 2, 1, "", "shape"], [205, 1, 1, "", "shift"], [206, 1, 1, "", "shift_and_fill"], [207, 1, 1, "", "shrink_to_fit"], [208, 1, 1, "", "slice"], [209, 1, 1, "", "sort"], [210, 1, 1, "", "std"], [211, 1, 1, "", "sum"], [212, 1, 1, "", "tail"], [213, 1, 1, "", "take_every"], [214, 1, 1, "", "to_arrow"], [215, 1, 1, "", "to_dict"], [216, 1, 1, "", "to_dicts"], [217, 1, 1, "", "to_dummies"], [218, 1, 1, "", "to_init_repr"], [219, 1, 1, "", "to_numpy"], [220, 1, 1, "", "to_pandas"], [221, 1, 1, "", "to_series"], [222, 1, 1, "", "to_struct"], [223, 1, 1, "", "top_k"], [224, 1, 1, "", "transpose"], [225, 1, 1, "", "unique"], [226, 1, 1, "", "unnest"], [227, 1, 1, "", "unstack"], [228, 1, 1, "", "update"], [229, 1, 1, "", "upsample"], [230, 1, 1, "", "var"], [231, 1, 1, "", "vstack"], [232, 2, 1, "", "width"], [233, 1, 1, "", "with_columns"], [234, 1, 1, "", "with_columns_seq"], [235, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[263, 1, 1, "", "abs"], [264, 1, 1, "", "add"], [265, 1, 1, "", "agg_groups"], [266, 1, 1, "", "alias"], [267, 1, 1, "", "all"], [268, 1, 1, "", "and_"], [269, 1, 1, "", "any"], [270, 1, 1, "", "append"], [271, 1, 1, "", "apply"], [272, 1, 1, "", "approx_n_unique"], [273, 1, 1, "", "arccos"], [274, 1, 1, "", "arccosh"], [275, 1, 1, "", "arcsin"], [276, 1, 1, "", "arcsinh"], [277, 1, 1, "", "arctan"], [278, 1, 1, "", "arctanh"], [279, 1, 1, "", "arg_max"], [280, 1, 1, "", "arg_min"], [281, 1, 1, "", "arg_sort"], [282, 1, 1, "", "arg_true"], [283, 1, 1, "", "arg_unique"], [288, 1, 1, "", "backward_fill"], [294, 1, 1, "", "bottom_k"], [295, 1, 1, "", "cache"], [296, 1, 1, "", "cast"], [299, 1, 1, "", "cbrt"], [300, 1, 1, "", "ceil"], [301, 1, 1, "", "clip"], [302, 1, 1, "", "clip_max"], [303, 1, 1, "", "clip_min"], [304, 1, 1, "", "cos"], [305, 1, 1, "", "cosh"], [306, 1, 1, "", "count"], [307, 1, 1, "", "cumcount"], [308, 1, 1, "", "cummax"], [309, 1, 1, "", "cummin"], [310, 1, 1, "", "cumprod"], [311, 1, 1, "", "cumsum"], [312, 1, 1, "", "cumulative_eval"], [313, 1, 1, "", "cut"], [314, 1, 1, "", "degrees"], [315, 1, 1, "", "diff"], [316, 1, 1, "", "dot"], [317, 1, 1, "", "drop_nans"], [318, 1, 1, "", "drop_nulls"], [360, 1, 1, "", "entropy"], [361, 1, 1, "", "eq"], [362, 1, 1, "", "eq_missing"], [363, 1, 1, "", "ewm_mean"], [364, 1, 1, "", "ewm_std"], [365, 1, 1, "", "ewm_var"], [366, 1, 1, "", "exclude"], [367, 1, 1, "", "exp"], [368, 1, 1, "", "explode"], [369, 1, 1, "", "extend_constant"], [370, 1, 1, "", "fill_nan"], [371, 1, 1, "", "fill_null"], [372, 1, 1, "", "filter"], [373, 1, 1, "", "first"], [374, 1, 1, "", "flatten"], [375, 1, 1, "", "floor"], [376, 1, 1, "", "floordiv"], [377, 1, 1, "", "forward_fill"], [378, 1, 1, "", "from_json"], [379, 1, 1, "", "ge"], [380, 1, 1, "", "gt"], [381, 1, 1, "", "hash"], [382, 1, 1, "", "head"], [383, 1, 1, "", "implode"], [384, 1, 1, "", "inspect"], [385, 1, 1, "", "interpolate"], [386, 1, 1, "", "is_between"], [387, 1, 1, "", "is_duplicated"], [388, 1, 1, "", "is_finite"], [389, 1, 1, "", "is_first"], [390, 1, 1, "", "is_in"], [391, 1, 1, "", "is_infinite"], [392, 1, 1, "", "is_nan"], [393, 1, 1, "", "is_not"], [394, 1, 1, "", "is_not_nan"], [395, 1, 1, "", "is_not_null"], [396, 1, 1, "", "is_null"], [397, 1, 1, "", "is_unique"], [398, 1, 1, "", "keep_name"], [399, 1, 1, "", "kurtosis"], [400, 1, 1, "", "last"], [401, 1, 1, "", "le"], [402, 1, 1, "", "len"], [403, 1, 1, "", "limit"], [436, 1, 1, "", "log"], [437, 1, 1, "", "log10"], [438, 1, 1, "", "log1p"], [439, 1, 1, "", "lower_bound"], [440, 1, 1, "", "lt"], [441, 1, 1, "", "map"], [442, 1, 1, "", "map_alias"], [443, 1, 1, "", "map_dict"], [444, 1, 1, "", "max"], [445, 1, 1, "", "mean"], [446, 1, 1, "", "median"], [457, 1, 1, "", "min"], [458, 1, 1, "", "mod"], [459, 1, 1, "", "mode"], [460, 1, 1, "", "mul"], [461, 1, 1, "", "n_unique"], [462, 1, 1, "", "nan_max"], [463, 1, 1, "", "nan_min"], [464, 1, 1, "", "ne"], [465, 1, 1, "", "ne_missing"], [466, 1, 1, "", "null_count"], [467, 1, 1, "", "or_"], [468, 1, 1, "", "over"], [469, 1, 1, "", "pct_change"], [470, 1, 1, "", "pipe"], [471, 1, 1, "", "pow"], [472, 1, 1, "", "prefix"], [473, 1, 1, "", "product"], [474, 1, 1, "", "qcut"], [475, 1, 1, "", "quantile"], [476, 1, 1, "", "radians"], [477, 1, 1, "", "rank"], [478, 1, 1, "", "rechunk"], [479, 1, 1, "", "reinterpret"], [480, 1, 1, "", "repeat_by"], [481, 1, 1, "", "reshape"], [482, 1, 1, "", "reverse"], [483, 1, 1, "", "rle"], [484, 1, 1, "", "rle_id"], [485, 1, 1, "", "rolling_apply"], [486, 1, 1, "", "rolling_max"], [487, 1, 1, "", "rolling_mean"], [488, 1, 1, "", "rolling_median"], [489, 1, 1, "", "rolling_min"], [490, 1, 1, "", "rolling_quantile"], [491, 1, 1, "", "rolling_skew"], [492, 1, 1, "", "rolling_std"], [493, 1, 1, "", "rolling_sum"], [494, 1, 1, "", "rolling_var"], [495, 1, 1, "", "round"], [496, 1, 1, "", "sample"], [497, 1, 1, "", "search_sorted"], [498, 1, 1, "", "set_sorted"], [499, 1, 1, "", "shift"], [500, 1, 1, "", "shift_and_fill"], [501, 1, 1, "", "shrink_dtype"], [502, 1, 1, "", "shuffle"], [503, 1, 1, "", "sign"], [504, 1, 1, "", "sin"], [505, 1, 1, "", "sinh"], [506, 1, 1, "", "skew"], [507, 1, 1, "", "slice"], [508, 1, 1, "", "sort"], [509, 1, 1, "", "sort_by"], [510, 1, 1, "", "sqrt"], [511, 1, 1, "", "std"], [550, 1, 1, "", "sub"], [551, 1, 1, "", "suffix"], [552, 1, 1, "", "sum"], [553, 1, 1, "", "tail"], [554, 1, 1, "", "take"], [555, 1, 1, "", "take_every"], [556, 1, 1, "", "tan"], [557, 1, 1, "", "tanh"], [558, 1, 1, "", "to_physical"], [559, 1, 1, "", "top_k"], [560, 1, 1, "", "truediv"], [561, 1, 1, "", "unique"], [562, 1, 1, "", "unique_counts"], [563, 1, 1, "", "upper_bound"], [564, 1, 1, "", "value_counts"], [565, 1, 1, "", "var"], [566, 1, 1, "", "where"], [567, 1, 1, "", "xor"]], "polars.Expr.arr": [[284, 1, 1, "", "max"], [285, 1, 1, "", "min"], [286, 1, 1, "", "sum"], [287, 1, 1, "", "unique"]], "polars.Expr.bin": [[289, 1, 1, "", "contains"], [290, 1, 1, "", "decode"], [291, 1, 1, "", "encode"], [292, 1, 1, "", "ends_with"], [293, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[297, 1, 1, "", "get_categories"], [298, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[319, 1, 1, "", "base_utc_offset"], [320, 1, 1, "", "cast_time_unit"], [321, 1, 1, "", "combine"], [322, 1, 1, "", "convert_time_zone"], [323, 1, 1, "", "date"], [324, 1, 1, "", "datetime"], [325, 1, 1, "", "day"], [326, 1, 1, "", "days"], [327, 1, 1, "", "dst_offset"], [328, 1, 1, "", "epoch"], [329, 1, 1, "", "hour"], [330, 1, 1, "", "hours"], [331, 1, 1, "", "is_leap_year"], [332, 1, 1, "", "iso_year"], [333, 1, 1, "", "microsecond"], [334, 1, 1, "", "microseconds"], [335, 1, 1, "", "millisecond"], [336, 1, 1, "", "milliseconds"], [337, 1, 1, "", "minute"], [338, 1, 1, "", "minutes"], [339, 1, 1, "", "month"], [340, 1, 1, "", "month_end"], [341, 1, 1, "", "month_start"], [342, 1, 1, "", "nanosecond"], [343, 1, 1, "", "nanoseconds"], [344, 1, 1, "", "offset_by"], [345, 1, 1, "", "ordinal_day"], [346, 1, 1, "", "quarter"], [347, 1, 1, "", "replace_time_zone"], [348, 1, 1, "", "round"], [349, 1, 1, "", "second"], [350, 1, 1, "", "seconds"], [351, 1, 1, "", "strftime"], [352, 1, 1, "", "time"], [353, 1, 1, "", "timestamp"], [354, 1, 1, "", "to_string"], [355, 1, 1, "", "truncate"], [356, 1, 1, "", "week"], [357, 1, 1, "", "weekday"], [358, 1, 1, "", "with_time_unit"], [359, 1, 1, "", "year"]], "polars.Expr.list": [[404, 1, 1, "", "all"], [405, 1, 1, "", "any"], [406, 1, 1, "", "arg_max"], [407, 1, 1, "", "arg_min"], [408, 1, 1, "", "concat"], [409, 1, 1, "", "contains"], [410, 1, 1, "", "count_match"], [411, 1, 1, "", "diff"], [412, 1, 1, "", "eval"], [413, 1, 1, "", "explode"], [414, 1, 1, "", "first"], [415, 1, 1, "", "get"], [416, 1, 1, "", "head"], [417, 1, 1, "", "join"], [418, 1, 1, "", "last"], [419, 1, 1, "", "lengths"], [420, 1, 1, "", "max"], [421, 1, 1, "", "mean"], [422, 1, 1, "", "min"], [423, 1, 1, "", "reverse"], [424, 1, 1, "", "set_difference"], [425, 1, 1, "", "set_intersection"], [426, 1, 1, "", "set_symmetric_difference"], [427, 1, 1, "", "set_union"], [428, 1, 1, "", "shift"], [429, 1, 1, "", "slice"], [430, 1, 1, "", "sort"], [431, 1, 1, "", "sum"], [432, 1, 1, "", "tail"], [433, 1, 1, "", "take"], [434, 1, 1, "", "to_struct"], [435, 1, 1, "", "unique"]], "polars.Expr.meta": [[447, 1, 1, "", "eq"], [448, 1, 1, "", "has_multiple_outputs"], [449, 1, 1, "", "is_regex_projection"], [450, 1, 1, "", "ne"], [451, 1, 1, "", "output_name"], [452, 1, 1, "", "pop"], [453, 1, 1, "", "root_names"], [454, 1, 1, "", "tree_format"], [455, 1, 1, "", "undo_aliases"], [456, 1, 1, "", "write_json"]], "polars.Expr.str": [[512, 1, 1, "", "concat"], [513, 1, 1, "", "contains"], [514, 1, 1, "", "count_match"], [515, 1, 1, "", "decode"], [516, 1, 1, "", "encode"], [517, 1, 1, "", "ends_with"], [518, 1, 1, "", "explode"], [519, 1, 1, "", "extract"], [520, 1, 1, "", "extract_all"], [521, 1, 1, "", "extract_groups"], [522, 1, 1, "", "json_extract"], [523, 1, 1, "", "json_path_match"], [524, 1, 1, "", "lengths"], [525, 1, 1, "", "ljust"], [526, 1, 1, "", "lstrip"], [527, 1, 1, "", "n_chars"], [528, 1, 1, "", "parse_int"], [529, 1, 1, "", "replace"], [530, 1, 1, "", "replace_all"], [531, 1, 1, "", "rjust"], [532, 1, 1, "", "rstrip"], [533, 1, 1, "", "slice"], [534, 1, 1, "", "split"], [535, 1, 1, "", "split_exact"], [536, 1, 1, "", "splitn"], [537, 1, 1, "", "starts_with"], [538, 1, 1, "", "strip"], [539, 1, 1, "", "strptime"], [540, 1, 1, "", "to_date"], [541, 1, 1, "", "to_datetime"], [542, 1, 1, "", "to_decimal"], [543, 1, 1, "", "to_lowercase"], [544, 1, 1, "", "to_time"], [545, 1, 1, "", "to_titlecase"], [546, 1, 1, "", "to_uppercase"], [547, 1, 1, "", "zfill"]], "polars.Expr.struct": [[548, 1, 1, "", "field"], [549, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[657, 1, 1, "", "bottom_k"], [658, 1, 1, "", "cache"], [659, 1, 1, "", "clear"], [660, 1, 1, "", "clone"], [661, 1, 1, "", "collect"], [662, 2, 1, "", "columns"], [663, 1, 1, "", "deserialize"], [664, 1, 1, "", "drop"], [665, 1, 1, "", "drop_nulls"], [666, 2, 1, "", "dtypes"], [667, 1, 1, "", "explain"], [668, 1, 1, "", "explode"], [669, 1, 1, "", "fetch"], [670, 1, 1, "", "fill_nan"], [671, 1, 1, "", "fill_null"], [672, 1, 1, "", "filter"], [673, 1, 1, "", "first"], [674, 1, 1, "", "from_json"], [675, 1, 1, "", "groupby"], [676, 1, 1, "", "groupby_dynamic"], [677, 1, 1, "", "groupby_rolling"], [678, 1, 1, "", "head"], [679, 1, 1, "", "inspect"], [680, 1, 1, "", "interpolate"], [681, 1, 1, "", "join"], [682, 1, 1, "", "join_asof"], [683, 1, 1, "", "last"], [684, 1, 1, "", "lazy"], [685, 1, 1, "", "limit"], [686, 1, 1, "", "map"], [687, 1, 1, "", "max"], [688, 1, 1, "", "mean"], [689, 1, 1, "", "median"], [690, 1, 1, "", "melt"], [691, 1, 1, "", "merge_sorted"], [692, 1, 1, "", "min"], [693, 1, 1, "", "null_count"], [694, 1, 1, "", "pipe"], [695, 1, 1, "", "profile"], [696, 1, 1, "", "quantile"], [697, 1, 1, "", "read_json"], [698, 1, 1, "", "rename"], [699, 1, 1, "", "reverse"], [700, 2, 1, "", "schema"], [701, 1, 1, "", "select"], [702, 1, 1, "", "select_seq"], [703, 1, 1, "", "serialize"], [704, 1, 1, "", "set_sorted"], [705, 1, 1, "", "shift"], [706, 1, 1, "", "shift_and_fill"], [707, 1, 1, "", "show_graph"], [47, 1, 1, "", "sink_ipc"], [48, 1, 1, "", "sink_parquet"], [708, 1, 1, "", "slice"], [709, 1, 1, "", "sort"], [710, 1, 1, "", "std"], [711, 1, 1, "", "sum"], [712, 1, 1, "", "tail"], [713, 1, 1, "", "take_every"], [714, 1, 1, "", "top_k"], [715, 1, 1, "", "unique"], [716, 1, 1, "", "unnest"], [717, 1, 1, "", "update"], [718, 1, 1, "", "var"], [719, 2, 1, "", "width"], [720, 1, 1, "", "with_columns"], [721, 1, 1, "", "with_columns_seq"], [722, 1, 1, "", "with_context"], [723, 1, 1, "", "with_row_count"]], "polars.List": [[49, 1, 1, "", "__init__"]], "polars.Null": [[50, 1, 1, "", "__init__"]], "polars.Object": [[51, 1, 1, "", "__init__"]], "polars.SQLContext": [[1068, 1, 1, "", "__enter__"], [1068, 1, 1, "", "__exit__"], [1068, 1, 1, "", "__init__"], [52, 1, 1, "", "execute"], [53, 1, 1, "", "register"], [54, 1, 1, "", "register_globals"], [55, 1, 1, "", "register_many"], [56, 1, 1, "", "tables"], [57, 1, 1, "", "unregister"]], "polars.Series": [[747, 1, 1, "", "abs"], [748, 1, 1, "", "alias"], [749, 1, 1, "", "all"], [750, 1, 1, "", "any"], [751, 1, 1, "", "append"], [752, 1, 1, "", "apply"], [753, 1, 1, "", "arccos"], [754, 1, 1, "", "arccosh"], [755, 1, 1, "", "arcsin"], [756, 1, 1, "", "arcsinh"], [757, 1, 1, "", "arctan"], [758, 1, 1, "", "arctanh"], [759, 1, 1, "", "arg_max"], [760, 1, 1, "", "arg_min"], [761, 1, 1, "", "arg_sort"], [762, 1, 1, "", "arg_true"], [763, 1, 1, "", "arg_unique"], [773, 1, 1, "", "bottom_k"], [774, 1, 1, "", "cast"], [775, 3, 1, "", "cat"], [781, 1, 1, "", "cbrt"], [782, 1, 1, "", "ceil"], [783, 1, 1, "", "chunk_lengths"], [784, 1, 1, "", "clear"], [785, 1, 1, "", "clip"], [786, 1, 1, "", "clip_max"], [787, 1, 1, "", "clip_min"], [788, 1, 1, "", "clone"], [789, 1, 1, "", "cos"], [790, 1, 1, "", "cosh"], [791, 1, 1, "", "cummax"], [792, 1, 1, "", "cummin"], [793, 1, 1, "", "cumprod"], [794, 1, 1, "", "cumsum"], [795, 1, 1, "", "cumulative_eval"], [796, 1, 1, "", "cut"], [797, 1, 1, "", "describe"], [798, 1, 1, "", "diff"], [799, 1, 1, "", "dot"], [800, 1, 1, "", "drop_nans"], [801, 1, 1, "", "drop_nulls"], [802, 3, 1, "", "dt"], [848, 3, 1, "", "dtype"], [849, 1, 1, "", "entropy"], [850, 1, 1, "", "estimated_size"], [851, 1, 1, "", "ewm_mean"], [852, 1, 1, "", "ewm_std"], [853, 1, 1, "", "ewm_var"], [854, 1, 1, "", "exp"], [855, 1, 1, "", "explode"], [856, 1, 1, "", "extend"], [857, 1, 1, "", "extend_constant"], [858, 1, 1, "", "fill_nan"], [859, 1, 1, "", "fill_null"], [860, 1, 1, "", "filter"], [861, 3, 1, "", "flags"], [862, 1, 1, "", "floor"], [863, 1, 1, "", "get_chunks"], [864, 1, 1, "", "has_validity"], [865, 1, 1, "", "hash"], [866, 1, 1, "", "head"], [867, 1, 1, "", "hist"], [868, 1, 1, "", "implode"], [869, 3, 1, "", "inner_dtype"], [870, 1, 1, "", "interpolate"], [871, 1, 1, "", "is_between"], [872, 1, 1, "", "is_boolean"], [873, 1, 1, "", "is_duplicated"], [874, 1, 1, "", "is_empty"], [875, 1, 1, "", "is_finite"], [876, 1, 1, "", "is_first"], [877, 1, 1, "", "is_float"], [878, 1, 1, "", "is_in"], [879, 1, 1, "", "is_infinite"], [880, 1, 1, "", "is_integer"], [881, 1, 1, "", "is_nan"], [882, 1, 1, "", "is_not_nan"], [883, 1, 1, "", "is_not_null"], [884, 1, 1, "", "is_null"], [885, 1, 1, "", "is_numeric"], [886, 1, 1, "", "is_sorted"], [887, 1, 1, "", "is_temporal"], [888, 1, 1, "", "is_unique"], [889, 1, 1, "", "is_utf8"], [890, 1, 1, "", "item"], [891, 1, 1, "", "kurtosis"], [892, 1, 1, "", "len"], [893, 1, 1, "", "limit"], [894, 3, 1, "", "list"], [927, 1, 1, "", "log"], [928, 1, 1, "", "log10"], [929, 1, 1, "", "log1p"], [930, 1, 1, "", "lower_bound"], [931, 1, 1, "", "map_dict"], [932, 1, 1, "", "max"], [933, 1, 1, "", "mean"], [934, 1, 1, "", "median"], [935, 1, 1, "", "min"], [936, 1, 1, "", "mode"], [937, 1, 1, "", "n_chunks"], [938, 1, 1, "", "n_unique"], [939, 3, 1, "", "name"], [940, 1, 1, "", "nan_max"], [941, 1, 1, "", "nan_min"], [942, 1, 1, "", "new_from_index"], [943, 1, 1, "", "null_count"], [944, 1, 1, "", "pct_change"], [945, 1, 1, "", "peak_max"], [946, 1, 1, "", "peak_min"], [947, 1, 1, "", "product"], [948, 1, 1, "", "qcut"], [949, 1, 1, "", "quantile"], [950, 1, 1, "", "rank"], [951, 1, 1, "", "rechunk"], [952, 1, 1, "", "reinterpret"], [953, 1, 1, "", "rename"], [954, 1, 1, "", "reshape"], [955, 1, 1, "", "reverse"], [956, 1, 1, "", "rle"], [957, 1, 1, "", "rle_id"], [958, 1, 1, "", "rolling_apply"], [959, 1, 1, "", "rolling_max"], [960, 1, 1, "", "rolling_mean"], [961, 1, 1, "", "rolling_median"], [962, 1, 1, "", "rolling_min"], [963, 1, 1, "", "rolling_quantile"], [964, 1, 1, "", "rolling_skew"], [965, 1, 1, "", "rolling_std"], [966, 1, 1, "", "rolling_sum"], [967, 1, 1, "", "rolling_var"], [968, 1, 1, "", "round"], [969, 1, 1, "", "sample"], [970, 1, 1, "", "search_sorted"], [971, 1, 1, "", "series_equal"], [972, 1, 1, "", "set"], [973, 1, 1, "", "set_at_idx"], [974, 1, 1, "", "set_sorted"], [975, 3, 1, "", "shape"], [976, 1, 1, "", "shift"], [977, 1, 1, "", "shift_and_fill"], [978, 1, 1, "", "shrink_dtype"], [979, 1, 1, "", "shrink_to_fit"], [980, 1, 1, "", "shuffle"], [981, 1, 1, "", "sign"], [982, 1, 1, "", "sin"], [983, 1, 1, "", "sinh"], [984, 1, 1, "", "skew"], [985, 1, 1, "", "slice"], [986, 1, 1, "", "sort"], [987, 1, 1, "", "sqrt"], [988, 1, 1, "", "std"], [989, 3, 1, "", "str"], [1031, 1, 1, "", "sum"], [1032, 1, 1, "", "tail"], [1033, 1, 1, "", "take"], [1034, 1, 1, "", "take_every"], [1035, 1, 1, "", "tan"], [1036, 1, 1, "", "tanh"], [1037, 1, 1, "", "to_arrow"], [1038, 1, 1, "", "to_dummies"], [1039, 1, 1, "", "to_frame"], [1040, 1, 1, "", "to_init_repr"], [1041, 1, 1, "", "to_list"], [1042, 1, 1, "", "to_numpy"], [1043, 1, 1, "", "to_pandas"], [1044, 1, 1, "", "to_physical"], [1045, 1, 1, "", "top_k"], [1046, 1, 1, "", "unique"], [1047, 1, 1, "", "unique_counts"], [1048, 1, 1, "", "upper_bound"], [1049, 1, 1, "", "value_counts"], [1050, 1, 1, "", "var"], [1051, 1, 1, "", "view"], [1052, 1, 1, "", "zip_with"]], "polars.Series.arr": [[764, 1, 1, "", "max"], [765, 1, 1, "", "min"], [766, 1, 1, "", "sum"], [767, 1, 1, "", "unique"]], "polars.Series.bin": [[768, 1, 1, "", "contains"], [769, 1, 1, "", "decode"], [770, 1, 1, "", "encode"], [771, 1, 1, "", "ends_with"], [772, 1, 1, "", "starts_with"]], "polars.Series.cat": [[776, 1, 1, "", "get_categories"], [777, 1, 1, "", "is_local"], [778, 1, 1, "", "set_ordering"], [779, 1, 1, "", "to_local"], [780, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[803, 1, 1, "", "base_utc_offset"], [804, 1, 1, "", "cast_time_unit"], [805, 1, 1, "", "combine"], [806, 1, 1, "", "convert_time_zone"], [807, 1, 1, "", "date"], [808, 1, 1, "", "datetime"], [809, 1, 1, "", "day"], [810, 1, 1, "", "days"], [811, 1, 1, "", "dst_offset"], [812, 1, 1, "", "epoch"], [813, 1, 1, "", "hour"], [814, 1, 1, "", "hours"], [815, 1, 1, "", "is_leap_year"], [816, 1, 1, "", "iso_year"], [817, 1, 1, "", "max"], [818, 1, 1, "", "mean"], [819, 1, 1, "", "median"], [820, 1, 1, "", "microsecond"], [821, 1, 1, "", "microseconds"], [822, 1, 1, "", "millisecond"], [823, 1, 1, "", "milliseconds"], [824, 1, 1, "", "min"], [825, 1, 1, "", "minute"], [826, 1, 1, "", "minutes"], [827, 1, 1, "", "month"], [828, 1, 1, "", "month_end"], [829, 1, 1, "", "month_start"], [830, 1, 1, "", "nanosecond"], [831, 1, 1, "", "nanoseconds"], [832, 1, 1, "", "offset_by"], [833, 1, 1, "", "ordinal_day"], [834, 1, 1, "", "quarter"], [835, 1, 1, "", "replace_time_zone"], [836, 1, 1, "", "round"], [837, 1, 1, "", "second"], [838, 1, 1, "", "seconds"], [839, 1, 1, "", "strftime"], [840, 1, 1, "", "time"], [841, 1, 1, "", "timestamp"], [842, 1, 1, "", "to_string"], [843, 1, 1, "", "truncate"], [844, 1, 1, "", "week"], [845, 1, 1, "", "weekday"], [846, 1, 1, "", "with_time_unit"], [847, 1, 1, "", "year"]], "polars.Series.list": [[895, 1, 1, "", "all"], [896, 1, 1, "", "any"], [897, 1, 1, "", "arg_max"], [898, 1, 1, "", "arg_min"], [899, 1, 1, "", "concat"], [900, 1, 1, "", "contains"], [901, 1, 1, "", "count_match"], [902, 1, 1, "", "diff"], [903, 1, 1, "", "eval"], [904, 1, 1, "", "explode"], [905, 1, 1, "", "first"], [906, 1, 1, "", "get"], [907, 1, 1, "", "head"], [908, 1, 1, "", "join"], [909, 1, 1, "", "last"], [910, 1, 1, "", "lengths"], [911, 1, 1, "", "max"], [912, 1, 1, "", "mean"], [913, 1, 1, "", "min"], [914, 1, 1, "", "reverse"], [915, 1, 1, "", "set_difference"], [916, 1, 1, "", "set_intersection"], [917, 1, 1, "", "set_symmetric_difference"], [918, 1, 1, "", "set_union"], [919, 1, 1, "", "shift"], [920, 1, 1, "", "slice"], [921, 1, 1, "", "sort"], [922, 1, 1, "", "sum"], [923, 1, 1, "", "tail"], [924, 1, 1, "", "take"], [925, 1, 1, "", "to_struct"], [926, 1, 1, "", "unique"]], "polars.Series.str": [[990, 1, 1, "", "concat"], [991, 1, 1, "", "contains"], [992, 1, 1, "", "count_match"], [993, 1, 1, "", "decode"], [994, 1, 1, "", "encode"], [995, 1, 1, "", "ends_with"], [996, 1, 1, "", "explode"], [997, 1, 1, "", "extract"], [998, 1, 1, "", "extract_all"], [999, 1, 1, "", "extract_groups"], [1000, 1, 1, "", "json_extract"], [1001, 1, 1, "", "json_path_match"], [1002, 1, 1, "", "lengths"], [1003, 1, 1, "", "ljust"], [1004, 1, 1, "", "lstrip"], [1005, 1, 1, "", "n_chars"], [1006, 1, 1, "", "parse_int"], [1007, 1, 1, "", "replace"], [1008, 1, 1, "", "replace_all"], [1009, 1, 1, "", "rjust"], [1010, 1, 1, "", "rstrip"], [1011, 1, 1, "", "slice"], [1012, 1, 1, "", "split"], [1013, 1, 1, "", "split_exact"], [1014, 1, 1, "", "splitn"], [1015, 1, 1, "", "starts_with"], [1016, 1, 1, "", "strip"], [1017, 1, 1, "", "strptime"], [1018, 1, 1, "", "to_date"], [1019, 1, 1, "", "to_datetime"], [1020, 1, 1, "", "to_decimal"], [1021, 1, 1, "", "to_lowercase"], [1022, 1, 1, "", "to_time"], [1023, 1, 1, "", "to_titlecase"], [1024, 1, 1, "", "to_uppercase"], [1025, 1, 1, "", "zfill"]], "polars.Series.struct": [[1026, 1, 1, "", "field"], [1027, 3, 1, "", "fields"], [1028, 1, 1, "", "rename_fields"], [1029, 3, 1, "", "schema"], [1030, 1, 1, "", "unnest"]], "polars.StringCache": [[58, 1, 1, "", "__init__"]], "polars.Struct": [[59, 1, 1, "", "__init__"]], "polars.Time": [[60, 1, 1, "", "__init__"]], "polars.UInt16": [[61, 1, 1, "", "__init__"]], "polars.UInt32": [[62, 1, 1, "", "__init__"]], "polars.UInt64": [[63, 1, 1, "", "__init__"]], "polars.UInt8": [[64, 1, 1, "", "__init__"]], "polars.Unknown": [[65, 1, 1, "", "__init__"]], "polars.Utf8": [[66, 1, 1, "", "__init__"]], "polars.api": [[68, 4, 1, "", "register_dataframe_namespace"], [69, 4, 1, "", "register_expr_namespace"], [70, 4, 1, "", "register_lazyframe_namespace"], [71, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[236, 1, 1, "", "__iter__"], [237, 1, 1, "", "agg"], [238, 1, 1, "", "all"], [239, 1, 1, "", "apply"], [240, 1, 1, "", "count"], [241, 1, 1, "", "first"], [242, 1, 1, "", "head"], [243, 1, 1, "", "last"], [244, 1, 1, "", "max"], [245, 1, 1, "", "mean"], [246, 1, 1, "", "median"], [247, 1, 1, "", "min"], [248, 1, 1, "", "n_unique"], [249, 1, 1, "", "quantile"], [250, 1, 1, "", "sum"], [251, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[724, 1, 1, "", "agg"], [725, 1, 1, "", "all"], [726, 1, 1, "", "apply"], [727, 1, 1, "", "count"], [728, 1, 1, "", "first"], [729, 1, 1, "", "head"], [730, 1, 1, "", "last"], [731, 1, 1, "", "max"], [732, 1, 1, "", "mean"], [733, 1, 1, "", "median"], [734, 1, 1, "", "min"], [735, 1, 1, "", "n_unique"], [736, 1, 1, "", "quantile"], [737, 1, 1, "", "sum"], [738, 1, 1, "", "tail"]], "polars.selectors": [[745, 4, 1, "", "all"], [745, 4, 1, "", "by_dtype"], [745, 4, 1, "", "by_name"], [745, 4, 1, "", "contains"], [745, 4, 1, "", "datetime"], [745, 4, 1, "", "duration"], [745, 4, 1, "", "ends_with"], [745, 4, 1, "", "expand_selector"], [745, 4, 1, "", "first"], [745, 4, 1, "", "float"], [745, 4, 1, "", "integer"], [745, 4, 1, "", "is_selector"], [745, 4, 1, "", "last"], [745, 4, 1, "", "matches"], [745, 4, 1, "", "numeric"], [745, 4, 1, "", "starts_with"], [745, 4, 1, "", "string"], [745, 4, 1, "", "temporal"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 147, 856], "api": [1, 68, 69, 70, 71, 654], "provid": 1, "new": 1, "function": [1, 131, 642, 653, 745], "avail": 1, "registr": 1, "exampl": [1, 745, 1069], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1069], "arrai": [2, 636, 1053], "binari": [3, 637, 648, 1055], "boolean": [4, 638, 1056], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 131], "activate_decim": 6, "load": [7, 131], "restore_default": 8, "save": [9, 131], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 131], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 125, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 456], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 323, 591, 807], "datetim": [38, 324, 594, 808], "decim": 39, "durat": [40, 595], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "lazyfram": [47, 48, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742], "sink_ipc": 47, "sink_parquet": 48, "list": [49, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 644, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 1062], "null": 50, "object": 51, "sqlcontext": [52, 53, 54, 55, 56, 57], "execut": 52, "regist": 53, "register_glob": 54, "register_mani": 55, "tabl": 56, "unregist": 57, "stringcach": [58, 653], "struct": [59, 548, 549, 626, 650, 1026, 1027, 1028, 1029, 1030, 1066], "time": [60, 352, 630, 840], "uint16": 61, "uint32": 62, "uint64": 63, "uint8": 64, "unknown": 65, "utf8": 66, "align_fram": 67, "register_dataframe_namespac": 68, "register_expr_namespac": 69, "register_lazyframe_namespac": 70, "register_series_namespac": 71, "build_info": 72, "collect_al": 73, "concat": [74, 408, 512, 899, 990], "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 261], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 655], "batched_read": 99, "batchedcsvread": [99, 655], "next_batch": 99, "read_avro": 100, "read_csv": 101, "read_csv_batch": 102, "read_databas": 103, "read_delta": 104, "read_excel": 105, "read_ipc": 106, "read_ipc_schema": 107, "read_json": [108, 697], "read_ndjson": 109, "read_parquet": 110, "read_parquet_schema": 111, "scan_csv": 112, "scan_delta": 113, "scan_ipc": 114, "scan_ndjson": 115, "scan_parquet": 116, "scan_pyarrow_dataset": 117, "set_random_se": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 1069], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 1069], "column": [122, 123, 138, 640, 662], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1061], "set_profil": 128, "threadpool_s": 129, "using_string_cach": 130, "option": 131, "current": 131, "us": 131, "context": 131, "manag": 131, "decor": 131, "aggreg": [132, 262, 656, 746], "__dataframe__": 133, "appli": [134, 239, 271, 572, 726, 752], "bottom_k": [135, 294, 657, 773], "clear": [136, 659, 784], "clone": [137, 660, 788], "corr": [139, 584], "describ": [140, 797], "drop": [141, 664], "drop_in_plac": 142, "drop_nul": [143, 318, 665, 801], "dtype": [144, 666, 848], "estimated_s": [145, 850], "explod": [146, 368, 413, 518, 668, 855, 904, 996], "fill_nan": [148, 370, 670, 858], "fill_nul": [149, 371, 671, 859], "filter": [150, 372, 672, 860], "find_idx_by_nam": 151, "flag": [152, 861], "fold": [153, 599], "frame_equ": 154, "get_column": [155, 156], "glimps": 157, "groupbi": [158, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 675, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741], "groupby_dynam": [159, 676], "groupby_rol": [160, 677], "hash_row": 161, "head": [162, 242, 382, 416, 603, 678, 729, 866, 907], "height": 163, "hstack": 164, "insert_at_idx": 165, "interpol": [166, 385, 680, 870], "is_dupl": [167, 387, 873], "is_empti": [168, 874], "is_uniqu": [169, 397, 888], "item": [170, 890], "iter_row": 171, "iter_slic": 172, "join": [173, 417, 681, 908], "join_asof": [174, 682], "lazi": [175, 684], "limit": [176, 403, 685, 893], "max": [177, 244, 284, 420, 444, 610, 687, 731, 764, 817, 911, 932], "mean": [178, 245, 421, 445, 612, 688, 732, 818, 912, 933], "median": [179, 246, 446, 613, 689, 733, 819, 934], "melt": [180, 690], "merge_sort": [181, 691], "min": [182, 247, 285, 422, 457, 614, 692, 734, 765, 824, 913, 935], "n_chunk": [183, 937], "n_uniqu": [184, 248, 461, 616, 735, 938], "null_count": [185, 466, 693, 943], "partition_bi": 186, "pipe": [187, 470, 694], "pivot": 188, "product": [189, 473, 947], "quantil": [190, 249, 475, 618, 696, 736, 949], "rechunk": [191, 478, 951], "renam": [192, 698, 953], "replac": [193, 529, 1007], "replace_at_idx": 194, "revers": [195, 423, 482, 699, 914, 955], "row": [196, 197], "rows_by_kei": 198, "sampl": [199, 496, 969], "schema": [200, 700, 1029], "select": [201, 259, 623, 647, 701, 744, 1064], "select_seq": [202, 702], "set_sort": [203, 498, 704, 974], "shape": [204, 975], "shift": [205, 428, 499, 705, 919, 976], "shift_and_fil": [206, 500, 706, 977], "shrink_to_fit": [207, 979], "slice": [208, 429, 507, 533, 708, 920, 985, 1011], "sort": [209, 430, 508, 709, 921, 986], "std": [210, 511, 625, 710, 988], "sum": [211, 250, 286, 431, 552, 627, 711, 737, 766, 922, 1031], "tail": [212, 251, 432, 553, 629, 712, 738, 923, 1032], "take_everi": [213, 555, 713, 1034], "to_arrow": [214, 1037], "to_dict": [215, 216], "to_dummi": [217, 1038], "to_init_repr": [218, 1040], "to_numpi": [219, 1042], "to_panda": [220, 1043], "to_seri": 221, "to_struct": [222, 434, 925], "top_k": [223, 559, 714, 1045], "transpos": 224, "uniqu": [225, 287, 435, 561, 715, 767, 926, 1046], "unnest": [226, 716, 1030], "unstack": 227, "updat": [228, 717], "upsampl": 229, "var": [230, 565, 633, 718, 1050], "vstack": 231, "width": [232, 719], "with_column": [233, 720], "with_columns_seq": [234, 721], "with_row_count": [235, 723], "__iter__": 236, "agg": [237, 724], "all": [238, 267, 404, 568, 725, 749, 895], "count": [240, 306, 585, 727], "first": [241, 373, 414, 598, 673, 728, 905], "last": [243, 400, 418, 607, 683, 730, 909], "attribut": [252, 739, 1054], "comput": [253, 641, 1058], "descript": [254, 740, 1059], "export": [255, 1060], "miscellan": [258, 646, 653, 743, 1063], "manipul": [259, 647, 744, 1064], "data": 260, "type": 260, "numer": [260, 648], "tempor": [260, 651, 1067], "nest": 260, "other": 260, "expr": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "ab": [263, 747], "add": 264, "agg_group": 265, "alia": [266, 748], "and_": 268, "ani": [269, 405, 570, 750, 896], "append": [270, 751], "approx_n_uniqu": [272, 573], "arcco": [273, 753], "arccosh": [274, 754], "arcsin": [275, 755], "arcsinh": [276, 756], "arctan": [277, 757], "arctanh": [278, 758], "arg_max": [279, 406, 759, 897], "arg_min": [280, 407, 760, 898], "arg_sort": [281, 761], "arg_tru": [282, 762], "arg_uniqu": [283, 763], "arr": [284, 285, 286, 287, 764, 765, 766, 767], "backward_fil": 288, "bin": [289, 290, 291, 292, 293, 768, 769, 770, 771, 772], "contain": [289, 409, 513, 768, 900, 991], "decod": [290, 515, 769, 993], "encod": [291, 516, 770, 994], "ends_with": [292, 517, 771, 995], "starts_with": [293, 537, 772, 1015], "cach": [295, 658], "cast": [296, 774], "cat": [297, 298, 775, 776, 777, 778, 779, 780], "get_categori": [297, 776], "set_ord": [298, 778], "cbrt": [299, 781], "ceil": [300, 782], "clip": [301, 785], "clip_max": [302, 786], "clip_min": [303, 787], "co": [304, 789], "cosh": [305, 790], "cumcount": 307, "cummax": [308, 791], "cummin": [309, 792], "cumprod": [310, 793], "cumsum": [311, 589, 794], "cumulative_ev": [312, 795], "cut": [313, 796], "degre": 314, "diff": [315, 411, 798, 902], "dot": [316, 799], "drop_nan": [317, 800], "dt": [319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847], "base_utc_offset": [319, 803], "cast_time_unit": [320, 804], "combin": [321, 805], "convert_time_zon": [322, 806], "dai": [325, 326, 809, 810], "dst_offset": [327, 811], "epoch": [328, 812], "hour": [329, 330, 813, 814], "is_leap_year": [331, 815], "iso_year": [332, 816], "microsecond": [333, 334, 820, 821], "millisecond": [335, 336, 822, 823], "minut": [337, 338, 825, 826], "month": [339, 827], "month_end": [340, 828], "month_start": [341, 829], "nanosecond": [342, 343, 830, 831], "offset_bi": [344, 832], "ordinal_dai": [345, 833], "quarter": [346, 834], "replace_time_zon": [347, 835], "round": [348, 495, 836, 968], "second": [349, 350, 837, 838], "strftime": [351, 839], "timestamp": [353, 841], "to_str": [354, 842], "truncat": [355, 843], "week": [356, 844], "weekdai": [357, 845], "with_time_unit": [358, 846], "year": [359, 847], "entropi": [360, 849], "eq": [361, 447], "eq_miss": 362, "ewm_mean": [363, 851], "ewm_std": [364, 852], "ewm_var": [365, 853], "exclud": [366, 597], "exp": [367, 854], "extend_const": [369, 857], "flatten": 374, "floor": [375, 862], "floordiv": 376, "forward_fil": 377, "from_json": [378, 674], "ge": 379, "gt": 380, "hash": [381, 865], "implod": [383, 604, 868], "inspect": [384, 679], "is_between": [386, 871], "is_finit": [388, 875], "is_first": [389, 876], "is_in": [390, 878], "is_infinit": [391, 879], "is_nan": [392, 881], "is_not": 393, "is_not_nan": [394, 882], "is_not_nul": [395, 883], "is_nul": [396, 884], "keep_nam": 398, "kurtosi": [399, 891], "le": 401, "len": [402, 892], "count_match": [410, 514, 901, 992], "eval": [412, 903], "get": [415, 906], "length": [419, 524, 910, 1002], "set_differ": [424, 915], "set_intersect": [425, 916], "set_symmetric_differ": [426, 917], "set_union": [427, 918], "take": [433, 554, 924, 1033], "log": [436, 927], "log10": [437, 928], "log1p": [438, 929], "lower_bound": [439, 930], "lt": 440, "map": [441, 609, 686], "map_alia": 442, "map_dict": [443, 931], "meta": [447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 645], "has_multiple_output": 448, "is_regex_project": 449, "ne": [450, 464], "output_nam": 451, "pop": 452, "root_nam": 453, "tree_format": 454, "undo_alias": 455, "mod": 458, "mode": [459, 936], "mul": 460, "nan_max": [462, 940], "nan_min": [463, 941], "ne_miss": 465, "or_": 467, "over": 468, "pct_chang": [469, 944], "pow": 471, "prefix": 472, "qcut": [474, 948], "radian": 476, "rank": [477, 950], "reinterpret": [479, 952], "repeat_bi": 480, "reshap": [481, 954], "rle": [483, 956], "rle_id": [484, 957], "rolling_appli": [485, 958], "rolling_max": [486, 959], "rolling_mean": [487, 960], "rolling_median": [488, 961], "rolling_min": [489, 962], "rolling_quantil": [490, 963], "rolling_skew": [491, 964], "rolling_std": [492, 965], "rolling_sum": [493, 966], "rolling_var": [494, 967], "search_sort": [497, 970], "shrink_dtyp": [501, 978], "shuffl": [502, 980], "sign": [503, 981], "sin": [504, 982], "sinh": [505, 983], "skew": [506, 984], "sort_bi": 509, "sqrt": [510, 987], "str": [512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025], "extract": [519, 997], "extract_al": [520, 998], "extract_group": [521, 999], "json_extract": [522, 1000], "json_path_match": [523, 1001], "ljust": [525, 1003], "lstrip": [526, 1004], "n_char": [527, 1005], "parse_int": [528, 1006], "replace_al": [530, 1008], "rjust": [531, 1009], "rstrip": [532, 1010], "split": [534, 1012], "split_exact": [535, 1013], "splitn": [536, 1014], "strip": [538, 1016], "strptime": [539, 1017], "to_dat": [540, 1018], "to_datetim": [541, 1019], "to_decim": [542, 1020], "to_lowercas": [543, 1021], "to_tim": [544, 1022], "to_titlecas": [545, 1023], "to_uppercas": [546, 1024], "zfill": [547, 1025], "field": [548, 1026, 1027], "rename_field": [549, 1028], "sub": 550, "suffix": 551, "tan": [556, 1035], "tanh": [557, 1036], "to_phys": [558, 1044], "truediv": 560, "unique_count": [562, 1047], "upper_bound": [563, 1048], "value_count": [564, 1049], "where": 566, "xor": 567, "all_horizont": 569, "any_horizont": 571, "arang": 574, "arctan2": 575, "arctan2d": 576, "arg_sort_bi": 577, "arg_wher": 578, "avg": 579, "coalesc": 580, "col": 581, "concat_list": 582, "concat_str": 583, "cov": 586, "cumfold": 587, "cumreduc": 588, "cumsum_horizont": 590, "date_rang": [592, 593], "element": 596, "format": 600, "from_epoch": 601, "group": 602, "int_rang": [605, 606], "lit": 608, "max_horizont": 611, "min_horizont": 615, "ones": 617, "reduc": 619, "repeat": 620, "rolling_corr": 621, "rolling_cov": 622, "sql_expr": 624, "sum_horizont": 628, "time_rang": [631, 632], "when": 634, "zero": 635, "categori": [639, 1057], "name": [640, 939], "express": 643, "oper": [648, 745], "conjunct": 648, "comparison": 648, "string": [649, 1065], "window": 652, "convers": 653, "parallel": 653, "random": 653, "refer": 654, "input": 655, "output": 655, "feather": 655, "ipc": 655, "parquet": 655, "databas": 655, "json": 655, "avro": 655, "excel": 655, "delta": 655, "lake": 655, "dataset": 655, "collect": 661, "deseri": 663, "explain": 667, "fetch": 669, "profil": [695, 1069], "serial": 703, "show_graph": 707, "with_context": 722, "lazygroupbi": [724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738], "read": 743, "write": 743, "logic": 743, "plan": 743, "selector": 745, "import": 745, "set": [745, 972], "is_loc": 777, "to_loc": 779, "uses_lexical_ord": 780, "chunk_length": 783, "get_chunk": 863, "has_valid": 864, "hist": 867, "inner_dtyp": 869, "is_boolean": 872, "is_float": 877, "is_integ": 880, "is_numer": 885, "is_sort": 886, "is_tempor": 887, "is_utf8": 889, "new_from_index": 942, "peak_max": 945, "peak_min": 946, "series_equ": 971, "set_at_idx": 973, "to_fram": 1039, "to_list": 1041, "view": 1051, "zip_with": 1052, "sql": 1068, "method": 1068, "assert": 1069, "primit": 1069, "strategi": 1069, "helper": 1069, "util": 1070}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"polars.DataFrame.drop_in_place": [[142, "polars-dataframe-drop-in-place"]], "polars.read_database": [[103, "polars-read-database"]], "polars.scan_csv": [[112, "polars-scan-csv"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.read_csv": [[101, "polars-read-csv"]], "polars.concat": [[74, "polars-concat"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "polars.DataFrame.drop": [[141, "polars-dataframe-drop"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.scan_delta": [[113, "polars-scan-delta"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.DataFrame.clone": [[137, "polars-dataframe-clone"]], "polars.DataFrame.__dataframe__": [[133, "polars-dataframe-dataframe"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.DataFrame.drop_nulls": [[143, "polars-dataframe-drop-nulls"]], "polars.scan_parquet": [[116, "polars-scan-parquet"]], "polars.DataFrame.estimated_size": [[145, "polars-dataframe-estimated-size"]], "polars.DataFrame.corr": [[139, "polars-dataframe-corr"]], "polars.read_avro": [[100, "polars-read-avro"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.read_json": [[108, "polars-read-json"]], "polars.read_ndjson": [[109, "polars-read-ndjson"]], "polars.scan_ipc": [[114, "polars-scan-ipc"]], "polars.DataFrame.clear": [[136, "polars-dataframe-clear"]], "polars.DataFrame.dtypes": [[144, "polars-dataframe-dtypes"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.set_random_seed": [[118, "polars-set-random-seed"]], "polars.read_csv_batched": [[102, "polars-read-csv-batched"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.read_parquet": [[110, "polars-read-parquet"]], "polars.DataFrame.bottom_k": [[135, "polars-dataframe-bottom-k"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "polars.DataFrame.apply": [[134, "polars-dataframe-apply"]], "polars.collect_all": [[73, "polars-collect-all"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.read_ipc": [[106, "polars-read-ipc"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "Config": [[131, "config"]], "Config options": [[131, "config-options"]], "Config load, save, and current state": [[131, "config-load-save-and-current-state"]], "Use as a context manager": [[131, "use-as-a-context-manager"]], "Use as a function decorator": [[131, "use-as-a-function-decorator"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.from_records": [[96, "polars-from-records"]], "polars.scan_ndjson": [[115, "polars-scan-ndjson"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.using_string_cache": [[130, "polars-using-string-cache"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.read_excel": [[105, "polars-read-excel"]], "Aggregation": [[132, "aggregation"], [746, "aggregation"], [656, "aggregation"], [262, "aggregation"]], "polars.scan_pyarrow_dataset": [[117, "polars-scan-pyarrow-dataset"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.read_ipc_schema": [[107, "polars-read-ipc-schema"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.read_delta": [[104, "polars-read-delta"]], "polars.DataFrame.describe": [[140, "polars-dataframe-describe"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.read_parquet_schema": [[111, "polars-read-parquet-schema"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.columns": [[138, "polars-dataframe-columns"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Int64": [[45, "polars-int64"]], "polars.Duration": [[40, "polars-duration"]], "polars.Int32": [[44, "polars-int32"]], "polars.Float32": [[41, "polars-float32"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.SQLContext.register": [[53, "polars-sqlcontext-register"]], "polars.StringCache": [[58, "polars-stringcache"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Null": [[50, "polars-null"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.UInt8": [[64, "polars-uint8"]], "polars.UInt16": [[61, "polars-uint16"]], "polars.UInt32": [[62, "polars-uint32"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.SQLContext.execute": [[52, "polars-sqlcontext-execute"]], "polars.build_info": [[72, "polars-build-info"]], "polars.Object": [[51, "polars-object"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.UInt64": [[63, "polars-uint64"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Binary": [[3, "polars-binary"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.api.register_dataframe_namespace": [[68, "polars-api-register-dataframe-namespace"]], "polars.api.register_expr_namespace": [[69, "polars-api-register-expr-namespace"]], "polars.SQLContext.register_globals": [[54, "polars-sqlcontext-register-globals"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.SQLContext.register_many": [[55, "polars-sqlcontext-register-many"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.SQLContext.tables": [[56, "polars-sqlcontext-tables"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.LazyFrame.sink_parquet": [[48, "polars-lazyframe-sink-parquet"]], "polars.align_frames": [[67, "polars-align-frames"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.api.register_lazyframe_namespace": [[70, "polars-api-register-lazyframe-namespace"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1069, "examples"], [745, "examples"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Float64": [[42, "polars-float64"]], "polars.Utf8": [[66, "polars-utf8"]], "polars.api.register_series_namespace": [[71, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.LazyFrame.sink_ipc": [[47, "polars-lazyframe-sink-ipc"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.List": [[49, "polars-list"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Int8": [[46, "polars-int8"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Int16": [[43, "polars-int16"]], "polars.Date": [[37, "polars-date"]], "polars.SQLContext.unregister": [[57, "polars-sqlcontext-unregister"]], "polars.Struct": [[59, "polars-struct"]], "polars.Time": [[60, "polars-time"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Unknown": [[65, "polars-unknown"]], "polars.Series.rolling_sum": [[966, "polars-series-rolling-sum"]], "polars.Series.sample": [[969, "polars-series-sample"]], "polars.Series.sin": [[982, "polars-series-sin"]], "polars.Series.str.strip": [[1016, "polars-series-str-strip"]], "polars.Series.rle_id": [[957, "polars-series-rle-id"]], "polars.Series.set_at_idx": [[973, "polars-series-set-at-idx"]], "polars.Series.shift": [[976, "polars-series-shift"]], "polars.Series.str.rstrip": [[1010, "polars-series-str-rstrip"]], "polars.Series.str.split_exact": [[1013, "polars-series-str-split-exact"]], "polars.Series.str.concat": [[990, "polars-series-str-concat"]], "polars.Series.str.json_extract": [[1000, "polars-series-str-json-extract"]], "polars.Series.rename": [[953, "polars-series-rename"]], "polars.Series.search_sorted": [[970, "polars-series-search-sorted"]], "polars.Series.round": [[968, "polars-series-round"]], "polars.Series.shuffle": [[980, "polars-series-shuffle"]], "polars.Series.str.contains": [[991, "polars-series-str-contains"]], "polars.Series.str.replace": [[1007, "polars-series-str-replace"]], "polars.Series.str.extract": [[997, "polars-series-str-extract"]], "polars.Series.str.ends_with": [[995, "polars-series-str-ends-with"]], "polars.Series.rolling_skew": [[964, "polars-series-rolling-skew"]], "polars.Series.str.decode": [[993, "polars-series-str-decode"]], "polars.Series.series_equal": [[971, "polars-series-series-equal"]], "polars.Series.str.extract_groups": [[999, "polars-series-str-extract-groups"]], "polars.Series.str.json_path_match": [[1001, "polars-series-str-json-path-match"]], "polars.Series.str.parse_int": [[1006, "polars-series-str-parse-int"]], "polars.Series.str.splitn": [[1014, "polars-series-str-splitn"]], "polars.Series.rolling_quantile": [[963, "polars-series-rolling-quantile"]], "polars.Series.str.to_date": [[1018, "polars-series-str-to-date"]], "polars.Series.quantile": [[949, "polars-series-quantile"]], "polars.Series.rolling_std": [[965, "polars-series-rolling-std"]], "polars.Series.rank": [[950, "polars-series-rank"]], "polars.Series.reinterpret": [[952, "polars-series-reinterpret"]], "polars.Series.shrink_dtype": [[978, "polars-series-shrink-dtype"]], "polars.Series.reverse": [[955, "polars-series-reverse"]], "polars.Series.str.encode": [[994, "polars-series-str-encode"]], "polars.Series.str.explode": [[996, "polars-series-str-explode"]], "polars.Series.shrink_to_fit": [[979, "polars-series-shrink-to-fit"]], "polars.Series.str.split": [[1012, "polars-series-str-split"]], "polars.Series.str.count_match": [[992, "polars-series-str-count-match"]], "polars.Series.str.rjust": [[1009, "polars-series-str-rjust"]], "polars.Series.str.to_lowercase": [[1021, "polars-series-str-to-lowercase"]], "polars.Series.rolling_max": [[959, "polars-series-rolling-max"]], "polars.Series.shift_and_fill": [[977, "polars-series-shift-and-fill"]], "polars.Series.str.lstrip": [[1004, "polars-series-str-lstrip"]], "polars.Series.rle": [[956, "polars-series-rle"]], "polars.Series.set": [[972, "polars-series-set"]], "polars.Series.str.ljust": [[1003, "polars-series-str-ljust"]], "polars.Series.set_sorted": [[974, "polars-series-set-sorted"]], "polars.Series.str.to_decimal": [[1020, "polars-series-str-to-decimal"]], "polars.Series.rolling_median": [[961, "polars-series-rolling-median"]], "polars.Series.sign": [[981, "polars-series-sign"]], "polars.Series.rechunk": [[951, "polars-series-rechunk"]], "polars.Series.rolling_var": [[967, "polars-series-rolling-var"]], "polars.Series.reshape": [[954, "polars-series-reshape"]], "polars.Series.rolling_apply": [[958, "polars-series-rolling-apply"]], "polars.Series.str.n_chars": [[1005, "polars-series-str-n-chars"]], "polars.Series.str.starts_with": [[1015, "polars-series-str-starts-with"]], "polars.Series.str.strptime": [[1017, "polars-series-str-strptime"]], "polars.Series.rolling_min": [[962, "polars-series-rolling-min"]], "polars.Series.str.slice": [[1011, "polars-series-str-slice"]], "polars.Series.str.extract_all": [[998, "polars-series-str-extract-all"]], "polars.Series.str.to_datetime": [[1019, "polars-series-str-to-datetime"]], "polars.Series.rolling_mean": [[960, "polars-series-rolling-mean"]], "polars.Series.str.lengths": [[1002, "polars-series-str-lengths"]], "polars.Series.sinh": [[983, "polars-series-sinh"]], "polars.Series.sort": [[986, "polars-series-sort"]], "polars.Series.shape": [[975, "polars-series-shape"]], "polars.Series.str.replace_all": [[1008, "polars-series-str-replace-all"]], "polars.Series.slice": [[985, "polars-series-slice"]], "polars.Series.sqrt": [[987, "polars-series-sqrt"]], "polars.Series.str": [[989, "polars-series-str"]], "polars.Series.std": [[988, "polars-series-std"]], "polars.Series.skew": [[984, "polars-series-skew"]], "polars.Series.is_unique": [[888, "polars-series-is-unique"]], "polars.Series.is_float": [[877, "polars-series-is-float"]], "polars.Series.is_first": [[876, "polars-series-is-first"]], "polars.Series.is_not_null": [[883, "polars-series-is-not-null"]], "polars.Series.list.reverse": [[914, "polars-series-list-reverse"]], "polars.Series.list.set_intersection": [[916, "polars-series-list-set-intersection"]], "polars.Series.list.sum": [[922, "polars-series-list-sum"]], "polars.Series.log10": [[928, "polars-series-log10"]], "polars.Series.is_temporal": [[887, "polars-series-is-temporal"]], "polars.Series.list.lengths": [[910, "polars-series-list-lengths"]], "polars.Series.min": [[935, "polars-series-min"]], "polars.Series.list.eval": [[903, "polars-series-list-eval"]], "polars.Series.pct_change": [[944, "polars-series-pct-change"]], "polars.Series.list.tail": [[923, "polars-series-list-tail"]], "polars.Series.list.arg_max": [[897, "polars-series-list-arg-max"]], "polars.Series.log": [[927, "polars-series-log"]], "polars.Series.is_null": [[884, "polars-series-is-null"]], "polars.Series.list.max": [[911, "polars-series-list-max"]], "polars.Series.limit": [[893, "polars-series-limit"]], "polars.Series.mean": [[933, "polars-series-mean"]], "polars.Series.nan_max": [[940, "polars-series-nan-max"]], "polars.Series.kurtosis": [[891, "polars-series-kurtosis"]], "polars.Series.list": [[894, "polars-series-list"]], "polars.Series.list.to_struct": [[925, "polars-series-list-to-struct"]], "polars.Series.is_utf8": [[889, "polars-series-is-utf8"]], "polars.Series.list.diff": [[902, "polars-series-list-diff"]], "polars.Series.nan_min": [[941, "polars-series-nan-min"]], "polars.Series.list.arg_min": [[898, "polars-series-list-arg-min"]], "polars.Series.is_infinite": [[879, "polars-series-is-infinite"]], "polars.Series.list.set_difference": [[915, "polars-series-list-set-difference"]], "polars.Series.median": [[934, "polars-series-median"]], "polars.Series.is_not_nan": [[882, "polars-series-is-not-nan"]], "polars.Series.list.any": [[896, "polars-series-list-any"]], "polars.Series.list.shift": [[919, "polars-series-list-shift"]], "polars.Series.list.mean": [[912, "polars-series-list-mean"]], "polars.Series.mode": [[936, "polars-series-mode"]], "polars.Series.list.min": [[913, "polars-series-list-min"]], "polars.Series.item": [[890, "polars-series-item"]], "polars.Series.n_chunks": [[937, "polars-series-n-chunks"]], "polars.Series.list.last": [[909, "polars-series-list-last"]], "polars.Series.null_count": [[943, "polars-series-null-count"]], "polars.Series.list.slice": [[920, "polars-series-list-slice"]], "polars.Series.peak_min": [[946, "polars-series-peak-min"]], "polars.Series.list.sort": [[921, "polars-series-list-sort"]], "polars.Series.list.concat": [[899, "polars-series-list-concat"]], "polars.Series.list.set_union": [[918, "polars-series-list-set-union"]], "polars.Series.list.contains": [[900, "polars-series-list-contains"]], "polars.Series.new_from_index": [[942, "polars-series-new-from-index"]], "polars.Series.product": [[947, "polars-series-product"]], "polars.Series.list.join": [[908, "polars-series-list-join"]], "polars.Series.lower_bound": [[930, "polars-series-lower-bound"]], "polars.Series.is_numeric": [[885, "polars-series-is-numeric"]], "polars.Series.list.all": [[895, "polars-series-list-all"]], "polars.Series.list.head": [[907, "polars-series-list-head"]], "polars.Series.qcut": [[948, "polars-series-qcut"]], "polars.Series.list.get": [[906, "polars-series-list-get"]], "polars.Series.list.first": [[905, "polars-series-list-first"]], "polars.Series.map_dict": [[931, "polars-series-map-dict"]], "polars.Series.is_integer": [[880, "polars-series-is-integer"]], "polars.Series.len": [[892, "polars-series-len"]], "polars.Series.list.count_match": [[901, "polars-series-list-count-match"]], "polars.Series.list.unique": [[926, "polars-series-list-unique"]], "polars.Series.n_unique": [[938, "polars-series-n-unique"]], "polars.Series.peak_max": [[945, "polars-series-peak-max"]], "polars.Series.list.set_symmetric_difference": [[917, "polars-series-list-set-symmetric-difference"]], "polars.Series.is_nan": [[881, "polars-series-is-nan"]], "polars.Series.list.explode": [[904, "polars-series-list-explode"]], "polars.Series.log1p": [[929, "polars-series-log1p"]], "polars.Series.list.take": [[924, "polars-series-list-take"]], "polars.Series.is_sorted": [[886, "polars-series-is-sorted"]], "polars.Series.is_in": [[878, "polars-series-is-in"]], "polars.Series.max": [[932, "polars-series-max"]], "polars.Series.name": [[939, "polars-series-name"]], "polars.Series.extend_constant": [[857, "polars-series-extend-constant"]], "polars.Series.dt.week": [[844, "polars-series-dt-week"]], "polars.Series.dt.round": [[836, "polars-series-dt-round"]], "polars.Series.dt.dst_offset": [[811, "polars-series-dt-dst-offset"]], "polars.Series.dt.timestamp": [[841, "polars-series-dt-timestamp"]], "polars.Series.filter": [[860, "polars-series-filter"]], "polars.Series.inner_dtype": [[869, "polars-series-inner-dtype"]], "polars.Series.dt.strftime": [[839, "polars-series-dt-strftime"]], "polars.Series.dt.hours": [[814, "polars-series-dt-hours"]], "polars.Series.dt.time": [[840, "polars-series-dt-time"]], "polars.Series.ewm_std": [[852, "polars-series-ewm-std"]], "polars.Series.explode": [[855, "polars-series-explode"]], "polars.Series.dt.with_time_unit": [[846, "polars-series-dt-with-time-unit"]], "polars.Series.dt.base_utc_offset": [[803, "polars-series-dt-base-utc-offset"]], "polars.Series.get_chunks": [[863, "polars-series-get-chunks"]], "polars.Series.is_finite": [[875, "polars-series-is-finite"]], "polars.Series.dt.microseconds": [[821, "polars-series-dt-microseconds"]], "polars.Series.flags": [[861, "polars-series-flags"]], "polars.Series.hist": [[867, "polars-series-hist"]], "polars.Series.dtype": [[848, "polars-series-dtype"]], "polars.Series.entropy": [[849, "polars-series-entropy"]], "polars.Series.dt.nanoseconds": [[831, "polars-series-dt-nanoseconds"]], "polars.Series.dt.month_start": [[829, "polars-series-dt-month-start"]], "polars.Series.dt.datetime": [[808, "polars-series-dt-datetime"]], "polars.Series.head": [[866, "polars-series-head"]], "polars.Series.dt.hour": [[813, "polars-series-dt-hour"]], "polars.Series.fill_nan": [[858, "polars-series-fill-nan"]], "polars.Series.dt.second": [[837, "polars-series-dt-second"]], "polars.Series.dt.median": [[819, "polars-series-dt-median"]], "polars.Series.is_duplicated": [[873, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[874, "polars-series-is-empty"]], "polars.Series.dt.minute": [[825, "polars-series-dt-minute"]], "polars.Series.dt.minutes": [[826, "polars-series-dt-minutes"]], "polars.Series.dt.microsecond": [[820, "polars-series-dt-microsecond"]], "polars.Series.implode": [[868, "polars-series-implode"]], "polars.Series.hash": [[865, "polars-series-hash"]], "polars.Series.dt.quarter": [[834, "polars-series-dt-quarter"]], "polars.Series.dt.to_string": [[842, "polars-series-dt-to-string"]], "polars.Series.dt.is_leap_year": [[815, "polars-series-dt-is-leap-year"]], "polars.Series.dt.milliseconds": [[823, "polars-series-dt-milliseconds"]], "polars.Series.dt.millisecond": [[822, "polars-series-dt-millisecond"]], "polars.Series.dt.offset_by": [[832, "polars-series-dt-offset-by"]], "polars.Series.ewm_mean": [[851, "polars-series-ewm-mean"]], "polars.Series.dt.nanosecond": [[830, "polars-series-dt-nanosecond"]], "polars.Series.dt.weekday": [[845, "polars-series-dt-weekday"]], "polars.Series.dt.ordinal_day": [[833, "polars-series-dt-ordinal-day"]], "polars.Series.has_validity": [[864, "polars-series-has-validity"]], "polars.Series.dt.cast_time_unit": [[804, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.month": [[827, "polars-series-dt-month"]], "polars.Series.dt.days": [[810, "polars-series-dt-days"]], "polars.Series.ewm_var": [[853, "polars-series-ewm-var"]], "polars.Series.interpolate": [[870, "polars-series-interpolate"]], "polars.Series.extend": [[856, "polars-series-extend"]], "polars.Series.dt.combine": [[805, "polars-series-dt-combine"]], "polars.Series.dt.day": [[809, "polars-series-dt-day"]], "polars.Series.dt.min": [[824, "polars-series-dt-min"]], "polars.Series.dt.max": [[817, "polars-series-dt-max"]], "polars.Series.dt.replace_time_zone": [[835, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.year": [[847, "polars-series-dt-year"]], "polars.Series.fill_null": [[859, "polars-series-fill-null"]], "polars.Series.dt.epoch": [[812, "polars-series-dt-epoch"]], "polars.Series.dt.mean": [[818, "polars-series-dt-mean"]], "polars.Series.dt.convert_time_zone": [[806, "polars-series-dt-convert-time-zone"]], "polars.Series.is_boolean": [[872, "polars-series-is-boolean"]], "polars.Series.floor": [[862, "polars-series-floor"]], "polars.Series.exp": [[854, "polars-series-exp"]], "polars.Series.dt.month_end": [[828, "polars-series-dt-month-end"]], "polars.Series.is_between": [[871, "polars-series-is-between"]], "polars.Series.dt.seconds": [[838, "polars-series-dt-seconds"]], "polars.Series.dt.iso_year": [[816, "polars-series-dt-iso-year"]], "polars.Series.dt.truncate": [[843, "polars-series-dt-truncate"]], "polars.Series.dt.date": [[807, "polars-series-dt-date"]], "polars.Series.estimated_size": [[850, "polars-series-estimated-size"]], "Temporal": [[1067, "temporal"], [651, "temporal"], [260, "temporal"]], "polars.Series.struct.rename_fields": [[1028, "polars-series-struct-rename-fields"]], "Boolean": [[1056, "boolean"], [638, "boolean"]], "Binary": [[1055, "binary"], [648, "binary"], [637, "binary"]], "polars.Series.to_arrow": [[1037, "polars-series-to-arrow"]], "polars.Series.upper_bound": [[1048, "polars-series-upper-bound"]], "polars.Series.var": [[1050, "polars-series-var"]], "Categories": [[1057, "categories"], [639, "categories"]], "Series": [[1061, "series"]], "List": [[1062, "list"], [644, "list"]], "polars.Series.take": [[1033, "polars-series-take"]], "Array": [[1053, "array"], [636, "array"]], "polars.Series.tan": [[1035, "polars-series-tan"]], "polars.Series.str.to_uppercase": [[1024, "polars-series-str-to-uppercase"]], "polars.Series.struct.unnest": [[1030, "polars-series-struct-unnest"]], "String": [[1065, "string"], [649, "string"]], "polars.Series.struct.field": [[1026, "polars-series-struct-field"]], "Testing": [[1069, "testing"]], "Asserts": [[1069, "asserts"]], "Parametric testing": [[1069, "parametric-testing"]], "Polars primitives": [[1069, "polars-primitives"]], "Strategy helpers": [[1069, "strategy-helpers"]], "Profiles": [[1069, "profiles"]], "polars.Series.str.to_titlecase": [[1023, "polars-series-str-to-titlecase"]], "SQL": [[1068, "sql"]], "Methods": [[1068, "methods"]], "Attributes": [[1054, "attributes"], [739, "attributes"], [252, "attributes"]], "Manipulation/selection": [[1064, "manipulation-selection"], [744, "manipulation-selection"], [647, "manipulation-selection"], [259, "manipulation-selection"]], "polars.Series.struct.schema": [[1029, "polars-series-struct-schema"]], "Descriptive": [[1059, "descriptive"], [740, "descriptive"], [254, "descriptive"]], "polars.Series.struct.fields": [[1027, "polars-series-struct-fields"]], "polars.Series.to_list": [[1041, "polars-series-to-list"]], "polars.Series.unique": [[1046, "polars-series-unique"]], "polars.Series.sum": [[1031, "polars-series-sum"]], "polars.Series.to_numpy": [[1042, "polars-series-to-numpy"]], "polars.Series.to_init_repr": [[1040, "polars-series-to-init-repr"]], "polars.Series.view": [[1051, "polars-series-view"]], "polars.Series.tail": [[1032, "polars-series-tail"]], "polars.Series.value_counts": [[1049, "polars-series-value-counts"]], "polars.Series.to_dummies": [[1038, "polars-series-to-dummies"]], "polars.Series.str.zfill": [[1025, "polars-series-str-zfill"]], "polars.Series.zip_with": [[1052, "polars-series-zip-with"]], "Struct": [[1066, "struct"], [650, "struct"]], "polars.Series.top_k": [[1045, "polars-series-top-k"]], "polars.Series.to_physical": [[1044, "polars-series-to-physical"]], "Computation": [[1058, "computation"], [641, "computation"], [253, "computation"]], "polars.Series.unique_counts": [[1047, "polars-series-unique-counts"]], "Utils": [[1070, "utils"]], "polars.Series.to_frame": [[1039, "polars-series-to-frame"]], "Miscellaneous": [[1063, "miscellaneous"], [743, "miscellaneous"], [646, "miscellaneous"], [653, "miscellaneous"], [258, "miscellaneous"]], "polars.Series.str.to_time": [[1022, "polars-series-str-to-time"]], "Export": [[1060, "export"], [255, "export"]], "polars.Series.to_pandas": [[1043, "polars-series-to-pandas"]], "polars.Series.tanh": [[1036, "polars-series-tanh"]], "polars.Series.take_every": [[1034, "polars-series-take-every"]], "polars.LazyFrame.median": [[689, "polars-lazyframe-median"]], "polars.LazyFrame.mean": [[688, "polars-lazyframe-mean"]], "polars.LazyFrame.select": [[701, "polars-lazyframe-select"]], "polars.LazyFrame.max": [[687, "polars-lazyframe-max"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[728, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.take_every": [[713, "polars-lazyframe-take-every"]], "polars.LazyFrame.with_columns_seq": [[721, "polars-lazyframe-with-columns-seq"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[726, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.with_context": [[722, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[727, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.first": [[673, "polars-lazyframe-first"]], "polars.LazyFrame.inspect": [[679, "polars-lazyframe-inspect"]], "polars.LazyFrame.shift": [[705, "polars-lazyframe-shift"]], "polars.LazyFrame.sum": [[711, "polars-lazyframe-sum"]], "polars.LazyFrame.select_seq": [[702, "polars-lazyframe-select-seq"]], "polars.LazyFrame.serialize": [[703, "polars-lazyframe-serialize"]], "polars.LazyFrame.unique": [[715, "polars-lazyframe-unique"]], "polars.LazyFrame.map": [[686, "polars-lazyframe-map"]], "polars.LazyFrame.reverse": [[699, "polars-lazyframe-reverse"]], "polars.LazyFrame.with_columns": [[720, "polars-lazyframe-with-columns"]], "polars.LazyFrame.head": [[678, "polars-lazyframe-head"]], "polars.LazyFrame.null_count": [[693, "polars-lazyframe-null-count"]], "polars.LazyFrame.clone": [[660, "polars-lazyframe-clone"]], "polars.LazyFrame.slice": [[708, "polars-lazyframe-slice"]], "polars.LazyFrame.clear": [[659, "polars-lazyframe-clear"]], "polars.LazyFrame.join_asof": [[682, "polars-lazyframe-join-asof"]], "polars.LazyFrame.groupby_rolling": [[677, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.profile": [[695, "polars-lazyframe-profile"]], "polars.LazyFrame.unnest": [[716, "polars-lazyframe-unnest"]], "polars.LazyFrame.drop_nulls": [[665, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.std": [[710, "polars-lazyframe-std"]], "polars.LazyFrame.width": [[719, "polars-lazyframe-width"]], "polars.LazyFrame.explain": [[667, "polars-lazyframe-explain"]], "polars.LazyFrame.with_row_count": [[723, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.interpolate": [[680, "polars-lazyframe-interpolate"]], "polars.LazyFrame.update": [[717, "polars-lazyframe-update"]], "polars.LazyFrame.limit": [[685, "polars-lazyframe-limit"]], "polars.LazyFrame.sort": [[709, "polars-lazyframe-sort"]], "polars.LazyFrame.groupby": [[675, "polars-lazyframe-groupby"]], "polars.LazyFrame.var": [[718, "polars-lazyframe-var"]], "polars.LazyFrame.merge_sorted": [[691, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.groupby_dynamic": [[676, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.rename": [[698, "polars-lazyframe-rename"]], "polars.LazyFrame.top_k": [[714, "polars-lazyframe-top-k"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[724, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.fetch": [[669, "polars-lazyframe-fetch"]], "polars.LazyFrame.pipe": [[694, "polars-lazyframe-pipe"]], "polars.LazyFrame.set_sorted": [[704, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.tail": [[712, "polars-lazyframe-tail"]], "polars.LazyFrame.collect": [[661, "polars-lazyframe-collect"]], "polars.LazyFrame.schema": [[700, "polars-lazyframe-schema"]], "polars.LazyFrame.min": [[692, "polars-lazyframe-min"]], "polars.LazyFrame.shift_and_fill": [[706, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.drop": [[664, "polars-lazyframe-drop"]], "polars.LazyFrame.last": [[683, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[684, "polars-lazyframe-lazy"]], "polars.LazyFrame.bottom_k": [[657, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.read_json": [[697, "polars-lazyframe-read-json"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[725, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.filter": [[672, "polars-lazyframe-filter"]], "polars.LazyFrame.show_graph": [[707, "polars-lazyframe-show-graph"]], "polars.LazyFrame.melt": [[690, "polars-lazyframe-melt"]], "polars.LazyFrame.quantile": [[696, "polars-lazyframe-quantile"]], "polars.LazyFrame.from_json": [[674, "polars-lazyframe-from-json"]], "polars.LazyFrame.dtypes": [[666, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[668, "polars-lazyframe-explode"]], "polars.LazyFrame.join": [[681, "polars-lazyframe-join"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[729, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.fill_nan": [[670, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[671, "polars-lazyframe-fill-null"]], "polars.LazyFrame.columns": [[662, "polars-lazyframe-columns"]], "polars.LazyFrame.deserialize": [[663, "polars-lazyframe-deserialize"]], "polars.LazyFrame.cache": [[658, "polars-lazyframe-cache"]], "polars.Series.arg_unique": [[763, "polars-series-arg-unique"]], "polars.Series.describe": [[797, "polars-series-describe"]], "polars.Series.dt": [[802, "polars-series-dt"]], "polars.Series.arccosh": [[754, "polars-series-arccosh"]], "polars.Series.cat.set_ordering": [[778, "polars-series-cat-set-ordering"]], "polars.Series.cat.uses_lexical_ordering": [[780, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.all": [[749, "polars-series-all"]], "polars.Series.bin.decode": [[769, "polars-series-bin-decode"]], "polars.Series.clip_min": [[787, "polars-series-clip-min"]], "polars.Series.arr.unique": [[767, "polars-series-arr-unique"]], "polars.Series.clone": [[788, "polars-series-clone"]], "polars.Series.cat.to_local": [[779, "polars-series-cat-to-local"]], "polars.Series.bottom_k": [[773, "polars-series-bottom-k"]], "polars.Series.append": [[751, "polars-series-append"]], "polars.Series.cosh": [[790, "polars-series-cosh"]], "polars.Series.cumsum": [[794, "polars-series-cumsum"]], "polars.Series.arr.sum": [[766, "polars-series-arr-sum"]], "polars.Series.bin.encode": [[770, "polars-series-bin-encode"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[736, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arg_true": [[762, "polars-series-arg-true"]], "polars.Series.cos": [[789, "polars-series-cos"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[738, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.clear": [[784, "polars-series-clear"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[730, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[734, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.Series.abs": [[747, "polars-series-abs"]], "polars.Series.apply": [[752, "polars-series-apply"]], "polars.Series.arr.max": [[764, "polars-series-arr-max"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[731, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.Series.clip": [[785, "polars-series-clip"]], "Selectors": [[745, "selectors"]], "Importing": [[745, "importing"]], "Set operations": [[745, "set-operations"]], "Functions": [[745, "functions"], [653, "functions"], [642, "functions"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[737, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arcsinh": [[756, "polars-series-arcsinh"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[735, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arr.min": [[765, "polars-series-arr-min"]], "polars.Series.cumulative_eval": [[795, "polars-series-cumulative-eval"]], "polars.Series.alias": [[748, "polars-series-alias"]], "polars.Series.arccos": [[753, "polars-series-arccos"]], "polars.Series.arg_sort": [[761, "polars-series-arg-sort"]], "polars.Series.chunk_lengths": [[783, "polars-series-chunk-lengths"]], "polars.Series.cumprod": [[793, "polars-series-cumprod"]], "Read/write logical plan": [[743, "read-write-logical-plan"]], "polars.Series.cbrt": [[781, "polars-series-cbrt"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[732, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.bin.contains": [[768, "polars-series-bin-contains"]], "polars.Series.arg_min": [[760, "polars-series-arg-min"]], "polars.Series.arcsin": [[755, "polars-series-arcsin"]], "polars.Series.bin.starts_with": [[772, "polars-series-bin-starts-with"]], "polars.Series.cast": [[774, "polars-series-cast"]], "polars.Series.clip_max": [[786, "polars-series-clip-max"]], "polars.Series.cummax": [[791, "polars-series-cummax"]], "polars.Series.ceil": [[782, "polars-series-ceil"]], "polars.Series.arg_max": [[759, "polars-series-arg-max"]], "polars.Series.diff": [[798, "polars-series-diff"]], "polars.Series.cat": [[775, "polars-series-cat"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[733, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.Series.cat.get_categories": [[776, "polars-series-cat-get-categories"]], "polars.Series.arctanh": [[758, "polars-series-arctanh"]], "polars.Series.drop_nans": [[800, "polars-series-drop-nans"]], "GroupBy": [[741, "groupby"], [256, "groupby"]], "LazyFrame": [[742, "lazyframe"]], "polars.Series.drop_nulls": [[801, "polars-series-drop-nulls"]], "polars.Series.cut": [[796, "polars-series-cut"]], "polars.Series.cat.is_local": [[777, "polars-series-cat-is-local"]], "polars.Series.bin.ends_with": [[771, "polars-series-bin-ends-with"]], "polars.Series.arctan": [[757, "polars-series-arctan"]], "polars.Series.dot": [[799, "polars-series-dot"]], "polars.Series.any": [[750, "polars-series-any"]], "polars.Series.cummin": [[792, "polars-series-cummin"]], "polars.Expr.str.extract_all": [[520, "polars-expr-str-extract-all"]], "polars.Expr.str.zfill": [[547, "polars-expr-str-zfill"]], "polars.approx_n_unique": [[573, "polars-approx-n-unique"]], "polars.any": [[570, "polars-any"]], "polars.arg_sort_by": [[577, "polars-arg-sort-by"]], "polars.all": [[568, "polars-all"]], "polars.Expr.str.to_date": [[540, "polars-expr-str-to-date"]], "polars.Expr.str.json_path_match": [[523, "polars-expr-str-json-path-match"]], "polars.Expr.take_every": [[555, "polars-expr-take-every"]], "polars.concat_str": [[583, "polars-concat-str"]], "polars.Expr.str.json_extract": [[522, "polars-expr-str-json-extract"]], "polars.Expr.xor": [[567, "polars-expr-xor"]], "polars.arange": [[574, "polars-arange"]], "polars.Expr.str.ljust": [[525, "polars-expr-str-ljust"]], "polars.Expr.str.splitn": [[536, "polars-expr-str-splitn"]], "polars.Expr.where": [[566, "polars-expr-where"]], "polars.avg": [[579, "polars-avg"]], "polars.Expr.str.split_exact": [[535, "polars-expr-str-split-exact"]], "polars.arctan2d": [[576, "polars-arctan2d"]], "polars.Expr.to_physical": [[558, "polars-expr-to-physical"]], "polars.Expr.truediv": [[560, "polars-expr-truediv"]], "polars.Expr.top_k": [[559, "polars-expr-top-k"]], "polars.col": [[581, "polars-col"]], "polars.Expr.str.concat": [[512, "polars-expr-str-concat"]], "polars.Expr.str.replace_all": [[530, "polars-expr-str-replace-all"]], "polars.Expr.var": [[565, "polars-expr-var"]], "polars.Expr.str.to_datetime": [[541, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_uppercase": [[546, "polars-expr-str-to-uppercase"]], "polars.Expr.sub": [[550, "polars-expr-sub"]], "polars.Expr.str.strip": [[538, "polars-expr-str-strip"]], "polars.Expr.std": [[511, "polars-expr-std"]], "polars.Expr.str.starts_with": [[537, "polars-expr-str-starts-with"]], "polars.arctan2": [[575, "polars-arctan2"]], "polars.Expr.str.to_time": [[544, "polars-expr-str-to-time"]], "polars.Expr.str.extract_groups": [[521, "polars-expr-str-extract-groups"]], "polars.Expr.unique_counts": [[562, "polars-expr-unique-counts"]], "polars.Expr.str.explode": [[518, "polars-expr-str-explode"]], "polars.Expr.str.decode": [[515, "polars-expr-str-decode"]], "polars.all_horizontal": [[569, "polars-all-horizontal"]], "polars.Expr.str.ends_with": [[517, "polars-expr-str-ends-with"]], "polars.Expr.tan": [[556, "polars-expr-tan"]], "polars.Expr.str.to_titlecase": [[545, "polars-expr-str-to-titlecase"]], "polars.Expr.take": [[554, "polars-expr-take"]], "polars.Expr.str.extract": [[519, "polars-expr-str-extract"]], "polars.Expr.str.contains": [[513, "polars-expr-str-contains"]], "polars.Expr.str.parse_int": [[528, "polars-expr-str-parse-int"]], "polars.Expr.str.split": [[534, "polars-expr-str-split"]], "polars.Expr.unique": [[561, "polars-expr-unique"]], "polars.Expr.str.to_lowercase": [[543, "polars-expr-str-to-lowercase"]], "polars.Expr.suffix": [[551, "polars-expr-suffix"]], "polars.Expr.value_counts": [[564, "polars-expr-value-counts"]], "polars.Expr.str.encode": [[516, "polars-expr-str-encode"]], "polars.Expr.str.slice": [[533, "polars-expr-str-slice"]], "polars.Expr.str.rstrip": [[532, "polars-expr-str-rstrip"]], "polars.Expr.str.count_match": [[514, "polars-expr-str-count-match"]], "polars.Expr.upper_bound": [[563, "polars-expr-upper-bound"]], "polars.Expr.struct.rename_fields": [[549, "polars-expr-struct-rename-fields"]], "polars.any_horizontal": [[571, "polars-any-horizontal"]], "polars.arg_where": [[578, "polars-arg-where"]], "polars.concat_list": [[582, "polars-concat-list"]], "polars.Expr.sum": [[552, "polars-expr-sum"]], "polars.Expr.str.replace": [[529, "polars-expr-str-replace"]], "polars.Expr.tanh": [[557, "polars-expr-tanh"]], "polars.apply": [[572, "polars-apply"]], "polars.Expr.str.rjust": [[531, "polars-expr-str-rjust"]], "polars.Expr.struct.field": [[548, "polars-expr-struct-field"]], "polars.Expr.str.lstrip": [[526, "polars-expr-str-lstrip"]], "polars.Expr.str.n_chars": [[527, "polars-expr-str-n-chars"]], "polars.Expr.str.to_decimal": [[542, "polars-expr-str-to-decimal"]], "polars.Expr.str.lengths": [[524, "polars-expr-str-lengths"]], "polars.coalesce": [[580, "polars-coalesce"]], "polars.Expr.str.strptime": [[539, "polars-expr-str-strptime"]], "polars.Expr.tail": [[553, "polars-expr-tail"]], "polars.Expr.ne_missing": [[465, "polars-expr-ne-missing"]], "polars.Expr.meta.undo_aliases": [[455, "polars-expr-meta-undo-aliases"]], "polars.Expr.repeat_by": [[480, "polars-expr-repeat-by"]], "polars.Expr.rolling_mean": [[487, "polars-expr-rolling-mean"]], "polars.Expr.rolling_std": [[492, "polars-expr-rolling-std"]], "polars.Expr.mul": [[460, "polars-expr-mul"]], "polars.Expr.meta.output_name": [[451, "polars-expr-meta-output-name"]], "polars.Expr.rechunk": [[478, "polars-expr-rechunk"]], "polars.Expr.quantile": [[475, "polars-expr-quantile"]], "polars.Expr.rle": [[483, "polars-expr-rle"]], "polars.Expr.product": [[473, "polars-expr-product"]], "polars.Expr.n_unique": [[461, "polars-expr-n-unique"]], "polars.Expr.meta.root_names": [[453, "polars-expr-meta-root-names"]], "polars.Expr.reverse": [[482, "polars-expr-reverse"]], "polars.Expr.rolling_var": [[494, "polars-expr-rolling-var"]], "polars.Expr.shift": [[499, "polars-expr-shift"]], "polars.Expr.lt": [[440, "polars-expr-lt"]], "polars.Expr.meta.pop": [[452, "polars-expr-meta-pop"]], "polars.Expr.max": [[444, "polars-expr-max"]], "polars.Expr.rolling_median": [[488, "polars-expr-rolling-median"]], "polars.Expr.rank": [[477, "polars-expr-rank"]], "polars.Expr.sqrt": [[510, "polars-expr-sqrt"]], "polars.Expr.log1p": [[438, "polars-expr-log1p"]], "polars.Expr.pow": [[471, "polars-expr-pow"]], "polars.Expr.radians": [[476, "polars-expr-radians"]], "polars.Expr.reshape": [[481, "polars-expr-reshape"]], "polars.Expr.map_alias": [[442, "polars-expr-map-alias"]], "polars.Expr.set_sorted": [[498, "polars-expr-set-sorted"]], "polars.Expr.shuffle": [[502, "polars-expr-shuffle"]], "polars.Expr.rolling_apply": [[485, "polars-expr-rolling-apply"]], "polars.Expr.over": [[468, "polars-expr-over"]], "polars.Expr.nan_max": [[462, "polars-expr-nan-max"]], "polars.Expr.null_count": [[466, "polars-expr-null-count"]], "polars.Expr.meta.eq": [[447, "polars-expr-meta-eq"]], "polars.Expr.sign": [[503, "polars-expr-sign"]], "polars.Expr.map": [[441, "polars-expr-map"]], "polars.Expr.mode": [[459, "polars-expr-mode"]], "polars.Expr.mod": [[458, "polars-expr-mod"]], "polars.Expr.sort_by": [[509, "polars-expr-sort-by"]], "polars.Expr.meta.ne": [[450, "polars-expr-meta-ne"]], "polars.Expr.meta.tree_format": [[454, "polars-expr-meta-tree-format"]], "polars.Expr.search_sorted": [[497, "polars-expr-search-sorted"]], "polars.Expr.prefix": [[472, "polars-expr-prefix"]], "polars.Expr.sinh": [[505, "polars-expr-sinh"]], "polars.Expr.sin": [[504, "polars-expr-sin"]], "polars.Expr.meta.is_regex_projection": [[449, "polars-expr-meta-is-regex-projection"]], "polars.Expr.reinterpret": [[479, "polars-expr-reinterpret"]], "polars.Expr.nan_min": [[463, "polars-expr-nan-min"]], "polars.Expr.mean": [[445, "polars-expr-mean"]], "polars.Expr.rolling_sum": [[493, "polars-expr-rolling-sum"]], "polars.Expr.pipe": [[470, "polars-expr-pipe"]], "polars.Expr.shrink_dtype": [[501, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_max": [[486, "polars-expr-rolling-max"]], "polars.Expr.rolling_min": [[489, "polars-expr-rolling-min"]], "polars.Expr.sort": [[508, "polars-expr-sort"]], "polars.Expr.min": [[457, "polars-expr-min"]], "polars.Expr.median": [[446, "polars-expr-median"]], "polars.Expr.shift_and_fill": [[500, "polars-expr-shift-and-fill"]], "polars.Expr.rle_id": [[484, "polars-expr-rle-id"]], "polars.Expr.rolling_quantile": [[490, "polars-expr-rolling-quantile"]], "polars.Expr.sample": [[496, "polars-expr-sample"]], "polars.Expr.qcut": [[474, "polars-expr-qcut"]], "polars.Expr.or_": [[467, "polars-expr-or"]], "polars.Expr.rolling_skew": [[491, "polars-expr-rolling-skew"]], "polars.Expr.pct_change": [[469, "polars-expr-pct-change"]], "polars.Expr.map_dict": [[443, "polars-expr-map-dict"]], "polars.Expr.meta.write_json": [[456, "polars-expr-meta-write-json"]], "polars.Expr.ne": [[464, "polars-expr-ne"]], "polars.Expr.skew": [[506, "polars-expr-skew"]], "polars.Expr.slice": [[507, "polars-expr-slice"]], "polars.Expr.meta.has_multiple_outputs": [[448, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.round": [[495, "polars-expr-round"]], "polars.Expr.lower_bound": [[439, "polars-expr-lower-bound"]], "polars.Expr.is_not": [[393, "polars-expr-is-not"]], "polars.Expr.list.all": [[404, "polars-expr-list-all"]], "polars.Expr.first": [[373, "polars-expr-first"]], "polars.Expr.list.join": [[417, "polars-expr-list-join"]], "polars.Expr.from_json": [[378, "polars-expr-from-json"]], "polars.Expr.head": [[382, "polars-expr-head"]], "polars.Expr.list.contains": [[409, "polars-expr-list-contains"]], "polars.Expr.gt": [[380, "polars-expr-gt"]], "polars.Expr.flatten": [[374, "polars-expr-flatten"]], "polars.Expr.list.set_intersection": [[425, "polars-expr-list-set-intersection"]], "polars.Expr.is_not_null": [[395, "polars-expr-is-not-null"]], "polars.Expr.list.lengths": [[419, "polars-expr-list-lengths"]], "polars.Expr.is_unique": [[397, "polars-expr-is-unique"]], "polars.Expr.exclude": [[366, "polars-expr-exclude"]], "polars.Expr.list.explode": [[413, "polars-expr-list-explode"]], "polars.Expr.inspect": [[384, "polars-expr-inspect"]], "polars.Expr.list.get": [[415, "polars-expr-list-get"]], "polars.Expr.list.take": [[433, "polars-expr-list-take"]], "polars.Expr.ge": [[379, "polars-expr-ge"]], "polars.Expr.is_not_nan": [[394, "polars-expr-is-not-nan"]], "polars.Expr.limit": [[403, "polars-expr-limit"]], "polars.Expr.list.shift": [[428, "polars-expr-list-shift"]], "polars.Expr.list.count_match": [[410, "polars-expr-list-count-match"]], "polars.Expr.list.unique": [[435, "polars-expr-list-unique"]], "polars.Expr.interpolate": [[385, "polars-expr-interpolate"]], "polars.Expr.list.max": [[420, "polars-expr-list-max"]], "polars.Expr.list.set_symmetric_difference": [[426, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.arg_max": [[406, "polars-expr-list-arg-max"]], "polars.Expr.len": [[402, "polars-expr-len"]], "polars.Expr.list.arg_min": [[407, "polars-expr-list-arg-min"]], "polars.Expr.list.first": [[414, "polars-expr-list-first"]], "polars.Expr.hash": [[381, "polars-expr-hash"]], "polars.Expr.list.to_struct": [[434, "polars-expr-list-to-struct"]], "polars.Expr.floordiv": [[376, "polars-expr-floordiv"]], "polars.Expr.is_nan": [[392, "polars-expr-is-nan"]], "polars.Expr.list.any": [[405, "polars-expr-list-any"]], "polars.Expr.list.sort": [[430, "polars-expr-list-sort"]], "polars.Expr.list.head": [[416, "polars-expr-list-head"]], "polars.Expr.floor": [[375, "polars-expr-floor"]], "polars.Expr.filter": [[372, "polars-expr-filter"]], "polars.Expr.fill_nan": [[370, "polars-expr-fill-nan"]], "polars.Expr.is_first": [[389, "polars-expr-is-first"]], "polars.Expr.keep_name": [[398, "polars-expr-keep-name"]], "polars.Expr.explode": [[368, "polars-expr-explode"]], "polars.Expr.list.slice": [[429, "polars-expr-list-slice"]], "polars.Expr.list.reverse": [[423, "polars-expr-list-reverse"]], "polars.Expr.list.set_difference": [[424, "polars-expr-list-set-difference"]], "polars.Expr.forward_fill": [[377, "polars-expr-forward-fill"]], "polars.Expr.is_infinite": [[391, "polars-expr-is-infinite"]], "polars.Expr.list.diff": [[411, "polars-expr-list-diff"]], "polars.Expr.list.set_union": [[427, "polars-expr-list-set-union"]], "polars.Expr.list.sum": [[431, "polars-expr-list-sum"]], "polars.Expr.log": [[436, "polars-expr-log"]], "polars.Expr.extend_constant": [[369, "polars-expr-extend-constant"]], "polars.Expr.list.concat": [[408, "polars-expr-list-concat"]], "polars.Expr.list.tail": [[432, "polars-expr-list-tail"]], "polars.Expr.last": [[400, "polars-expr-last"]], "polars.Expr.is_null": [[396, "polars-expr-is-null"]], "polars.Expr.list.min": [[422, "polars-expr-list-min"]], "polars.Expr.is_duplicated": [[387, "polars-expr-is-duplicated"]], "polars.Expr.is_in": [[390, "polars-expr-is-in"]], "polars.Expr.exp": [[367, "polars-expr-exp"]], "polars.Expr.le": [[401, "polars-expr-le"]], "polars.Expr.list.mean": [[421, "polars-expr-list-mean"]], "polars.Expr.log10": [[437, "polars-expr-log10"]], "polars.Expr.ewm_var": [[365, "polars-expr-ewm-var"]], "polars.Expr.fill_null": [[371, "polars-expr-fill-null"]], "polars.Expr.list.eval": [[412, "polars-expr-list-eval"]], "polars.Expr.list.last": [[418, "polars-expr-list-last"]], "polars.Expr.kurtosis": [[399, "polars-expr-kurtosis"]], "polars.Expr.is_finite": [[388, "polars-expr-is-finite"]], "polars.Expr.is_between": [[386, "polars-expr-is-between"]], "polars.Expr.implode": [[383, "polars-expr-implode"]], "polars.Expr.cut": [[313, "polars-expr-cut"]], "polars.Expr.dt.hour": [[329, "polars-expr-dt-hour"]], "polars.Expr.cosh": [[305, "polars-expr-cosh"]], "polars.Expr.dt.days": [[326, "polars-expr-dt-days"]], "polars.Expr.dt.offset_by": [[344, "polars-expr-dt-offset-by"]], "polars.Expr.dt.month_start": [[341, "polars-expr-dt-month-start"]], "polars.Expr.dt.time": [[352, "polars-expr-dt-time"]], "polars.Expr.eq_missing": [[362, "polars-expr-eq-missing"]], "polars.Expr.cat.set_ordering": [[298, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.second": [[349, "polars-expr-dt-second"]], "polars.Expr.cumsum": [[311, "polars-expr-cumsum"]], "polars.Expr.dt.truncate": [[355, "polars-expr-dt-truncate"]], "polars.Expr.dt.milliseconds": [[336, "polars-expr-dt-milliseconds"]], "polars.Expr.degrees": [[314, "polars-expr-degrees"]], "polars.Expr.dt.hours": [[330, "polars-expr-dt-hours"]], "polars.Expr.count": [[306, "polars-expr-count"]], "polars.Expr.entropy": [[360, "polars-expr-entropy"]], "polars.Expr.cumcount": [[307, "polars-expr-cumcount"]], "polars.Expr.dt.nanoseconds": [[343, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.timestamp": [[353, "polars-expr-dt-timestamp"]], "polars.Expr.cumulative_eval": [[312, "polars-expr-cumulative-eval"]], "polars.Expr.dt.epoch": [[328, "polars-expr-dt-epoch"]], "polars.Expr.bin.ends_with": [[292, "polars-expr-bin-ends-with"]], "polars.Expr.dt.minute": [[337, "polars-expr-dt-minute"]], "polars.Expr.dt.ordinal_day": [[345, "polars-expr-dt-ordinal-day"]], "polars.Expr.ewm_std": [[364, "polars-expr-ewm-std"]], "polars.Expr.cummax": [[308, "polars-expr-cummax"]], "polars.Expr.cos": [[304, "polars-expr-cos"]], "polars.Expr.dt.dst_offset": [[327, "polars-expr-dt-dst-offset"]], "polars.Expr.cumprod": [[310, "polars-expr-cumprod"]], "polars.Expr.dt.date": [[323, "polars-expr-dt-date"]], "polars.Expr.dt.month": [[339, "polars-expr-dt-month"]], "polars.Expr.diff": [[315, "polars-expr-diff"]], "polars.Expr.dt.convert_time_zone": [[322, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.to_string": [[354, "polars-expr-dt-to-string"]], "polars.Expr.dt.seconds": [[350, "polars-expr-dt-seconds"]], "polars.Expr.dt.with_time_unit": [[358, "polars-expr-dt-with-time-unit"]], "polars.Expr.ceil": [[300, "polars-expr-ceil"]], "polars.Expr.dt.year": [[359, "polars-expr-dt-year"]], "polars.Expr.dt.datetime": [[324, "polars-expr-dt-datetime"]], "polars.Expr.dt.microsecond": [[333, "polars-expr-dt-microsecond"]], "polars.Expr.ewm_mean": [[363, "polars-expr-ewm-mean"]], "polars.Expr.dt.strftime": [[351, "polars-expr-dt-strftime"]], "polars.Expr.dot": [[316, "polars-expr-dot"]], "polars.Expr.dt.nanosecond": [[342, "polars-expr-dt-nanosecond"]], "polars.Expr.eq": [[361, "polars-expr-eq"]], "polars.Expr.clip": [[301, "polars-expr-clip"]], "polars.Expr.dt.combine": [[321, "polars-expr-dt-combine"]], "polars.Expr.cat.get_categories": [[297, "polars-expr-cat-get-categories"]], "polars.Expr.drop_nulls": [[318, "polars-expr-drop-nulls"]], "polars.Expr.cache": [[295, "polars-expr-cache"]], "polars.Expr.clip_max": [[302, "polars-expr-clip-max"]], "polars.Expr.dt.iso_year": [[332, "polars-expr-dt-iso-year"]], "polars.Expr.dt.round": [[348, "polars-expr-dt-round"]], "polars.Expr.dt.weekday": [[357, "polars-expr-dt-weekday"]], "polars.Expr.dt.is_leap_year": [[331, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.cast_time_unit": [[320, "polars-expr-dt-cast-time-unit"]], "polars.Expr.clip_min": [[303, "polars-expr-clip-min"]], "polars.Expr.cbrt": [[299, "polars-expr-cbrt"]], "polars.Expr.dt.quarter": [[346, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[347, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.base_utc_offset": [[319, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.minutes": [[338, "polars-expr-dt-minutes"]], "polars.Expr.bin.starts_with": [[293, "polars-expr-bin-starts-with"]], "polars.Expr.cummin": [[309, "polars-expr-cummin"]], "polars.Expr.dt.day": [[325, "polars-expr-dt-day"]], "polars.Expr.bottom_k": [[294, "polars-expr-bottom-k"]], "polars.Expr.dt.microseconds": [[334, "polars-expr-dt-microseconds"]], "polars.Expr.dt.month_end": [[340, "polars-expr-dt-month-end"]], "polars.Expr.dt.week": [[356, "polars-expr-dt-week"]], "polars.Expr.cast": [[296, "polars-expr-cast"]], "polars.Expr.dt.millisecond": [[335, "polars-expr-dt-millisecond"]], "polars.Expr.drop_nans": [[317, "polars-expr-drop-nans"]], "polars.last": [[607, "polars-last"]], "polars.implode": [[604, "polars-implode"]], "API reference": [[654, "api-reference"]], "polars.cumsum": [[589, "polars-cumsum"]], "Columns / names": [[640, "columns-names"]], "polars.time": [[630, "polars-time"]], "Expressions": [[643, "expressions"]], "Input/output": [[655, "input-output"]], "CSV": [[655, "csv"]], "Feather/ IPC": [[655, "feather-ipc"]], "Parquet": [[655, "parquet"]], "Database": [[655, "database"]], "JSON": [[655, "json"]], "AVRO": [[655, "avro"]], "Excel": [[655, "excel"]], "Delta Lake": [[655, "delta-lake"]], "Datasets": [[655, "datasets"]], "BatchedCsvReader": [[655, "batchedcsvreader"]], "polars.count": [[585, "polars-count"]], "polars.time_range": [[631, "polars-time-range"]], "polars.select": [[623, "polars-select"]], "polars.fold": [[599, "polars-fold"]], "polars.sql_expr": [[624, "polars-sql-expr"]], "polars.struct": [[626, "polars-struct"]], "Operators": [[648, "operators"]], "Conjunction": [[648, "conjunction"]], "Comparison": [[648, "comparison"]], "Numeric": [[648, "numeric"], [260, "numeric"]], "polars.int_range": [[605, "polars-int-range"]], "polars.head": [[603, "polars-head"]], "polars.int_ranges": [[606, "polars-int-ranges"]], "polars.min_horizontal": [[615, "polars-min-horizontal"]], "polars.n_unique": [[616, "polars-n-unique"]], "polars.cov": [[586, "polars-cov"]], "polars.zeros": [[635, "polars-zeros"]], "polars.max_horizontal": [[611, "polars-max-horizontal"]], "polars.map": [[609, "polars-map"]], "polars.rolling_corr": [[621, "polars-rolling-corr"]], "polars.duration": [[595, "polars-duration"]], "polars.groups": [[602, "polars-groups"]], "polars.first": [[598, "polars-first"]], "polars.std": [[625, "polars-std"]], "polars.max": [[610, "polars-max"]], "Conversion": [[653, "conversion"]], "Parallelization": [[653, "parallelization"]], "Random": [[653, "random"]], "StringCache": [[653, "stringcache"]], "polars.date_ranges": [[593, "polars-date-ranges"]], "polars.datetime": [[594, "polars-datetime"]], "polars.element": [[596, "polars-element"]], "polars.cumreduce": [[588, "polars-cumreduce"]], "polars.lit": [[608, "polars-lit"]], "polars.min": [[614, "polars-min"]], "polars.exclude": [[597, "polars-exclude"]], "polars.date_range": [[592, "polars-date-range"]], "polars.when": [[634, "polars-when"]], "polars.repeat": [[620, "polars-repeat"]], "polars.quantile": [[618, "polars-quantile"]], "polars.from_epoch": [[601, "polars-from-epoch"]], "polars.median": [[613, "polars-median"]], "polars.date": [[591, "polars-date"]], "polars.ones": [[617, "polars-ones"]], "polars.reduce": [[619, "polars-reduce"]], "polars.cumsum_horizontal": [[590, "polars-cumsum-horizontal"]], "polars.sum": [[627, "polars-sum"]], "polars.format": [[600, "polars-format"]], "polars.tail": [[629, "polars-tail"]], "Meta": [[645, "meta"]], "polars.cumfold": [[587, "polars-cumfold"]], "polars.time_ranges": [[632, "polars-time-ranges"]], "polars.corr": [[584, "polars-corr"]], "polars.sum_horizontal": [[628, "polars-sum-horizontal"]], "Window": [[652, "window"]], "polars.rolling_cov": [[622, "polars-rolling-cov"]], "polars.var": [[633, "polars-var"]], "polars.mean": [[612, "polars-mean"]], "polars.DataFrame.iter_rows": [[171, "polars-dataframe-iter-rows"]], "polars.DataFrame.shift_and_fill": [[206, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.extend": [[147, "polars-dataframe-extend"]], "polars.DataFrame.rows_by_key": [[198, "polars-dataframe-rows-by-key"]], "polars.DataFrame.to_arrow": [[214, "polars-dataframe-to-arrow"]], "polars.DataFrame.reverse": [[195, "polars-dataframe-reverse"]], "polars.DataFrame.height": [[163, "polars-dataframe-height"]], "polars.DataFrame.fill_null": [[149, "polars-dataframe-fill-null"]], "polars.DataFrame.insert_at_idx": [[165, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.median": [[179, "polars-dataframe-median"]], "polars.DataFrame.pipe": [[187, "polars-dataframe-pipe"]], "polars.DataFrame.join": [[173, "polars-dataframe-join"]], "polars.DataFrame.fill_nan": [[148, "polars-dataframe-fill-nan"]], "polars.DataFrame.pivot": [[188, "polars-dataframe-pivot"]], "polars.DataFrame.is_unique": [[169, "polars-dataframe-is-unique"]], "polars.DataFrame.get_columns": [[156, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby_rolling": [[160, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.mean": [[178, "polars-dataframe-mean"]], "polars.DataFrame.to_dicts": [[216, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_init_repr": [[218, "polars-dataframe-to-init-repr"]], "polars.DataFrame.hash_rows": [[161, "polars-dataframe-hash-rows"]], "polars.DataFrame.rechunk": [[191, "polars-dataframe-rechunk"]], "polars.DataFrame.null_count": [[185, "polars-dataframe-null-count"]], "polars.DataFrame.replace": [[193, "polars-dataframe-replace"]], "polars.DataFrame.n_unique": [[184, "polars-dataframe-n-unique"]], "polars.DataFrame.row": [[196, "polars-dataframe-row"]], "polars.DataFrame.get_column": [[155, "polars-dataframe-get-column"]], "polars.DataFrame.shrink_to_fit": [[207, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.min": [[182, "polars-dataframe-min"]], "polars.DataFrame.fold": [[153, "polars-dataframe-fold"]], "polars.DataFrame.partition_by": [[186, "polars-dataframe-partition-by"]], "polars.DataFrame.filter": [[150, "polars-dataframe-filter"]], "polars.DataFrame.std": [[210, "polars-dataframe-std"]], "polars.DataFrame.iter_slices": [[172, "polars-dataframe-iter-slices"]], "polars.DataFrame.sample": [[199, "polars-dataframe-sample"]], "polars.DataFrame.limit": [[176, "polars-dataframe-limit"]], "polars.DataFrame.n_chunks": [[183, "polars-dataframe-n-chunks"]], "polars.DataFrame.replace_at_idx": [[194, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows": [[197, "polars-dataframe-rows"]], "polars.DataFrame.select_seq": [[202, "polars-dataframe-select-seq"]], "polars.DataFrame.set_sorted": [[203, "polars-dataframe-set-sorted"]], "polars.DataFrame.select": [[201, "polars-dataframe-select"]], "polars.DataFrame.melt": [[180, "polars-dataframe-melt"]], "polars.DataFrame.take_every": [[213, "polars-dataframe-take-every"]], "polars.DataFrame.join_asof": [[174, "polars-dataframe-join-asof"]], "polars.DataFrame.to_dict": [[215, "polars-dataframe-to-dict"]], "polars.DataFrame.interpolate": [[166, "polars-dataframe-interpolate"]], "polars.DataFrame.sum": [[211, "polars-dataframe-sum"]], "polars.DataFrame.glimpse": [[157, "polars-dataframe-glimpse"]], "polars.DataFrame.groupby": [[158, "polars-dataframe-groupby"]], "polars.DataFrame.lazy": [[175, "polars-dataframe-lazy"]], "polars.DataFrame.max": [[177, "polars-dataframe-max"]], "polars.DataFrame.rename": [[192, "polars-dataframe-rename"]], "polars.DataFrame.shift": [[205, "polars-dataframe-shift"]], "polars.DataFrame.slice": [[208, "polars-dataframe-slice"]], "polars.DataFrame.frame_equal": [[154, "polars-dataframe-frame-equal"]], "polars.DataFrame.item": [[170, "polars-dataframe-item"]], "polars.DataFrame.schema": [[200, "polars-dataframe-schema"]], "polars.DataFrame.tail": [[212, "polars-dataframe-tail"]], "polars.DataFrame.to_dummies": [[217, "polars-dataframe-to-dummies"]], "polars.DataFrame.hstack": [[164, "polars-dataframe-hstack"]], "polars.DataFrame.head": [[162, "polars-dataframe-head"]], "polars.DataFrame.explode": [[146, "polars-dataframe-explode"]], "polars.DataFrame.sort": [[209, "polars-dataframe-sort"]], "polars.DataFrame.quantile": [[190, "polars-dataframe-quantile"]], "polars.DataFrame.is_duplicated": [[167, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[168, "polars-dataframe-is-empty"]], "polars.DataFrame.groupby_dynamic": [[159, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.flags": [[152, "polars-dataframe-flags"]], "polars.DataFrame.merge_sorted": [[181, "polars-dataframe-merge-sorted"]], "polars.DataFrame.product": [[189, "polars-dataframe-product"]], "polars.DataFrame.find_idx_by_name": [[151, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.shape": [[204, "polars-dataframe-shape"]], "polars.DataFrame.to_numpy": [[219, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.tail": [[251, "polars-dataframe-groupby-groupby-tail"]], "polars.DataFrame.vstack": [[231, "polars-dataframe-vstack"]], "polars.Expr.agg_groups": [[265, "polars-expr-agg-groups"]], "polars.Expr.arr.unique": [[287, "polars-expr-arr-unique"]], "polars.dataframe.groupby.GroupBy.count": [[240, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.top_k": [[223, "polars-dataframe-top-k"]], "polars.Expr.all": [[267, "polars-expr-all"]], "polars.Expr.arg_sort": [[281, "polars-expr-arg-sort"]], "polars.Expr.and_": [[268, "polars-expr-and"]], "polars.DataFrame.transpose": [[224, "polars-dataframe-transpose"]], "polars.Expr.arcsinh": [[276, "polars-expr-arcsinh"]], "polars.Expr.arg_true": [[282, "polars-expr-arg-true"]], "polars.Expr.arccos": [[273, "polars-expr-arccos"]], "polars.DataFrame.with_columns_seq": [[234, "polars-dataframe-with-columns-seq"]], "polars.dataframe.groupby.GroupBy.min": [[247, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arg_unique": [[283, "polars-expr-arg-unique"]], "polars.dataframe.groupby.GroupBy.n_unique": [[248, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.unstack": [[227, "polars-dataframe-unstack"]], "Exceptions": [[261, "exceptions"]], "polars.Expr.bin.encode": [[291, "polars-expr-bin-encode"]], "polars.DataFrame.unnest": [[226, "polars-dataframe-unnest"]], "polars.dataframe.groupby.GroupBy.max": [[244, "polars-dataframe-groupby-groupby-max"]], "polars.dataframe.groupby.GroupBy.median": [[246, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.var": [[230, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.apply": [[239, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.approx_n_unique": [[272, "polars-expr-approx-n-unique"]], "polars.DataFrame.width": [[232, "polars-dataframe-width"]], "polars.DataFrame.upsample": [[229, "polars-dataframe-upsample"]], "polars.DataFrame.update": [[228, "polars-dataframe-update"]], "DataFrame": [[257, "dataframe"]], "polars.Expr.arr.min": [[285, "polars-expr-arr-min"]], "polars.DataFrame.to_struct": [[222, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.__iter__": [[236, "polars-dataframe-groupby-groupby-iter"]], "polars.dataframe.groupby.GroupBy.agg": [[237, "polars-dataframe-groupby-groupby-agg"]], "polars.Expr.alias": [[266, "polars-expr-alias"]], "polars.Expr.arccosh": [[274, "polars-expr-arccosh"]], "polars.Expr.arg_max": [[279, "polars-expr-arg-max"]], "polars.Expr.append": [[270, "polars-expr-append"]], "polars.DataFrame.with_row_count": [[235, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.first": [[241, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.abs": [[263, "polars-expr-abs"]], "polars.Expr.arctan": [[277, "polars-expr-arctan"]], "polars.DataFrame.to_series": [[221, "polars-dataframe-to-series"]], "polars.Expr.arg_min": [[280, "polars-expr-arg-min"]], "polars.Expr.bin.contains": [[289, "polars-expr-bin-contains"]], "polars.Expr.apply": [[271, "polars-expr-apply"]], "polars.DataFrame.with_columns": [[233, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.head": [[242, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.arcsin": [[275, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.sum": [[250, "polars-dataframe-groupby-groupby-sum"]], "polars.dataframe.groupby.GroupBy.all": [[238, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arctanh": [[278, "polars-expr-arctanh"]], "polars.DataFrame.to_pandas": [[220, "polars-dataframe-to-pandas"]], "polars.dataframe.groupby.GroupBy.last": [[243, "polars-dataframe-groupby-groupby-last"]], "Data types": [[260, "data-types"]], "Nested": [[260, "nested"]], "Other": [[260, "other"]], "polars.DataFrame.unique": [[225, "polars-dataframe-unique"]], "polars.Expr.arr.max": [[284, "polars-expr-arr-max"]], "polars.Expr.arr.sum": [[286, "polars-expr-arr-sum"]], "polars.Expr.backward_fill": [[288, "polars-expr-backward-fill"]], "polars.Expr.add": [[264, "polars-expr-add"]], "polars.dataframe.groupby.GroupBy.mean": [[245, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.bin.decode": [[290, "polars-expr-bin-decode"]], "polars.Expr.any": [[269, "polars-expr-any"]], "polars.dataframe.groupby.GroupBy.quantile": [[249, "polars-dataframe-groupby-groupby-quantile"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[49, "polars.List"]], "__init__() (polars.list method)": [[49, "polars.List.__init__"]], "null (class in polars)": [[50, "polars.Null"]], "__init__() (polars.null method)": [[50, "polars.Null.__init__"]], "object (class in polars)": [[51, "polars.Object"]], "__init__() (polars.object method)": [[51, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[52, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[53, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[54, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[55, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[56, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[57, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[58, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[58, "polars.StringCache.__init__"]], "struct (class in polars)": [[59, "polars.Struct"]], "__init__() (polars.struct method)": [[59, "polars.Struct.__init__"]], "time (class in polars)": [[60, "polars.Time"]], "__init__() (polars.time method)": [[60, "polars.Time.__init__"]], "uint16 (class in polars)": [[61, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[61, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[62, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[62, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[63, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[63, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[64, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[64, "polars.UInt8.__init__"]], "unknown (class in polars)": [[65, "polars.Unknown"]], "__init__() (polars.unknown method)": [[65, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[66, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[66, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[67, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[68, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[69, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[70, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[71, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[72, "polars.build_info"]], "collect_all() (in module polars)": [[73, "polars.collect_all"]], "concat() (in module polars)": [[74, "polars.concat"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[100, "polars.read_avro"]], "read_csv() (in module polars)": [[101, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[102, "polars.read_csv_batched"]], "read_database() (in module polars)": [[103, "polars.read_database"]], "read_delta() (in module polars)": [[104, "polars.read_delta"]], "read_excel() (in module polars)": [[105, "polars.read_excel"]], "read_ipc() (in module polars)": [[106, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[107, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[108, "polars.read_json"]], "read_ndjson() (in module polars)": [[109, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[110, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[111, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[112, "polars.scan_csv"]], "scan_delta() (in module polars)": [[113, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[114, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[115, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[116, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[117, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[118, "polars.set_random_seed"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[130, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[133, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[134, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[135, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[136, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[137, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[138, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[139, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[140, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[141, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[142, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[143, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[144, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[145, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[146, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[147, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[148, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[149, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[150, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[151, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[152, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[153, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[154, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[155, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[156, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[157, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[158, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[161, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[162, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[163, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[164, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[165, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[166, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[167, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[168, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[169, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[170, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[171, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[172, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[173, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[174, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[175, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[176, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[177, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[178, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[179, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[180, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[181, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[182, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[183, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[184, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[185, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[186, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[187, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[188, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[189, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[190, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[191, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[192, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[193, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[194, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[195, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[196, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[197, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[198, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[199, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[200, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[201, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[202, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[203, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[204, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[205, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[206, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[207, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[208, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[209, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[210, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[211, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[212, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[213, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[214, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[215, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[216, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[217, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[218, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[219, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[220, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[221, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[222, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[223, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[224, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[225, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[226, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[227, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[228, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[229, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[230, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[231, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[232, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[233, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[234, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[235, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[250, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[251, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[263, "polars.Expr.abs"]], "add() (polars.expr method)": [[264, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[265, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[266, "polars.Expr.alias"]], "all() (polars.expr method)": [[267, "polars.Expr.all"]], "and_() (polars.expr method)": [[268, "polars.Expr.and_"]], "any() (polars.expr method)": [[269, "polars.Expr.any"]], "append() (polars.expr method)": [[270, "polars.Expr.append"]], "apply() (polars.expr method)": [[271, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[272, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[273, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[274, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[275, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[276, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[277, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[278, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[279, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[280, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[281, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[282, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[283, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[284, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[285, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[286, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[287, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[288, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[289, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[290, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[291, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[292, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[293, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[294, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[295, "polars.Expr.cache"]], "cast() (polars.expr method)": [[296, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[297, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[298, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[299, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[300, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[301, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[302, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[303, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[304, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[305, "polars.Expr.cosh"]], "count() (polars.expr method)": [[306, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[307, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[308, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[309, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[310, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[311, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[312, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[313, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[314, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[315, "polars.Expr.diff"]], "dot() (polars.expr method)": [[316, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[317, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[318, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[319, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[320, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[321, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[322, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[323, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[324, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[325, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[326, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[327, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[328, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[329, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[330, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[331, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[332, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[333, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[334, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[335, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[336, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[337, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[338, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[339, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[340, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[341, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[342, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[343, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[344, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[345, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[346, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[347, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[348, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[349, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[350, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[351, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[352, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[353, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[354, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[355, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[356, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[357, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[358, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[359, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[360, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[361, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[362, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[363, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[364, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[365, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[366, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[367, "polars.Expr.exp"]], "explode() (polars.expr method)": [[368, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[369, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[370, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[371, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[372, "polars.Expr.filter"]], "first() (polars.expr method)": [[373, "polars.Expr.first"]], "flatten() (polars.expr method)": [[374, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[375, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[376, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[377, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[378, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[379, "polars.Expr.ge"]], "gt() (polars.expr method)": [[380, "polars.Expr.gt"]], "hash() (polars.expr method)": [[381, "polars.Expr.hash"]], "head() (polars.expr method)": [[382, "polars.Expr.head"]], "implode() (polars.expr method)": [[383, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[384, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[385, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[386, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[387, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[388, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[389, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[390, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[391, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[392, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[393, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[394, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[395, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[396, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[397, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[398, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[399, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[400, "polars.Expr.last"]], "le() (polars.expr method)": [[401, "polars.Expr.le"]], "len() (polars.expr method)": [[402, "polars.Expr.len"]], "limit() (polars.expr method)": [[403, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[404, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[405, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[406, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[407, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[408, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[409, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[410, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[411, "polars.Expr.list.diff"]], "eval() (polars.expr.list method)": [[412, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[413, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[414, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[415, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[416, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[417, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[418, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[419, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[420, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[421, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[422, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[423, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[424, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[425, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[426, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[427, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[428, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[429, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[430, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[431, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[432, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[433, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[434, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[435, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[436, "polars.Expr.log"]], "log10() (polars.expr method)": [[437, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[438, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[439, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[440, "polars.Expr.lt"]], "map() (polars.expr method)": [[441, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[442, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[443, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[444, "polars.Expr.max"]], "mean() (polars.expr method)": [[445, "polars.Expr.mean"]], "median() (polars.expr method)": [[446, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[447, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[448, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[449, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[450, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[451, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[452, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[453, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[454, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[455, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[456, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[457, "polars.Expr.min"]], "mod() (polars.expr method)": [[458, "polars.Expr.mod"]], "mode() (polars.expr method)": [[459, "polars.Expr.mode"]], "mul() (polars.expr method)": [[460, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[461, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[462, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[463, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[464, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[465, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[466, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[467, "polars.Expr.or_"]], "over() (polars.expr method)": [[468, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[469, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[470, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[471, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[472, "polars.Expr.prefix"]], "product() (polars.expr method)": [[473, "polars.Expr.product"]], "qcut() (polars.expr method)": [[474, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[475, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[476, "polars.Expr.radians"]], "rank() (polars.expr method)": [[477, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[478, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[479, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[480, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[481, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[482, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[483, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[484, "polars.Expr.rle_id"]], "rolling_apply() (polars.expr method)": [[485, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[486, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[487, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[488, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[489, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[490, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[491, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[492, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[493, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[494, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[495, "polars.Expr.round"]], "sample() (polars.expr method)": [[496, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[497, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[498, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[499, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[500, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[501, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[502, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[503, "polars.Expr.sign"]], "sin() (polars.expr method)": [[504, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[505, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[506, "polars.Expr.skew"]], "slice() (polars.expr method)": [[507, "polars.Expr.slice"]], "sort() (polars.expr method)": [[508, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[509, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[510, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[511, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[512, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[513, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[514, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[515, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[516, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[517, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[518, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[519, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[520, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[521, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[522, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[523, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[524, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[525, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[526, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[527, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[528, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[529, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[530, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[531, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[532, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[533, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[534, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[535, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[536, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[537, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[538, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[539, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[540, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[541, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[542, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[543, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[544, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[545, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[546, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[547, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[548, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[549, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[550, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[551, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[552, "polars.Expr.sum"]], "tail() (polars.expr method)": [[553, "polars.Expr.tail"]], "take() (polars.expr method)": [[554, "polars.Expr.take"]], "take_every() (polars.expr method)": [[555, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[556, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[557, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[558, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[559, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[560, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[561, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[562, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[563, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[564, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[565, "polars.Expr.var"]], "where() (polars.expr method)": [[566, "polars.Expr.where"]], "xor() (polars.expr method)": [[567, "polars.Expr.xor"]], "all() (in module polars)": [[568, "polars.all"]], "all_horizontal() (in module polars)": [[569, "polars.all_horizontal"]], "any() (in module polars)": [[570, "polars.any"]], "any_horizontal() (in module polars)": [[571, "polars.any_horizontal"]], "apply() (in module polars)": [[572, "polars.apply"]], "approx_n_unique() (in module polars)": [[573, "polars.approx_n_unique"]], "arange() (in module polars)": [[574, "polars.arange"]], "arctan2() (in module polars)": [[575, "polars.arctan2"]], "arctan2d() (in module polars)": [[576, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[577, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[578, "polars.arg_where"]], "avg() (in module polars)": [[579, "polars.avg"]], "coalesce() (in module polars)": [[580, "polars.coalesce"]], "col() (in module polars)": [[581, "polars.col"]], "concat_list() (in module polars)": [[582, "polars.concat_list"]], "concat_str() (in module polars)": [[583, "polars.concat_str"]], "corr() (in module polars)": [[584, "polars.corr"]], "count() (in module polars)": [[585, "polars.count"]], "cov() (in module polars)": [[586, "polars.cov"]], "cumfold() (in module polars)": [[587, "polars.cumfold"]], "cumreduce() (in module polars)": [[588, "polars.cumreduce"]], "cumsum() (in module polars)": [[589, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[590, "polars.cumsum_horizontal"]], "date() (in module polars)": [[591, "polars.date"]], "date_range() (in module polars)": [[592, "polars.date_range"]], "date_ranges() (in module polars)": [[593, "polars.date_ranges"]], "datetime() (in module polars)": [[594, "polars.datetime"]], "duration() (in module polars)": [[595, "polars.duration"]], "element() (in module polars)": [[596, "polars.element"]], "exclude() (in module polars)": [[597, "polars.exclude"]], "first() (in module polars)": [[598, "polars.first"]], "fold() (in module polars)": [[599, "polars.fold"]], "format() (in module polars)": [[600, "polars.format"]], "from_epoch() (in module polars)": [[601, "polars.from_epoch"]], "groups() (in module polars)": [[602, "polars.groups"]], "head() (in module polars)": [[603, "polars.head"]], "implode() (in module polars)": [[604, "polars.implode"]], "int_range() (in module polars)": [[605, "polars.int_range"]], "int_ranges() (in module polars)": [[606, "polars.int_ranges"]], "last() (in module polars)": [[607, "polars.last"]], "lit() (in module polars)": [[608, "polars.lit"]], "map() (in module polars)": [[609, "polars.map"]], "max() (in module polars)": [[610, "polars.max"]], "max_horizontal() (in module polars)": [[611, "polars.max_horizontal"]], "mean() (in module polars)": [[612, "polars.mean"]], "median() (in module polars)": [[613, "polars.median"]], "min() (in module polars)": [[614, "polars.min"]], "min_horizontal() (in module polars)": [[615, "polars.min_horizontal"]], "n_unique() (in module polars)": [[616, "polars.n_unique"]], "ones() (in module polars)": [[617, "polars.ones"]], "quantile() (in module polars)": [[618, "polars.quantile"]], "reduce() (in module polars)": [[619, "polars.reduce"]], "repeat() (in module polars)": [[620, "polars.repeat"]], "rolling_corr() (in module polars)": [[621, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[622, "polars.rolling_cov"]], "select() (in module polars)": [[623, "polars.select"]], "sql_expr() (in module polars)": [[624, "polars.sql_expr"]], "std() (in module polars)": [[625, "polars.std"]], "struct() (in module polars)": [[626, "polars.struct"]], "sum() (in module polars)": [[627, "polars.sum"]], "sum_horizontal() (in module polars)": [[628, "polars.sum_horizontal"]], "tail() (in module polars)": [[629, "polars.tail"]], "time() (in module polars)": [[630, "polars.time"]], "time_range() (in module polars)": [[631, "polars.time_range"]], "time_ranges() (in module polars)": [[632, "polars.time_ranges"]], "var() (in module polars)": [[633, "polars.var"]], "when() (in module polars)": [[634, "polars.when"]], "zeros() (in module polars)": [[635, "polars.zeros"]], "bottom_k() (polars.lazyframe method)": [[657, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[658, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[659, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[660, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[661, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[662, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[663, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[664, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[665, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[666, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[667, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[668, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[669, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[670, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[671, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[672, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[673, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[674, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[675, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[676, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[677, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[678, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[679, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[680, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[681, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[682, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[683, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[684, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[685, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[686, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[687, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[688, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[689, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[690, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[691, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[692, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[693, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[694, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[695, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[696, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[697, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[698, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[699, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[700, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[701, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[702, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[703, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[704, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[705, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[706, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[707, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[708, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[709, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[710, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[711, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[712, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[713, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[714, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[715, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[716, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[717, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[718, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[719, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[720, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[721, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[722, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[723, "polars.LazyFrame.with_row_count"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[724, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[725, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[726, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[727, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[728, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[729, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[730, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[731, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[732, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[733, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[734, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[735, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[736, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[737, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[738, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[745, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[745, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[745, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[745, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[745, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[745, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[745, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[745, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[745, "polars.selectors.first"]], "float() (in module polars.selectors)": [[745, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[745, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[745, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[745, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[745, "polars.selectors.matches"]], "module": [[745, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[745, "polars.selectors.numeric"]], "polars.selectors": [[745, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[745, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[745, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[745, "polars.selectors.temporal"]], "abs() (polars.series method)": [[747, "polars.Series.abs"]], "alias() (polars.series method)": [[748, "polars.Series.alias"]], "all() (polars.series method)": [[749, "polars.Series.all"]], "any() (polars.series method)": [[750, "polars.Series.any"]], "append() (polars.series method)": [[751, "polars.Series.append"]], "apply() (polars.series method)": [[752, "polars.Series.apply"]], "arccos() (polars.series method)": [[753, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[754, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[755, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[756, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[757, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[758, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[759, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[760, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[761, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[762, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[763, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[764, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[765, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[766, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[767, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[768, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[769, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[770, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[771, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[772, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[773, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[774, "polars.Series.cast"]], "cat (polars.series attribute)": [[775, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[776, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[777, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[778, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[779, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[780, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[781, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[782, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[783, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[784, "polars.Series.clear"]], "clip() (polars.series method)": [[785, "polars.Series.clip"]], "clip_max() (polars.series method)": [[786, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[787, "polars.Series.clip_min"]], "clone() (polars.series method)": [[788, "polars.Series.clone"]], "cos() (polars.series method)": [[789, "polars.Series.cos"]], "cosh() (polars.series method)": [[790, "polars.Series.cosh"]], "cummax() (polars.series method)": [[791, "polars.Series.cummax"]], "cummin() (polars.series method)": [[792, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[793, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[794, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[795, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[796, "polars.Series.cut"]], "describe() (polars.series method)": [[797, "polars.Series.describe"]], "diff() (polars.series method)": [[798, "polars.Series.diff"]], "dot() (polars.series method)": [[799, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[800, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[801, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[802, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[803, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[804, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[805, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[806, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[807, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[808, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[809, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[810, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[811, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[812, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[813, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[814, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[815, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[816, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[817, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[818, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[819, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[820, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[821, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[822, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[823, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[824, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[825, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[826, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[827, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[828, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[829, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[830, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[831, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[832, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[833, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[834, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[835, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[836, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[837, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[838, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[839, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[840, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[841, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[842, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[843, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[844, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[845, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[846, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[847, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[848, "polars.Series.dtype"]], "entropy() (polars.series method)": [[849, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[850, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[851, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[852, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[853, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[854, "polars.Series.exp"]], "explode() (polars.series method)": [[855, "polars.Series.explode"]], "extend() (polars.series method)": [[856, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[857, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[858, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[859, "polars.Series.fill_null"]], "filter() (polars.series method)": [[860, "polars.Series.filter"]], "flags (polars.series attribute)": [[861, "polars.Series.flags"]], "floor() (polars.series method)": [[862, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[863, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[864, "polars.Series.has_validity"]], "hash() (polars.series method)": [[865, "polars.Series.hash"]], "head() (polars.series method)": [[866, "polars.Series.head"]], "hist() (polars.series method)": [[867, "polars.Series.hist"]], "implode() (polars.series method)": [[868, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[869, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[870, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[871, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[872, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[873, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[874, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[875, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[876, "polars.Series.is_first"]], "is_float() (polars.series method)": [[877, "polars.Series.is_float"]], "is_in() (polars.series method)": [[878, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[879, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[880, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[881, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[882, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[883, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[884, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[885, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[886, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[887, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[888, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[889, "polars.Series.is_utf8"]], "item() (polars.series method)": [[890, "polars.Series.item"]], "kurtosis() (polars.series method)": [[891, "polars.Series.kurtosis"]], "len() (polars.series method)": [[892, "polars.Series.len"]], "limit() (polars.series method)": [[893, "polars.Series.limit"]], "list (polars.series attribute)": [[894, "polars.Series.list"]], "all() (polars.series.list method)": [[895, "polars.Series.list.all"]], "any() (polars.series.list method)": [[896, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[897, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[898, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[899, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[900, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[901, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[902, "polars.Series.list.diff"]], "eval() (polars.series.list method)": [[903, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[904, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[905, "polars.Series.list.first"]], "get() (polars.series.list method)": [[906, "polars.Series.list.get"]], "head() (polars.series.list method)": [[907, "polars.Series.list.head"]], "join() (polars.series.list method)": [[908, "polars.Series.list.join"]], "last() (polars.series.list method)": [[909, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[910, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[911, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[912, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[913, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[914, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[915, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[916, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[917, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[918, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[919, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[920, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[921, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[922, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[923, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[924, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[925, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[926, "polars.Series.list.unique"]], "log() (polars.series method)": [[927, "polars.Series.log"]], "log10() (polars.series method)": [[928, "polars.Series.log10"]], "log1p() (polars.series method)": [[929, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[930, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[931, "polars.Series.map_dict"]], "max() (polars.series method)": [[932, "polars.Series.max"]], "mean() (polars.series method)": [[933, "polars.Series.mean"]], "median() (polars.series method)": [[934, "polars.Series.median"]], "min() (polars.series method)": [[935, "polars.Series.min"]], "mode() (polars.series method)": [[936, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[937, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[938, "polars.Series.n_unique"]], "name (polars.series attribute)": [[939, "polars.Series.name"]], "nan_max() (polars.series method)": [[940, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[941, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[942, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[943, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[944, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[945, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[946, "polars.Series.peak_min"]], "product() (polars.series method)": [[947, "polars.Series.product"]], "qcut() (polars.series method)": [[948, "polars.Series.qcut"]], "quantile() (polars.series method)": [[949, "polars.Series.quantile"]], "rank() (polars.series method)": [[950, "polars.Series.rank"]], "rechunk() (polars.series method)": [[951, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[952, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[953, "polars.Series.rename"]], "reshape() (polars.series method)": [[954, "polars.Series.reshape"]], "reverse() (polars.series method)": [[955, "polars.Series.reverse"]], "rle() (polars.series method)": [[956, "polars.Series.rle"]], "rle_id() (polars.series method)": [[957, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[958, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[959, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[960, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[961, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[962, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[963, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[964, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[965, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[966, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[967, "polars.Series.rolling_var"]], "round() (polars.series method)": [[968, "polars.Series.round"]], "sample() (polars.series method)": [[969, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[970, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[971, "polars.Series.series_equal"]], "set() (polars.series method)": [[972, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[973, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[974, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[975, "polars.Series.shape"]], "shift() (polars.series method)": [[976, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[977, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[978, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[979, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[980, "polars.Series.shuffle"]], "sign() (polars.series method)": [[981, "polars.Series.sign"]], "sin() (polars.series method)": [[982, "polars.Series.sin"]], "sinh() (polars.series method)": [[983, "polars.Series.sinh"]], "skew() (polars.series method)": [[984, "polars.Series.skew"]], "slice() (polars.series method)": [[985, "polars.Series.slice"]], "sort() (polars.series method)": [[986, "polars.Series.sort"]], "sqrt() (polars.series method)": [[987, "polars.Series.sqrt"]], "std() (polars.series method)": [[988, "polars.Series.std"]], "str (polars.series attribute)": [[989, "polars.Series.str"]], "concat() (polars.series.str method)": [[990, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[991, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[992, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[993, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[994, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[995, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[996, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[997, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[998, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[999, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1000, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1001, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[1002, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1003, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1004, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1005, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[1006, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1007, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1008, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1009, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1010, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1011, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1012, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1013, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1014, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1015, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1016, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[1017, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1018, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1019, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1020, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1021, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1022, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1023, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1024, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1025, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1026, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1027, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1028, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1029, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1030, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1031, "polars.Series.sum"]], "tail() (polars.series method)": [[1032, "polars.Series.tail"]], "take() (polars.series method)": [[1033, "polars.Series.take"]], "take_every() (polars.series method)": [[1034, "polars.Series.take_every"]], "tan() (polars.series method)": [[1035, "polars.Series.tan"]], "tanh() (polars.series method)": [[1036, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1037, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1038, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1039, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1040, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1041, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1042, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1043, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1044, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1045, "polars.Series.top_k"]], "unique() (polars.series method)": [[1046, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1047, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1048, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1049, "polars.Series.value_counts"]], "var() (polars.series method)": [[1050, "polars.Series.var"]], "view() (polars.series method)": [[1051, "polars.Series.view"]], "zip_with() (polars.series method)": [[1052, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1068, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1068, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1068, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1068, "polars.SQLContext.__init__"]]}})